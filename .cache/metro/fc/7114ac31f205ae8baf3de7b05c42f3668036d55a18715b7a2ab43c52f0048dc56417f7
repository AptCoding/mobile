{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":71,"column":0,"index":2675}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":71,"column":0,"index":2675}}],"key":"l9ek7s8G7hY7pJY4P1vxwsk0NPM="}},{"name":"@tanstack/react-query","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"67ISVYMo1RFOUYqthAT6DxIQ3Aw="}},{"name":"@trpc/server/unstable-core-do-not-import","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":68,"index":119}}],"key":"v6RfOz0FhqfBuoZo5CXmYCfVJms="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getMutationKey = getMutationKey;\n  exports.getMutationKeyInternal = getMutationKeyInternal;\n  exports.getQueryKey = getQueryKey;\n  exports.getQueryKeyInternal = getQueryKeyInternal;\n  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutProperties\"));\n  var _reactQuery = require(_dependencyMap[2], \"@tanstack/react-query\");\n  var _unstableCoreDoNotImport = require(_dependencyMap[3], \"@trpc/server/unstable-core-do-not-import\");\n  var _excluded = [\"cursor\", \"direction\"];\n  /**\n   * To allow easy interactions with groups of related queries, such as\n   * invalidating all queries of a router, we use an array as the path when\n   * storing in tanstack query.\n   **/\n  function getQueryKeyInternal(path, input, type) {\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    // some parts of the path may be dot-separated, split them up\n    var splitPath = path.flatMap(part => part.split('.'));\n    if (!input && (!type || type === 'any')) {\n      // this matches also all mutations (see `getMutationKeyInternal`)\n      // for `utils.invalidate()` to match all queries (including vanilla react-query)\n      // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n      return splitPath.length ? [splitPath] : [];\n    }\n    if (type === 'infinite' && (0, _unstableCoreDoNotImport.isObject)(input) && ('direction' in input || 'cursor' in input)) {\n      var _ = input.cursor,\n        __ = input.direction,\n        inputWithoutCursorAndDirection = (0, _objectWithoutProperties2.default)(input, _excluded);\n      return [splitPath, {\n        input: inputWithoutCursorAndDirection,\n        type: 'infinite'\n      }];\n    }\n    return [splitPath, {\n      ...(typeof input !== 'undefined' && input !== _reactQuery.skipToken && {\n        input: input\n      }),\n      ...(type && type !== 'any' && {\n        type: type\n      })\n    }];\n  }\n  function getMutationKeyInternal(path) {\n    return getQueryKeyInternal(path, undefined, 'any');\n  }\n  /**\n   * Method to extract the query key for a procedure\n   * @param procedureOrRouter - procedure or AnyRouter\n   * @param input - input to procedureOrRouter\n   * @param type - defaults to `any`\n   * @see https://trpc.io/docs/v11/getQueryKey\n   */\n  function getQueryKey(procedureOrRouter) {\n    for (var _len = arguments.length, _params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      _params[_key - 1] = arguments[_key];\n    }\n    var input = _params[0],\n      type = _params[1];\n    // @ts-expect-error - we don't expose _def on the type layer\n    var path = procedureOrRouter._def().path;\n    var queryKey = getQueryKeyInternal(path, input, type ?? 'any');\n    return queryKey;\n  }\n  /**\n   * Method to extract the mutation key for a procedure\n   * @param procedure - procedure\n   * @see https://trpc.io/docs/v11/getQueryKey#mutations\n   */\n  function getMutationKey(procedure) {\n    // @ts-expect-error - we don't expose _def on the type layer\n    var path = procedure._def().path;\n    return getMutationKeyInternal(path);\n  }\n});","lineCount":80,"map":[[11,2,1,0],[11,6,1,0,"_reactQuery"],[11,17,1,0],[11,20,1,0,"require"],[11,27,1,0],[11,28,1,0,"_dependencyMap"],[11,42,1,0],[12,2,2,0],[12,6,2,0,"_unstableCoreDoNotImport"],[12,30,2,0],[12,33,2,0,"require"],[12,40,2,0],[12,41,2,0,"_dependencyMap"],[12,55,2,0],[13,2,2,68],[13,6,2,68,"_excluded"],[13,15,2,68],[14,2,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,2,8,5],[19,11,8,14,"getQueryKeyInternal"],[19,30,8,33,"getQueryKeyInternal"],[19,31,8,34,"path"],[19,35,8,38],[19,37,8,40,"input"],[19,42,8,45],[19,44,8,47,"type"],[19,48,8,51],[19,50,8,53],[20,4,9,4],[21,4,10,4],[22,4,11,4],[23,4,12,4],[24,4,13,4],[24,8,13,10,"splitPath"],[24,17,13,19],[24,20,13,22,"path"],[24,24,13,26],[24,25,13,27,"flatMap"],[24,32,13,34],[24,33,13,36,"part"],[24,37,13,40],[24,41,13,43,"part"],[24,45,13,47],[24,46,13,48,"split"],[24,51,13,53],[24,52,13,54],[24,55,13,57],[24,56,13,58],[24,57,13,59],[25,4,14,4],[25,8,14,8],[25,9,14,9,"input"],[25,14,14,14],[25,19,14,19],[25,20,14,20,"type"],[25,24,14,24],[25,28,14,28,"type"],[25,32,14,32],[25,37,14,37],[25,42,14,42],[25,43,14,43],[25,45,14,45],[26,6,15,8],[27,6,16,8],[28,6,17,8],[29,6,18,8],[29,13,18,15,"splitPath"],[29,22,18,24],[29,23,18,25,"length"],[29,29,18,31],[29,32,18,34],[29,33,19,12,"splitPath"],[29,42,19,21],[29,43,20,9],[29,46,20,12],[29,48,20,14],[30,4,21,4],[31,4,22,4],[31,8,22,8,"type"],[31,12,22,12],[31,17,22,17],[31,27,22,27],[31,31,22,31],[31,35,22,31,"isObject"],[31,68,22,39],[31,70,22,40,"input"],[31,75,22,45],[31,76,22,46],[31,81,22,51],[31,92,22,62],[31,96,22,66,"input"],[31,101,22,71],[31,105,22,75],[31,113,22,83],[31,117,22,87,"input"],[31,122,22,92],[31,123,22,93],[31,125,22,95],[32,6,23,8],[32,10,23,24,"_"],[32,11,23,25],[32,14,23,80,"input"],[32,19,23,85],[32,20,23,16,"cursor"],[32,26,23,22],[33,8,23,38,"__"],[33,10,23,40],[33,13,23,80,"input"],[33,18,23,85],[33,19,23,27,"direction"],[33,28,23,36],[34,8,23,45,"inputWithoutCursorAndDirection"],[34,38,23,75],[34,45,23,75,"_objectWithoutProperties2"],[34,70,23,75],[34,71,23,75,"default"],[34,78,23,75],[34,80,23,80,"input"],[34,85,23,85],[34,87,23,85,"_excluded"],[34,96,23,85],[35,6,24,8],[35,13,24,15],[35,14,25,12,"splitPath"],[35,23,25,21],[35,25,26,12],[36,8,27,16,"input"],[36,13,27,21],[36,15,27,23,"inputWithoutCursorAndDirection"],[36,45,27,53],[37,8,28,16,"type"],[37,12,28,20],[37,14,28,22],[38,6,29,12],[38,7,29,13],[38,8,30,9],[39,4,31,4],[40,4,32,4],[40,11,32,11],[40,12,33,8,"splitPath"],[40,21,33,17],[40,23,34,8],[41,6,35,12],[41,10,35,15],[41,17,35,22,"input"],[41,22,35,27],[41,27,35,32],[41,38,35,43],[41,42,35,47,"input"],[41,47,35,52],[41,52,35,57,"skipToken"],[41,73,35,66],[41,77,35,70],[42,8,36,16,"input"],[42,13,36,21],[42,15,36,23,"input"],[43,6,37,12],[43,7,37,13],[44,6,38,12],[44,10,38,15,"type"],[44,14,38,19],[44,18,38,23,"type"],[44,22,38,27],[44,27,38,32],[44,32,38,37],[44,36,38,41],[45,8,39,16,"type"],[45,12,39,20],[45,14,39,22,"type"],[46,6,40,12],[46,7,40,13],[47,4,41,8],[47,5,41,9],[47,6,42,5],[48,2,43,0],[49,2,44,0],[49,11,44,9,"getMutationKeyInternal"],[49,33,44,31,"getMutationKeyInternal"],[49,34,44,32,"path"],[49,38,44,36],[49,40,44,38],[50,4,45,4],[50,11,45,11,"getQueryKeyInternal"],[50,30,45,30],[50,31,45,31,"path"],[50,35,45,35],[50,37,45,37,"undefined"],[50,46,45,46],[50,48,45,48],[50,53,45,53],[50,54,45,54],[51,2,46,0],[52,2,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,2,53,4],[59,11,53,13,"getQueryKey"],[59,22,53,24,"getQueryKey"],[59,23,53,25,"procedureOrRouter"],[59,40,53,42],[59,42,53,56],[60,4,53,56],[60,13,53,56,"_len"],[60,17,53,56],[60,20,53,56,"arguments"],[60,29,53,56],[60,30,53,56,"length"],[60,36,53,56],[60,38,53,47,"_params"],[60,45,53,54],[60,52,53,54,"Array"],[60,57,53,54],[60,58,53,54,"_len"],[60,62,53,54],[60,69,53,54,"_len"],[60,73,53,54],[60,84,53,54,"_key"],[60,88,53,54],[60,94,53,54,"_key"],[60,98,53,54],[60,101,53,54,"_len"],[60,105,53,54],[60,107,53,54,"_key"],[60,111,53,54],[61,6,53,47,"_params"],[61,13,53,54],[61,14,53,54,"_key"],[61,18,53,54],[61,26,53,54,"arguments"],[61,35,53,54],[61,36,53,54,"_key"],[61,40,53,54],[62,4,53,54],[63,4,54,4],[63,8,54,11,"input"],[63,13,54,16],[63,16,54,26,"_params"],[63,23,54,33],[64,6,54,18,"type"],[64,10,54,22],[64,13,54,26,"_params"],[64,20,54,33],[65,4,55,4],[66,4,56,4],[66,8,56,10,"path"],[66,12,56,14],[66,15,56,17,"procedureOrRouter"],[66,32,56,34],[66,33,56,35,"_def"],[66,37,56,39],[66,38,56,40],[66,39,56,41],[66,40,56,42,"path"],[66,44,56,46],[67,4,57,4],[67,8,57,10,"queryKey"],[67,16,57,18],[67,19,57,21,"getQueryKeyInternal"],[67,38,57,40],[67,39,57,41,"path"],[67,43,57,45],[67,45,57,47,"input"],[67,50,57,52],[67,52,57,54,"type"],[67,56,57,58],[67,60,57,62],[67,65,57,67],[67,66,57,68],[68,4,58,4],[68,11,58,11,"queryKey"],[68,19,58,19],[69,2,59,0],[70,2,60,0],[71,0,61,0],[72,0,62,0],[73,0,63,0],[74,0,64,0],[75,2,64,4],[75,11,64,13,"getMutationKey"],[75,25,64,27,"getMutationKey"],[75,26,64,28,"procedure"],[75,35,64,37],[75,37,64,39],[76,4,65,4],[77,4,66,4],[77,8,66,10,"path"],[77,12,66,14],[77,15,66,17,"procedure"],[77,24,66,26],[77,25,66,27,"_def"],[77,29,66,31],[77,30,66,32],[77,31,66,33],[77,32,66,34,"path"],[77,36,66,38],[78,4,67,4],[78,11,67,11,"getMutationKeyInternal"],[78,33,67,33],[78,34,67,34,"path"],[78,38,67,38],[78,39,67,39],[79,2,68,0],[80,0,68,1],[80,3]],"functionMap":{"names":["<global>","getQueryKeyInternal","path.flatMap$argument_0","getMutationKeyInternal","getQueryKey","getMutationKey"],"mappings":"AAA;KCO;mCCK,uBD;CD8B;AGC;CHE;IIO;CJM;IKK;CLI"}},"type":"js/module"}]}