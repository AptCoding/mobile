{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":178,"column":0,"index":6690}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":178,"column":0,"index":6690}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":178,"column":0,"index":6690}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./createProxy.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"QRjcqlfWElpa80fcVvPydU+fO5w="}},{"name":"./error/formatter.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":57,"index":115}}],"key":"NaFQJs/lPDeE3tiOjyD06hQzDos="}},{"name":"./error/TRPCError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":116},"end":{"line":3,"column":75,"index":191}}],"key":"WdBNBZk8UDTZJ+aLaEfvYQAC7J4="}},{"name":"./transformer.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":192},"end":{"line":4,"column":55,"index":247}}],"key":"l0kgHDfZUlnTT0guzpjf8wWPUeU="}},{"name":"./utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":248},"end":{"line":5,"column":79,"index":327}}],"key":"XZqiGndSzUFgS+0ABF5nOFWZJRU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.callProcedure = callProcedure;\n  exports.createCallerFactory = createCallerFactory;\n  exports.createRouterFactory = createRouterFactory;\n  exports.mergeRouters = mergeRouters;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _createProxy = require(_dependencyMap[3], \"./createProxy.mjs\");\n  var _formatter = require(_dependencyMap[4], \"./error/formatter.mjs\");\n  var _TRPCError = require(_dependencyMap[5], \"./error/TRPCError.mjs\");\n  var _transformer = require(_dependencyMap[6], \"./transformer.mjs\");\n  var _utils = require(_dependencyMap[7], \"./utils.mjs\");\n  function isRouter(procedureOrRouter) {\n    return procedureOrRouter._def && 'router' in procedureOrRouter._def;\n  }\n  var emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: _formatter.defaultFormatter,\n    transformer: _transformer.defaultTransformer\n  };\n  /**\n   * Reserved words that can't be used as router or procedure names\n   */\n  var reservedWords = [\n  /**\n  * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n  * since JS will think that `.then` is something that exists\n  */\n  'then',\n  /**\n  * `fn.call()` and `fn.apply()` are reserved words because otherwise we can't call a function using `.call` or `.apply`\n  */\n  'call', 'apply'];\n  /**\n   * @internal\n   */\n  function createRouterFactory(config) {\n    function createRouterInner(input) {\n      var reservedWordsUsed = new Set(Object.keys(input).filter(v => reservedWords.includes(v)));\n      if (reservedWordsUsed.size > 0) {\n        throw new Error('Reserved words used in `router({})` call: ' + Array.from(reservedWordsUsed).join(', '));\n      }\n      var procedures = (0, _utils.omitPrototype)({});\n      function step(from) {\n        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var aggregate = (0, _utils.omitPrototype)({});\n        for (var _ref of Object.entries(from ?? {})) {\n          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n          var key = _ref2[0];\n          var item = _ref2[1];\n          if (isRouter(item)) {\n            aggregate[key] = step(item._def.record, [...path, key]);\n            continue;\n          }\n          if (!isProcedure(item)) {\n            // RouterRecord\n            aggregate[key] = step(item, [...path, key]);\n            continue;\n          }\n          var newPath = [...path, key].join('.');\n          if (procedures[newPath]) {\n            throw new Error(`Duplicate key: ${newPath}`);\n          }\n          procedures[newPath] = item;\n          aggregate[key] = item;\n        }\n        return aggregate;\n      }\n      var record = step(input);\n      var _def = {\n        _config: config,\n        router: true,\n        procedures,\n        ...emptyRouter,\n        record\n      };\n      var router = {\n        ...record,\n        _def,\n        createCaller: createCallerFactory()({\n          _def\n        })\n      };\n      return router;\n    }\n    return createRouterInner;\n  }\n  function isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === 'function';\n  }\n  /**\n   * @internal\n   */\n  function callProcedure(opts) {\n    var type = opts.type,\n      path = opts.path;\n    var proc = opts.procedures[path];\n    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) {\n      throw new _TRPCError.TRPCError({\n        code: 'NOT_FOUND',\n        message: `No \"${type}\"-procedure on path \"${path}\"`\n      });\n    }\n    /* istanbul ignore if -- @preserve */\n    if (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === 'subscription') {\n      throw new _TRPCError.TRPCError({\n        code: 'METHOD_NOT_SUPPORTED',\n        message: `Method override is not supported for subscriptions`\n      });\n    }\n    return proc(opts);\n  }\n  function createCallerFactory() {\n    return function createCallerInner(router) {\n      var _def = router._def;\n      return function createCaller(ctxOrCallback, opts) {\n        return (0, _createProxy.createRecursiveProxy)(/*#__PURE__*/function () {\n          var _ref4 = (0, _asyncToGenerator2.default)(function* (_ref3) {\n            var path = _ref3.path,\n              args = _ref3.args;\n            var fullPath = path.join('.');\n            if (path.length === 1 && path[0] === '_def') {\n              return _def;\n            }\n            var procedure = _def.procedures[fullPath];\n            var ctx = undefined;\n            try {\n              ctx = (0, _utils.isFunction)(ctxOrCallback) ? yield Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n              return yield procedure({\n                path: fullPath,\n                getRawInput: function () {\n                  var _ref5 = (0, _asyncToGenerator2.default)(function* () {\n                    return args[0];\n                  });\n                  return function getRawInput() {\n                    return _ref5.apply(this, arguments);\n                  };\n                }(),\n                ctx,\n                type: procedure._def.type,\n                signal: opts?.signal\n              });\n            } catch (cause) {\n              opts?.onError?.({\n                ctx,\n                error: (0, _TRPCError.getTRPCErrorFromUnknown)(cause),\n                input: args[0],\n                path: fullPath,\n                type: procedure._def.type\n              });\n              throw cause;\n            }\n          });\n          return function (_x) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      };\n    };\n  }\n  function mergeRouters() {\n    for (var _len = arguments.length, routerList = new Array(_len), _key = 0; _key < _len; _key++) {\n      routerList[_key] = arguments[_key];\n    }\n    var record = (0, _utils.mergeWithoutOverrides)({}, ...routerList.map(r => r._def.record));\n    var errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter) => {\n      if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _formatter.defaultFormatter) {\n        if (currentErrorFormatter !== _formatter.defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n          throw new Error('You seem to have several error formatters');\n        }\n        return nextRouter._def._config.errorFormatter;\n      }\n      return currentErrorFormatter;\n    }, _formatter.defaultFormatter);\n    var transformer = routerList.reduce((prev, current) => {\n      if (current._def._config.transformer && current._def._config.transformer !== _transformer.defaultTransformer) {\n        if (prev !== _transformer.defaultTransformer && prev !== current._def._config.transformer) {\n          throw new Error('You seem to have several transformers');\n        }\n        return current._def._config.transformer;\n      }\n      return prev;\n    }, _transformer.defaultTransformer);\n    var router = createRouterFactory({\n      errorFormatter,\n      transformer,\n      isDev: routerList.every(r => r._def._config.isDev),\n      allowOutsideOfServer: routerList.every(r => r._def._config.allowOutsideOfServer),\n      isServer: routerList.every(r => r._def._config.isServer),\n      $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n  }\n});","lineCount":203,"map":[[12,2,1,0],[12,6,1,0,"_createProxy"],[12,18,1,0],[12,21,1,0,"require"],[12,28,1,0],[12,29,1,0,"_dependencyMap"],[12,43,1,0],[13,2,2,0],[13,6,2,0,"_formatter"],[13,16,2,0],[13,19,2,0,"require"],[13,26,2,0],[13,27,2,0,"_dependencyMap"],[13,41,2,0],[14,2,3,0],[14,6,3,0,"_TRPCError"],[14,16,3,0],[14,19,3,0,"require"],[14,26,3,0],[14,27,3,0,"_dependencyMap"],[14,41,3,0],[15,2,4,0],[15,6,4,0,"_transformer"],[15,18,4,0],[15,21,4,0,"require"],[15,28,4,0],[15,29,4,0,"_dependencyMap"],[15,43,4,0],[16,2,5,0],[16,6,5,0,"_utils"],[16,12,5,0],[16,15,5,0,"require"],[16,22,5,0],[16,23,5,0,"_dependencyMap"],[16,37,5,0],[17,2,7,0],[17,11,7,9,"isRouter"],[17,19,7,17,"isRouter"],[17,20,7,18,"procedureOrRouter"],[17,37,7,35],[17,39,7,37],[18,4,8,4],[18,11,8,11,"procedureOrRouter"],[18,28,8,28],[18,29,8,29,"_def"],[18,33,8,33],[18,37,8,37],[18,45,8,45],[18,49,8,49,"procedureOrRouter"],[18,66,8,66],[18,67,8,67,"_def"],[18,71,8,71],[19,2,9,0],[20,2,10,0],[20,6,10,6,"emptyRouter"],[20,17,10,17],[20,20,10,20],[21,4,11,4,"_ctx"],[21,8,11,8],[21,10,11,10],[21,14,11,14],[22,4,12,4,"_errorShape"],[22,15,12,15],[22,17,12,17],[22,21,12,21],[23,4,13,4,"_meta"],[23,9,13,9],[23,11,13,11],[23,15,13,15],[24,4,14,4,"queries"],[24,11,14,11],[24,13,14,13],[24,14,14,14],[24,15,14,15],[25,4,15,4,"mutations"],[25,13,15,13],[25,15,15,15],[25,16,15,16],[25,17,15,17],[26,4,16,4,"subscriptions"],[26,17,16,17],[26,19,16,19],[26,20,16,20],[26,21,16,21],[27,4,17,4,"errorFormatter"],[27,18,17,18],[27,20,17,20,"defaultFormatter"],[27,47,17,36],[28,4,18,4,"transformer"],[28,15,18,15],[28,17,18,17,"defaultTransformer"],[29,2,19,0],[29,3,19,1],[30,2,20,0],[31,0,21,0],[32,0,22,0],[33,2,22,4],[33,6,22,10,"reservedWords"],[33,19,22,23],[33,22,22,26],[34,2,23,4],[35,0,24,0],[36,0,25,0],[37,0,26,0],[38,2,26,6],[38,8,26,12],[39,2,27,4],[40,0,28,0],[41,0,29,0],[42,2,29,6],[42,8,29,12],[42,10,30,4],[42,17,30,11],[42,18,31,1],[43,2,32,0],[44,0,33,0],[45,0,34,0],[46,2,34,4],[46,11,34,13,"createRouterFactory"],[46,30,34,32,"createRouterFactory"],[46,31,34,33,"config"],[46,37,34,39],[46,39,34,41],[47,4,35,4],[47,13,35,13,"createRouterInner"],[47,30,35,30,"createRouterInner"],[47,31,35,31,"input"],[47,36,35,36],[47,38,35,38],[48,6,36,8],[48,10,36,14,"reservedWordsUsed"],[48,27,36,31],[48,30,36,34],[48,34,36,38,"Set"],[48,37,36,41],[48,38,36,42,"Object"],[48,44,36,48],[48,45,36,49,"keys"],[48,49,36,53],[48,50,36,54,"input"],[48,55,36,59],[48,56,36,60],[48,57,36,61,"filter"],[48,63,36,67],[48,64,36,69,"v"],[48,65,36,70],[48,69,36,73,"reservedWords"],[48,82,36,86],[48,83,36,87,"includes"],[48,91,36,95],[48,92,36,96,"v"],[48,93,36,97],[48,94,36,98],[48,95,36,99],[48,96,36,100],[49,6,37,8],[49,10,37,12,"reservedWordsUsed"],[49,27,37,29],[49,28,37,30,"size"],[49,32,37,34],[49,35,37,37],[49,36,37,38],[49,38,37,40],[50,8,38,12],[50,14,38,18],[50,18,38,22,"Error"],[50,23,38,27],[50,24,38,28],[50,68,38,72],[50,71,38,75,"Array"],[50,76,38,80],[50,77,38,81,"from"],[50,81,38,85],[50,82,38,86,"reservedWordsUsed"],[50,99,38,103],[50,100,38,104],[50,101,38,105,"join"],[50,105,38,109],[50,106,38,110],[50,110,38,114],[50,111,38,115],[50,112,38,116],[51,6,39,8],[52,6,40,8],[52,10,40,14,"procedures"],[52,20,40,24],[52,23,40,27],[52,27,40,27,"omitPrototype"],[52,47,40,40],[52,49,40,41],[52,50,40,42],[52,51,40,43],[52,52,40,44],[53,6,41,8],[53,15,41,17,"step"],[53,19,41,21,"step"],[53,20,41,22,"from"],[53,24,41,26],[53,26,41,39],[54,8,41,39],[54,12,41,28,"path"],[54,16,41,32],[54,19,41,32,"arguments"],[54,28,41,32],[54,29,41,32,"length"],[54,35,41,32],[54,43,41,32,"arguments"],[54,52,41,32],[54,60,41,32,"undefined"],[54,69,41,32],[54,72,41,32,"arguments"],[54,81,41,32],[54,87,41,35],[54,89,41,37],[55,8,42,12],[55,12,42,18,"aggregate"],[55,21,42,27],[55,24,42,30],[55,28,42,30,"omitPrototype"],[55,48,42,43],[55,50,42,44],[55,51,42,45],[55,52,42,46],[55,53,42,47],[56,8,43,12],[56,17,43,12,"_ref"],[56,21,43,12],[56,25,43,38,"Object"],[56,31,43,44],[56,32,43,45,"entries"],[56,39,43,52],[56,40,43,53,"from"],[56,44,43,57],[56,48,43,61],[56,49,43,62],[56,50,43,63],[56,51,43,64],[56,53,43,65],[57,10,43,65],[57,14,43,65,"_ref2"],[57,19,43,65],[57,26,43,65,"_slicedToArray2"],[57,41,43,65],[57,42,43,65,"default"],[57,49,43,65],[57,51,43,65,"_ref"],[57,55,43,65],[58,10,43,65],[58,14,43,24,"key"],[58,17,43,27],[58,20,43,27,"_ref2"],[58,25,43,27],[59,10,43,27],[59,14,43,29,"item"],[59,18,43,33],[59,21,43,33,"_ref2"],[59,26,43,33],[60,10,44,16],[60,14,44,20,"isRouter"],[60,22,44,28],[60,23,44,29,"item"],[60,27,44,33],[60,28,44,34],[60,30,44,36],[61,12,45,20,"aggregate"],[61,21,45,29],[61,22,45,30,"key"],[61,25,45,33],[61,26,45,34],[61,29,45,37,"step"],[61,33,45,41],[61,34,45,42,"item"],[61,38,45,46],[61,39,45,47,"_def"],[61,43,45,51],[61,44,45,52,"record"],[61,50,45,58],[61,52,45,60],[61,53,46,24],[61,56,46,27,"path"],[61,60,46,31],[61,62,47,24,"key"],[61,65,47,27],[61,66,48,21],[61,67,48,22],[62,12,49,20],[63,10,50,16],[64,10,51,16],[64,14,51,20],[64,15,51,21,"isProcedure"],[64,26,51,32],[64,27,51,33,"item"],[64,31,51,37],[64,32,51,38],[64,34,51,40],[65,12,52,20],[66,12,53,20,"aggregate"],[66,21,53,29],[66,22,53,30,"key"],[66,25,53,33],[66,26,53,34],[66,29,53,37,"step"],[66,33,53,41],[66,34,53,42,"item"],[66,38,53,46],[66,40,53,48],[66,41,54,24],[66,44,54,27,"path"],[66,48,54,31],[66,50,55,24,"key"],[66,53,55,27],[66,54,56,21],[66,55,56,22],[67,12,57,20],[68,10,58,16],[69,10,59,16],[69,14,59,22,"newPath"],[69,21,59,29],[69,24,59,32],[69,25,60,20],[69,28,60,23,"path"],[69,32,60,27],[69,34,61,20,"key"],[69,37,61,23],[69,38,62,17],[69,39,62,18,"join"],[69,43,62,22],[69,44,62,23],[69,47,62,26],[69,48,62,27],[70,10,63,16],[70,14,63,20,"procedures"],[70,24,63,30],[70,25,63,31,"newPath"],[70,32,63,38],[70,33,63,39],[70,35,63,41],[71,12,64,20],[71,18,64,26],[71,22,64,30,"Error"],[71,27,64,35],[71,28,64,36],[71,46,64,54,"newPath"],[71,53,64,61],[71,55,64,63],[71,56,64,64],[72,10,65,16],[73,10,66,16,"procedures"],[73,20,66,26],[73,21,66,27,"newPath"],[73,28,66,34],[73,29,66,35],[73,32,66,38,"item"],[73,36,66,42],[74,10,67,16,"aggregate"],[74,19,67,25],[74,20,67,26,"key"],[74,23,67,29],[74,24,67,30],[74,27,67,33,"item"],[74,31,67,37],[75,8,68,12],[76,8,69,12],[76,15,69,19,"aggregate"],[76,24,69,28],[77,6,70,8],[78,6,71,8],[78,10,71,14,"record"],[78,16,71,20],[78,19,71,23,"step"],[78,23,71,27],[78,24,71,28,"input"],[78,29,71,33],[78,30,71,34],[79,6,72,8],[79,10,72,14,"_def"],[79,14,72,18],[79,17,72,21],[80,8,73,12,"_config"],[80,15,73,19],[80,17,73,21,"config"],[80,23,73,27],[81,8,74,12,"router"],[81,14,74,18],[81,16,74,20],[81,20,74,24],[82,8,75,12,"procedures"],[82,18,75,22],[83,8,76,12],[83,11,76,15,"emptyRouter"],[83,22,76,26],[84,8,77,12,"record"],[85,6,78,8],[85,7,78,9],[86,6,79,8],[86,10,79,14,"router"],[86,16,79,20],[86,19,79,23],[87,8,80,12],[87,11,80,15,"record"],[87,17,80,21],[88,8,81,12,"_def"],[88,12,81,16],[89,8,82,12,"createCaller"],[89,20,82,24],[89,22,82,26,"createCallerFactory"],[89,41,82,45],[89,42,82,46],[89,43,82,47],[89,44,82,48],[90,10,83,16,"_def"],[91,8,84,12],[91,9,84,13],[92,6,85,8],[92,7,85,9],[93,6,86,8],[93,13,86,15,"router"],[93,19,86,21],[94,4,87,4],[95,4,88,4],[95,11,88,11,"createRouterInner"],[95,28,88,28],[96,2,89,0],[97,2,90,0],[97,11,90,9,"isProcedure"],[97,22,90,20,"isProcedure"],[97,23,90,21,"procedureOrRouter"],[97,40,90,38],[97,42,90,40],[98,4,91,4],[98,11,91,11],[98,18,91,18,"procedureOrRouter"],[98,35,91,35],[98,40,91,40],[98,50,91,50],[99,2,92,0],[100,2,93,0],[101,0,94,0],[102,0,95,0],[103,2,95,4],[103,11,95,13,"callProcedure"],[103,24,95,26,"callProcedure"],[103,25,95,27,"opts"],[103,29,95,31],[103,31,95,33],[104,4,96,4],[104,8,96,12,"type"],[104,12,96,16],[104,15,96,27,"opts"],[104,19,96,31],[104,20,96,12,"type"],[104,24,96,16],[105,6,96,18,"path"],[105,10,96,22],[105,13,96,27,"opts"],[105,17,96,31],[105,18,96,18,"path"],[105,22,96,22],[106,4,97,4],[106,8,97,10,"proc"],[106,12,97,14],[106,15,97,17,"opts"],[106,19,97,21],[106,20,97,22,"procedures"],[106,30,97,32],[106,31,97,33,"path"],[106,35,97,37],[106,36,97,38],[107,4,98,4],[107,8,98,8],[107,9,98,9,"proc"],[107,13,98,13],[107,17,98,17],[107,18,98,18,"isProcedure"],[107,29,98,29],[107,30,98,30,"proc"],[107,34,98,34],[107,35,98,35],[107,39,98,39,"proc"],[107,43,98,43],[107,44,98,44,"_def"],[107,48,98,48],[107,49,98,49,"type"],[107,53,98,53],[107,58,98,58,"type"],[107,62,98,62],[107,66,98,66],[107,67,98,67,"opts"],[107,71,98,71],[107,72,98,72,"allowMethodOverride"],[107,91,98,91],[107,93,98,93],[108,6,99,8],[108,12,99,14],[108,16,99,18,"TRPCError"],[108,36,99,27],[108,37,99,28],[109,8,100,12,"code"],[109,12,100,16],[109,14,100,18],[109,25,100,29],[110,8,101,12,"message"],[110,15,101,19],[110,17,101,21],[110,24,101,28,"type"],[110,28,101,32],[110,52,101,56,"path"],[110,56,101,60],[111,6,102,8],[111,7,102,9],[111,8,102,10],[112,4,103,4],[113,4,104,4],[114,4,104,42],[114,8,104,46,"proc"],[114,12,104,50],[114,13,104,51,"_def"],[114,17,104,55],[114,18,104,56,"type"],[114,22,104,60],[114,27,104,65,"type"],[114,31,104,69],[114,35,104,73,"opts"],[114,39,104,77],[114,40,104,78,"allowMethodOverride"],[114,59,104,97],[114,63,104,101,"proc"],[114,67,104,105],[114,68,104,106,"_def"],[114,72,104,110],[114,73,104,111,"type"],[114,77,104,115],[114,82,104,120],[114,96,104,134],[114,98,104,136],[115,6,105,8],[115,12,105,14],[115,16,105,18,"TRPCError"],[115,36,105,27],[115,37,105,28],[116,8,106,12,"code"],[116,12,106,16],[116,14,106,18],[116,36,106,40],[117,8,107,12,"message"],[117,15,107,19],[117,17,107,21],[118,6,108,8],[118,7,108,9],[118,8,108,10],[119,4,109,4],[120,4,110,4],[120,11,110,11,"proc"],[120,15,110,15],[120,16,110,16,"opts"],[120,20,110,20],[120,21,110,21],[121,2,111,0],[122,2,112,0],[122,11,112,9,"createCallerFactory"],[122,30,112,28,"createCallerFactory"],[122,31,112,28],[122,33,112,31],[123,4,113,4],[123,11,113,11],[123,20,113,20,"createCallerInner"],[123,37,113,37,"createCallerInner"],[123,38,113,38,"router"],[123,44,113,44],[123,46,113,46],[124,6,114,8],[124,10,114,14,"_def"],[124,14,114,18],[124,17,114,21,"router"],[124,23,114,27],[124,24,114,28,"_def"],[124,28,114,32],[125,6,115,8],[125,13,115,15],[125,22,115,24,"createCaller"],[125,34,115,36,"createCaller"],[125,35,115,37,"ctxOrCallback"],[125,48,115,50],[125,50,115,52,"opts"],[125,54,115,56],[125,56,115,58],[126,8,116,12],[126,15,116,19],[126,19,116,19,"createRecursiveProxy"],[126,52,116,39],[127,10,116,39],[127,14,116,39,"_ref4"],[127,19,116,39],[127,26,116,39,"_asyncToGenerator2"],[127,44,116,39],[127,45,116,39,"default"],[127,52,116,39],[127,54,116,40],[127,65,116,40,"_ref3"],[127,70,116,40],[127,72,116,64],[128,12,116,64],[128,16,116,49,"path"],[128,20,116,53],[128,23,116,53,"_ref3"],[128,28,116,53],[128,29,116,49,"path"],[128,33,116,53],[129,14,116,55,"args"],[129,18,116,59],[129,21,116,59,"_ref3"],[129,26,116,59],[129,27,116,55,"args"],[129,31,116,59],[130,12,117,16],[130,16,117,22,"fullPath"],[130,24,117,30],[130,27,117,33,"path"],[130,31,117,37],[130,32,117,38,"join"],[130,36,117,42],[130,37,117,43],[130,40,117,46],[130,41,117,47],[131,12,118,16],[131,16,118,20,"path"],[131,20,118,24],[131,21,118,25,"length"],[131,27,118,31],[131,32,118,36],[131,33,118,37],[131,37,118,41,"path"],[131,41,118,45],[131,42,118,46],[131,43,118,47],[131,44,118,48],[131,49,118,53],[131,55,118,59],[131,57,118,61],[132,14,119,20],[132,21,119,27,"_def"],[132,25,119,31],[133,12,120,16],[134,12,121,16],[134,16,121,22,"procedure"],[134,25,121,31],[134,28,121,34,"_def"],[134,32,121,38],[134,33,121,39,"procedures"],[134,43,121,49],[134,44,121,50,"fullPath"],[134,52,121,58],[134,53,121,59],[135,12,122,16],[135,16,122,20,"ctx"],[135,19,122,23],[135,22,122,26,"undefined"],[135,31,122,35],[136,12,123,16],[136,16,123,20],[137,14,124,20,"ctx"],[137,17,124,23],[137,20,124,26],[137,24,124,26,"isFunction"],[137,41,124,36],[137,43,124,37,"ctxOrCallback"],[137,56,124,50],[137,57,124,51],[137,66,124,60,"Promise"],[137,73,124,67],[137,74,124,68,"resolve"],[137,81,124,75],[137,82,124,76,"ctxOrCallback"],[137,95,124,89],[137,96,124,90],[137,97,124,91],[137,98,124,92],[137,101,124,95,"ctxOrCallback"],[137,114,124,108],[138,14,125,20],[138,27,125,33,"procedure"],[138,36,125,42],[138,37,125,43],[139,16,126,24,"path"],[139,20,126,28],[139,22,126,30,"fullPath"],[139,30,126,38],[140,16,127,24,"getRawInput"],[140,27,127,35],[141,18,127,35],[141,22,127,35,"_ref5"],[141,27,127,35],[141,34,127,35,"_asyncToGenerator2"],[141,52,127,35],[141,53,127,35,"default"],[141,60,127,35],[141,62,127,37],[142,20,127,37],[142,27,127,47,"args"],[142,31,127,51],[142,32,127,52],[142,33,127,53],[142,34,127,54],[143,18,127,54],[144,18,127,54],[144,34,127,24,"getRawInput"],[144,45,127,35,"getRawInput"],[144,46,127,35],[145,20,127,35],[145,27,127,35,"_ref5"],[145,32,127,35],[145,33,127,35,"apply"],[145,38,127,35],[145,45,127,35,"arguments"],[145,54,127,35],[146,18,127,35],[147,16,127,35],[147,19,127,54],[148,16,128,24,"ctx"],[148,19,128,27],[149,16,129,24,"type"],[149,20,129,28],[149,22,129,30,"procedure"],[149,31,129,39],[149,32,129,40,"_def"],[149,36,129,44],[149,37,129,45,"type"],[149,41,129,49],[150,16,130,24,"signal"],[150,22,130,30],[150,24,130,32,"opts"],[150,28,130,36],[150,30,130,38,"signal"],[151,14,131,20],[151,15,131,21],[151,16,131,22],[152,12,132,16],[152,13,132,17],[152,14,132,18],[152,21,132,25,"cause"],[152,26,132,30],[152,28,132,32],[153,14,133,20,"opts"],[153,18,133,24],[153,20,133,26,"onError"],[153,27,133,33],[153,30,133,36],[154,16,134,24,"ctx"],[154,19,134,27],[155,16,135,24,"error"],[155,21,135,29],[155,23,135,31],[155,27,135,31,"getTRPCErrorFromUnknown"],[155,61,135,54],[155,63,135,55,"cause"],[155,68,135,60],[155,69,135,61],[156,16,136,24,"input"],[156,21,136,29],[156,23,136,31,"args"],[156,27,136,35],[156,28,136,36],[156,29,136,37],[156,30,136,38],[157,16,137,24,"path"],[157,20,137,28],[157,22,137,30,"fullPath"],[157,30,137,38],[158,16,138,24,"type"],[158,20,138,28],[158,22,138,30,"procedure"],[158,31,138,39],[158,32,138,40,"_def"],[158,36,138,44],[158,37,138,45,"type"],[159,14,139,20],[159,15,139,21],[159,16,139,22],[160,14,140,20],[160,20,140,26,"cause"],[160,25,140,31],[161,12,141,16],[162,10,142,12],[162,11,142,13],[163,10,142,13],[163,27,142,13,"_x"],[163,29,142,13],[164,12,142,13],[164,19,142,13,"_ref4"],[164,24,142,13],[164,25,142,13,"apply"],[164,30,142,13],[164,37,142,13,"arguments"],[164,46,142,13],[165,10,142,13],[166,8,142,13],[166,12,142,14],[167,6,143,8],[167,7,143,9],[168,4,144,4],[168,5,144,5],[169,2,145,0],[170,2,146,0],[170,11,146,9,"mergeRouters"],[170,23,146,21,"mergeRouters"],[170,24,146,21],[170,26,146,37],[171,4,146,37],[171,13,146,37,"_len"],[171,17,146,37],[171,20,146,37,"arguments"],[171,29,146,37],[171,30,146,37,"length"],[171,36,146,37],[171,38,146,25,"routerList"],[171,48,146,35],[171,55,146,35,"Array"],[171,60,146,35],[171,61,146,35,"_len"],[171,65,146,35],[171,68,146,35,"_key"],[171,72,146,35],[171,78,146,35,"_key"],[171,82,146,35],[171,85,146,35,"_len"],[171,89,146,35],[171,91,146,35,"_key"],[171,95,146,35],[172,6,146,25,"routerList"],[172,16,146,35],[172,17,146,35,"_key"],[172,21,146,35],[172,25,146,35,"arguments"],[172,34,146,35],[172,35,146,35,"_key"],[172,39,146,35],[173,4,146,35],[174,4,147,4],[174,8,147,10,"record"],[174,14,147,16],[174,17,147,19],[174,21,147,19,"mergeWithoutOverrides"],[174,49,147,40],[174,51,147,41],[174,52,147,42],[174,53,147,43],[174,55,147,45],[174,58,147,48,"routerList"],[174,68,147,58],[174,69,147,59,"map"],[174,72,147,62],[174,73,147,64,"r"],[174,74,147,65],[174,78,147,68,"r"],[174,79,147,69],[174,80,147,70,"_def"],[174,84,147,74],[174,85,147,75,"record"],[174,91,147,81],[174,92,147,82],[174,93,147,83],[175,4,148,4],[175,8,148,10,"errorFormatter"],[175,22,148,24],[175,25,148,27,"routerList"],[175,35,148,37],[175,36,148,38,"reduce"],[175,42,148,44],[175,43,148,45],[175,44,148,46,"currentErrorFormatter"],[175,65,148,67],[175,67,148,69,"nextRouter"],[175,77,148,79],[175,82,148,82],[176,6,149,8],[176,10,149,12,"nextRouter"],[176,20,149,22],[176,21,149,23,"_def"],[176,25,149,27],[176,26,149,28,"_config"],[176,33,149,35],[176,34,149,36,"errorFormatter"],[176,48,149,50],[176,52,149,54,"nextRouter"],[176,62,149,64],[176,63,149,65,"_def"],[176,67,149,69],[176,68,149,70,"_config"],[176,75,149,77],[176,76,149,78,"errorFormatter"],[176,90,149,92],[176,95,149,97,"defaultFormatter"],[176,122,149,113],[176,124,149,115],[177,8,150,12],[177,12,150,16,"currentErrorFormatter"],[177,33,150,37],[177,38,150,42,"defaultFormatter"],[177,65,150,58],[177,69,150,62,"currentErrorFormatter"],[177,90,150,83],[177,95,150,88,"nextRouter"],[177,105,150,98],[177,106,150,99,"_def"],[177,110,150,103],[177,111,150,104,"_config"],[177,118,150,111],[177,119,150,112,"errorFormatter"],[177,133,150,126],[177,135,150,128],[178,10,151,16],[178,16,151,22],[178,20,151,26,"Error"],[178,25,151,31],[178,26,151,32],[178,69,151,75],[178,70,151,76],[179,8,152,12],[180,8,153,12],[180,15,153,19,"nextRouter"],[180,25,153,29],[180,26,153,30,"_def"],[180,30,153,34],[180,31,153,35,"_config"],[180,38,153,42],[180,39,153,43,"errorFormatter"],[180,53,153,57],[181,6,154,8],[182,6,155,8],[182,13,155,15,"currentErrorFormatter"],[182,34,155,36],[183,4,156,4],[183,5,156,5],[183,7,156,7,"defaultFormatter"],[183,34,156,23],[183,35,156,24],[184,4,157,4],[184,8,157,10,"transformer"],[184,19,157,21],[184,22,157,24,"routerList"],[184,32,157,34],[184,33,157,35,"reduce"],[184,39,157,41],[184,40,157,42],[184,41,157,43,"prev"],[184,45,157,47],[184,47,157,49,"current"],[184,54,157,56],[184,59,157,59],[185,6,158,8],[185,10,158,12,"current"],[185,17,158,19],[185,18,158,20,"_def"],[185,22,158,24],[185,23,158,25,"_config"],[185,30,158,32],[185,31,158,33,"transformer"],[185,42,158,44],[185,46,158,48,"current"],[185,53,158,55],[185,54,158,56,"_def"],[185,58,158,60],[185,59,158,61,"_config"],[185,66,158,68],[185,67,158,69,"transformer"],[185,78,158,80],[185,83,158,85,"defaultTransformer"],[185,114,158,103],[185,116,158,105],[186,8,159,12],[186,12,159,16,"prev"],[186,16,159,20],[186,21,159,25,"defaultTransformer"],[186,52,159,43],[186,56,159,47,"prev"],[186,60,159,51],[186,65,159,56,"current"],[186,72,159,63],[186,73,159,64,"_def"],[186,77,159,68],[186,78,159,69,"_config"],[186,85,159,76],[186,86,159,77,"transformer"],[186,97,159,88],[186,99,159,90],[187,10,160,16],[187,16,160,22],[187,20,160,26,"Error"],[187,25,160,31],[187,26,160,32],[187,65,160,71],[187,66,160,72],[188,8,161,12],[189,8,162,12],[189,15,162,19,"current"],[189,22,162,26],[189,23,162,27,"_def"],[189,27,162,31],[189,28,162,32,"_config"],[189,35,162,39],[189,36,162,40,"transformer"],[189,47,162,51],[190,6,163,8],[191,6,164,8],[191,13,164,15,"prev"],[191,17,164,19],[192,4,165,4],[192,5,165,5],[192,7,165,7,"defaultTransformer"],[192,38,165,25],[192,39,165,26],[193,4,166,4],[193,8,166,10,"router"],[193,14,166,16],[193,17,166,19,"createRouterFactory"],[193,36,166,38],[193,37,166,39],[194,6,167,8,"errorFormatter"],[194,20,167,22],[195,6,168,8,"transformer"],[195,17,168,19],[196,6,169,8,"isDev"],[196,11,169,13],[196,13,169,15,"routerList"],[196,23,169,25],[196,24,169,26,"every"],[196,29,169,31],[196,30,169,33,"r"],[196,31,169,34],[196,35,169,37,"r"],[196,36,169,38],[196,37,169,39,"_def"],[196,41,169,43],[196,42,169,44,"_config"],[196,49,169,51],[196,50,169,52,"isDev"],[196,55,169,57],[196,56,169,58],[197,6,170,8,"allowOutsideOfServer"],[197,26,170,28],[197,28,170,30,"routerList"],[197,38,170,40],[197,39,170,41,"every"],[197,44,170,46],[197,45,170,48,"r"],[197,46,170,49],[197,50,170,52,"r"],[197,51,170,53],[197,52,170,54,"_def"],[197,56,170,58],[197,57,170,59,"_config"],[197,64,170,66],[197,65,170,67,"allowOutsideOfServer"],[197,85,170,87],[197,86,170,88],[198,6,171,8,"isServer"],[198,14,171,16],[198,16,171,18,"routerList"],[198,26,171,28],[198,27,171,29,"every"],[198,32,171,34],[198,33,171,36,"r"],[198,34,171,37],[198,38,171,40,"r"],[198,39,171,41],[198,40,171,42,"_def"],[198,44,171,46],[198,45,171,47,"_config"],[198,52,171,54],[198,53,171,55,"isServer"],[198,61,171,63],[198,62,171,64],[199,6,172,8,"$types"],[199,12,172,14],[199,14,172,16,"routerList"],[199,24,172,26],[199,25,172,27],[199,26,172,28],[199,27,172,29],[199,29,172,31,"_def"],[199,33,172,35],[199,34,172,36,"_config"],[199,41,172,43],[199,42,172,44,"$types"],[200,4,173,4],[200,5,173,5],[200,6,173,6],[200,7,173,7,"record"],[200,13,173,13],[200,14,173,14],[201,4,174,4],[201,11,174,11,"router"],[201,17,174,17],[202,2,175,0],[203,0,175,1],[203,3]],"functionMap":{"names":["<global>","isRouter","createRouterFactory","createRouterInner","Object.keys.filter$argument_0","step","isProcedure","callProcedure","createCallerFactory","createCallerInner","createCaller","createRecursiveProxy$argument_0","procedure$argument_0.getRawInput","mergeRouters","routerList.map$argument_0","routerList.reduce$argument_0","routerList.every$argument_0"],"mappings":"AAA;ACM;CDE;IEyB;ICC;oECC,8BD;QEK;SF6B;KDiB;CFE;AMC;CNE;IOG;CPgB;AQC;WCC;eCE;wCCC;qCCW,iBD;aDe;SDC;KDC;CRC;AaC;+DCC,kBD;6CEC;KFQ;0CEC;KFQ;gCGI,yBH;+CGC,wCH;mCGC,4BH;CbI"}},"type":"js/module"}]}