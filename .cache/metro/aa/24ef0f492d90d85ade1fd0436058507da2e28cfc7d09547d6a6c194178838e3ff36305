{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":661,"column":0,"index":28775}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":661,"column":0,"index":28775}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":12,"index":76},"end":{"line":3,"column":28,"index":92}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"use-sync-external-store/shim/index.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":17,"index":111},"end":{"line":4,"column":65,"index":159}}],"key":"KUpeHrw/rXp77O4eLlPYNx8PemM="}},{"name":"../_internal/index.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":15,"index":176},"end":{"line":5,"column":47,"index":208}}],"key":"SkOmB4gInBlaLChLZBYMiAG05uw="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _slicedToArray = require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var React = require(_dependencyMap[2], \"react\");\n  var index_js$1 = require(_dependencyMap[3], \"use-sync-external-store/shim/index.js\");\n  var index_js = require(_dependencyMap[4], \"../_internal/index.js\");\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  var React__default = /*#__PURE__*/_interopDefault(React);\n\n  // Shared state between server components and client components\n  var noop = () => {};\n  // Using noop() as the undefined value as undefined can be replaced\n  // by something else. Prettier ignore and extra parentheses are necessary here\n  // to ensure that tsc doesn't remove the __NOINLINE__ comment.\n  // prettier-ignore\n  var UNDEFINED = /*#__NOINLINE__*/noop();\n  var OBJECT = Object;\n  var isUndefined = v => v === UNDEFINED;\n  var isFunction = v => typeof v == 'function';\n\n  // use WeakMap to store the object->key mapping\n  // so the objects can be garbage collected.\n  // WeakMap uses a hashtable under the hood, so the lookup\n  // complexity is almost O(1).\n  var table = new WeakMap();\n  var isObjectType = (value, type) => OBJECT.prototype.toString.call(value) === `[object ${type}]`;\n  // counter of the key\n  var counter = 0;\n  // A stable hash implementation that supports:\n  // - Fast and ensures unique hash properties\n  // - Handles unserializable values\n  // - Handles object key ordering\n  // - Generates short results\n  //\n  // This is not a serialization function, and the result is not guaranteed to be\n  // parsable.\n  var stableHash = arg => {\n    var type = typeof arg;\n    var isDate = isObjectType(arg, 'Date');\n    var isRegex = isObjectType(arg, 'RegExp');\n    var isPlainObject = isObjectType(arg, 'Object');\n    var result;\n    var index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n      // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n      // If it's already hashed, directly return the result.\n      result = table.get(arg);\n      if (result) return result;\n      // Store the hash first for circular reference detection before entering the\n      // recursive `stableHash` calls.\n      // For other objects like set and map, we use this id directly as the hash.\n      result = ++counter + '~';\n      table.set(arg, result);\n      if (Array.isArray(arg)) {\n        // Array.\n        result = '@';\n        for (index = 0; index < arg.length; index++) {\n          result += stableHash(arg[index]) + ',';\n        }\n        table.set(arg, result);\n      }\n      if (isPlainObject) {\n        // Object, sort keys.\n        result = '#';\n        var keys = OBJECT.keys(arg).sort();\n        while (!isUndefined(index = keys.pop())) {\n          if (!isUndefined(arg[index])) {\n            result += index + ':' + stableHash(arg[index]) + ',';\n          }\n        }\n        table.set(arg, result);\n      }\n    } else {\n      result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n  };\n  var serialize = key => {\n    if (isFunction(key)) {\n      try {\n        key = key();\n      } catch (err) {\n        // dependencies not ready\n        key = '';\n      }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    var args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [key, args];\n  };\n  var unstable_serialize = key => serialize(key)[0];\n\n  /// <reference types=\"react/experimental\" />\n  var use = React__default.default.use || (\n  // This extra generic is to avoid TypeScript mixing up the generic and JSX sytax\n  // and emitting an error.\n  // We assume that this is only for the `use(thenable)` case, not `use(context)`.\n  // https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\n  thenable => {\n    switch (thenable.status) {\n      case 'pending':\n        throw thenable;\n      case 'fulfilled':\n        return thenable.value;\n      case 'rejected':\n        throw thenable.reason;\n      default:\n        thenable.status = 'pending';\n        thenable.then(v => {\n          thenable.status = 'fulfilled';\n          thenable.value = v;\n        }, e => {\n          thenable.status = 'rejected';\n          thenable.reason = e;\n        });\n        throw thenable;\n    }\n  });\n  var WITH_DEDUPE = {\n    dedupe: true\n  };\n  var useSWRHandler = (_key, fetcher, config) => {\n    var cache = config.cache,\n      compare = config.compare,\n      suspense = config.suspense,\n      fallbackData = config.fallbackData,\n      revalidateOnMount = config.revalidateOnMount,\n      revalidateIfStale = config.revalidateIfStale,\n      refreshInterval = config.refreshInterval,\n      refreshWhenHidden = config.refreshWhenHidden,\n      refreshWhenOffline = config.refreshWhenOffline,\n      keepPreviousData = config.keepPreviousData;\n    var _index_js$SWRGlobalSt = index_js.SWRGlobalState.get(cache),\n      _index_js$SWRGlobalSt2 = _slicedToArray(_index_js$SWRGlobalSt, 4),\n      EVENT_REVALIDATORS = _index_js$SWRGlobalSt2[0],\n      MUTATION = _index_js$SWRGlobalSt2[1],\n      FETCH = _index_js$SWRGlobalSt2[2],\n      PRELOAD = _index_js$SWRGlobalSt2[3];\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    var _index_js$serialize = index_js.serialize(_key),\n      _index_js$serialize2 = _slicedToArray(_index_js$serialize, 2),\n      key = _index_js$serialize2[0],\n      fnArg = _index_js$serialize2[1];\n    // If it's the initial render of this hook.\n    var initialMountedRef = React.useRef(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    var unmountedRef = React.useRef(false);\n    // Refs to keep the key and config.\n    var keyRef = React.useRef(key);\n    var fetcherRef = React.useRef(fetcher);\n    var configRef = React.useRef(config);\n    var getConfig = () => configRef.current;\n    var isActive = () => getConfig().isVisible() && getConfig().isOnline();\n    var _index_js$createCache = index_js.createCacheHelper(cache, key),\n      _index_js$createCache2 = _slicedToArray(_index_js$createCache, 4),\n      getCache = _index_js$createCache2[0],\n      setCache = _index_js$createCache2[1],\n      subscribeCache = _index_js$createCache2[2],\n      getInitialCache = _index_js$createCache2[3];\n    var stateDependencies = React.useRef({}).current;\n    // Resolve the fallback data from either the inline option, or the global provider.\n    // If it's a promise, we simply let React suspend and resolve it for us.\n    var fallback = index_js.isUndefined(fallbackData) ? index_js.isUndefined(config.fallback) ? index_js.UNDEFINED : config.fallback[key] : fallbackData;\n    var isEqual = (prev, current) => {\n      for (var _ in stateDependencies) {\n        var t = _;\n        if (t === 'data') {\n          if (!compare(prev[t], current[t])) {\n            if (!index_js.isUndefined(prev[t])) {\n              return false;\n            }\n            if (!compare(returnedData, current[t])) {\n              return false;\n            }\n          }\n        } else {\n          if (current[t] !== prev[t]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    var getSnapshot = React.useMemo(() => {\n      var shouldStartRequest = (() => {\n        if (!key) return false;\n        if (!fetcher) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (!index_js.isUndefined(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        if (suspense) return false;\n        return revalidateIfStale !== false;\n      })();\n      // Get the cache and merge it with expected states.\n      var getSelectedCache = state => {\n        // We only select the needed fields from the state.\n        var snapshot = index_js.mergeObjects(state);\n        delete snapshot._k;\n        if (!shouldStartRequest) {\n          return snapshot;\n        }\n        return {\n          isValidating: true,\n          isLoading: true,\n          ...snapshot\n        };\n      };\n      var cachedData = getCache();\n      var initialData = getInitialCache();\n      var clientSnapshot = getSelectedCache(cachedData);\n      var serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n      // To make sure that we are returning the same object reference to avoid\n      // unnecessary re-renders, we keep the previous snapshot and use deep\n      // comparison to check if we need to return a new one.\n      var memorizedSnapshot = clientSnapshot;\n      return [() => {\n        var newSnapshot = getSelectedCache(getCache());\n        var compareResult = isEqual(newSnapshot, memorizedSnapshot);\n        if (compareResult) {\n          // Mentally, we should always return the `memorizedSnapshot` here\n          // as there's no change between the new and old snapshots.\n          // However, since the `isEqual` function only compares selected fields,\n          // the values of the unselected fields might be changed. That's\n          // simply because we didn't track them.\n          // To support the case in https://github.com/vercel/swr/pull/2576,\n          // we need to update these fields in the `memorizedSnapshot` too\n          // with direct mutations to ensure the snapshot is always up-to-date\n          // even for the unselected fields, but only trigger re-renders when\n          // the selected fields are changed.\n          memorizedSnapshot.data = newSnapshot.data;\n          memorizedSnapshot.isLoading = newSnapshot.isLoading;\n          memorizedSnapshot.isValidating = newSnapshot.isValidating;\n          memorizedSnapshot.error = newSnapshot.error;\n          return memorizedSnapshot;\n        } else {\n          memorizedSnapshot = newSnapshot;\n          return newSnapshot;\n        }\n      }, () => serverSnapshot];\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cache, key]);\n    // Get the current state that SWR should return.\n    var cached = index_js$1.useSyncExternalStore(React.useCallback(callback => subscribeCache(key, (current, prev) => {\n      if (!isEqual(prev, current)) callback();\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cache, key]), getSnapshot[0], getSnapshot[1]);\n    var isInitialMount = !initialMountedRef.current;\n    var hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    var cachedData = cached.data;\n    var data = index_js.isUndefined(cachedData) ? fallback && index_js.isPromiseLike(fallback) ? use(fallback) : fallback : cachedData;\n    var error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    var laggyDataRef = React.useRef(data);\n    var returnedData = keepPreviousData ? index_js.isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    var shouldDoInitialRevalidation = (() => {\n      // if a key already has revalidators and also has error, we should not trigger revalidation\n      if (hasRevalidator && !index_js.isUndefined(error)) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (isInitialMount && !index_js.isUndefined(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      // Under suspense mode, it will always fetch on render if there is no\n      // stale data so no need to revalidate immediately mount it again.\n      // If data exists, only revalidate if `revalidateIfStale` is true.\n      if (suspense) return index_js.isUndefined(data) ? false : revalidateIfStale;\n      // If there is no stale data, we need to revalidate when mount;\n      // If `revalidateIfStale` is set to true, we will always revalidate.\n      return index_js.isUndefined(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    var defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    var isValidating = index_js.isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    var isLoading = index_js.isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    var revalidate = React.useCallback(/*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (revalidateOpts) {\n        var currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n          return false;\n        }\n        var newData;\n        var startAt;\n        var loading = true;\n        var opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        var shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n         For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n        */\n        var callbackSafeguard = () => {\n          if (index_js.IS_REACT_LEGACY) {\n            return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n          }\n          return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        var finalState = {\n          isValidating: false,\n          isLoading: false\n        };\n        var finishRequestAndUpdateState = () => {\n          setCache(finalState);\n        };\n        var cleanupState = () => {\n          // Check if it's still the same request before deleting it.\n          var requestInfo = FETCH[key];\n          if (requestInfo && requestInfo[1] === startAt) {\n            delete FETCH[key];\n          }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        var initialState = {\n          isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if (index_js.isUndefined(getCache().data)) {\n          initialState.isLoading = true;\n        }\n        try {\n          if (shouldStartNewRequest) {\n            setCache(initialState);\n            // If no cache is being rendered currently (it shows a blank page),\n            // we trigger the loading slow event.\n            if (config.loadingTimeout && index_js.isUndefined(getCache().data)) {\n              setTimeout(() => {\n                if (loading && callbackSafeguard()) {\n                  getConfig().onLoadingSlow(key, config);\n                }\n              }, config.loadingTimeout);\n            }\n            // Start the request and save the timestamp.\n            // Key must be truthy if entering here.\n            FETCH[key] = [currentFetcher(fnArg), index_js.getTimestamp()];\n          }\n          // Wait until the ongoing request is done. Deduplication is also\n          // considered here.\n          ;\n          var _FETCH$key = _slicedToArray(FETCH[key], 2);\n          newData = _FETCH$key[0];\n          startAt = _FETCH$key[1];\n          newData = yield newData;\n          if (shouldStartNewRequest) {\n            // If the request isn't interrupted, clean it up after the\n            // deduplication interval.\n            setTimeout(cleanupState, config.dedupingInterval);\n          }\n          // If there're other ongoing request(s), started after the current one,\n          // we need to ignore the current one to avoid possible race conditions:\n          //   req1------------------>res1        (current one)\n          //        req2---------------->res2\n          // the request that fired later will always be kept.\n          // The timestamp maybe be `undefined` or a number\n          if (!FETCH[key] || FETCH[key][1] !== startAt) {\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return false;\n          }\n          // Clear error.\n          finalState.error = index_js.UNDEFINED;\n          // If there're other mutations(s), that overlapped with the current revalidation:\n          // case 1:\n          //   req------------------>res\n          //       mutate------>end\n          // case 2:\n          //         req------------>res\n          //   mutate------>end\n          // case 3:\n          //   req------------------>res\n          //       mutate-------...---------->\n          // we have to ignore the revalidation result (res) because it's no longer fresh.\n          // meanwhile, a new revalidation should be triggered when the mutation ends.\n          var mutationInfo = MUTATION[key];\n          if (!index_js.isUndefined(mutationInfo) && (\n          // case 1\n          startAt <= mutationInfo[0] ||\n          // case 2\n          startAt <= mutationInfo[1] ||\n          // case 3\n          mutationInfo[1] === 0)) {\n            finishRequestAndUpdateState();\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return false;\n          }\n          // Deep compare with the latest state to avoid extra re-renders.\n          // For local state, compare and assign.\n          var cacheData = getCache().data;\n          // Since the compare fn could be custom fn\n          // cacheData might be different from newData even when compare fn returns True\n          finalState.data = compare(cacheData, newData) ? cacheData : newData;\n          // Trigger the successful callback if it's the original request.\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onSuccess(newData, key, config);\n            }\n          }\n        } catch (err) {\n          cleanupState();\n          var currentConfig = getConfig();\n          var shouldRetryOnError = currentConfig.shouldRetryOnError;\n          // Not paused, we continue handling the error. Otherwise, discard it.\n          if (!currentConfig.isPaused()) {\n            // Get a new error, don't use deep comparison for errors.\n            finalState.error = err;\n            // Error event and retry logic. Only for the actual request, not\n            // deduped ones.\n            if (shouldStartNewRequest && callbackSafeguard()) {\n              currentConfig.onError(err, key, currentConfig);\n              if (shouldRetryOnError === true || index_js.isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {\n                if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                  // If it's inactive, stop. It will auto-revalidate when\n                  // refocusing or reconnecting.\n                  // When retrying, deduplication is always enabled.\n                  currentConfig.onErrorRetry(err, key, currentConfig, _opts => {\n                    var revalidators = EVENT_REVALIDATORS[key];\n                    if (revalidators && revalidators[0]) {\n                      revalidators[0](index_js.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                    }\n                  }, {\n                    retryCount: (opts.retryCount || 0) + 1,\n                    dedupe: true\n                  });\n                }\n              }\n            }\n          }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key, cache]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    var boundMutate = React.useCallback(\n    // Use callback to make sure `keyRef.current` returns latest result every time\n    function () {\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return index_js.internalMutate(cache, keyRef.current, ...args);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    index_js.useIsomorphicLayoutEffect(() => {\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      // Handle laggy data updates. If there's cached data of the current key,\n      // it'll be the correct reference.\n      if (!index_js.isUndefined(cachedData)) {\n        laggyDataRef.current = cachedData;\n      }\n    });\n    // After mounted or key changed.\n    index_js.useIsomorphicLayoutEffect(() => {\n      if (!key) return;\n      var softRevalidate = revalidate.bind(index_js.UNDEFINED, WITH_DEDUPE);\n      // Expose revalidators to global event listeners. So we can trigger\n      // revalidation from the outside.\n      var nextFocusRevalidatedAt = 0;\n      var onRevalidate = function (type) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (type == index_js.revalidateEvents.FOCUS_EVENT) {\n          var now = Date.now();\n          if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n            nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n            softRevalidate();\n          }\n        } else if (type == index_js.revalidateEvents.RECONNECT_EVENT) {\n          if (getConfig().revalidateOnReconnect && isActive()) {\n            softRevalidate();\n          }\n        } else if (type == index_js.revalidateEvents.MUTATE_EVENT) {\n          return revalidate();\n        } else if (type == index_js.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n          return revalidate(opts);\n        }\n        return;\n      };\n      var unsubEvents = index_js.subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n      // Mark the component as mounted and update corresponding refs.\n      unmountedRef.current = false;\n      keyRef.current = key;\n      initialMountedRef.current = true;\n      // Keep the original key in the cache.\n      setCache({\n        _k: fnArg\n      });\n      // Trigger a revalidation\n      if (shouldDoInitialRevalidation) {\n        if (index_js.isUndefined(data) || index_js.IS_SERVER) {\n          // Revalidate immediately.\n          softRevalidate();\n        } else {\n          // Delay the revalidate if we have data to return so we won't block\n          // rendering.\n          index_js.rAF(softRevalidate);\n        }\n      }\n      return () => {\n        // Mark it as unmounted.\n        unmountedRef.current = true;\n        unsubEvents();\n      };\n    }, [key]);\n    // Polling\n    index_js.useIsomorphicLayoutEffect(() => {\n      var timer;\n      function next() {\n        // Use the passed interval\n        // ...or invoke the function with the updated data to get the interval\n        var interval = index_js.isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n        // We only start the next interval if `refreshInterval` is not 0, and:\n        // - `force` is true, which is the start of polling\n        // - or `timer` is not 0, which means the effect wasn't canceled\n        if (interval && timer !== -1) {\n          timer = setTimeout(execute, interval);\n        }\n      }\n      function execute() {\n        // Check if it's OK to execute:\n        // Only revalidate when the page is visible, online, and not errored.\n        if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n          revalidate(WITH_DEDUPE).then(next);\n        } else {\n          // Schedule the next interval to check again.\n          next();\n        }\n      }\n      next();\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n          timer = -1;\n        }\n      };\n    }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n    // Display debug info in React DevTools.\n    React.useDebugValue(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && index_js.isUndefined(data) && key) {\n      // SWR should throw when trying to use Suspense on the server with React 18,\n      // without providing any fallback data. This causes hydration errors. See:\n      // https://github.com/vercel/swr/issues/1832\n      if (!index_js.IS_REACT_LEGACY && index_js.IS_SERVER) {\n        throw new Error('Fallback data is required when using Suspense in SSR.');\n      }\n      // Always update fetcher and config refs even with the Suspense mode.\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      unmountedRef.current = false;\n      var req = PRELOAD[key];\n      if (!index_js.isUndefined(req)) {\n        var promise = boundMutate(req);\n        use(promise);\n      }\n      if (index_js.isUndefined(error)) {\n        var _promise = revalidate(WITH_DEDUPE);\n        if (!index_js.isUndefined(returnedData)) {\n          _promise.status = 'fulfilled';\n          _promise.value = true;\n        }\n        use(_promise);\n      } else {\n        throw error;\n      }\n    }\n    return {\n      mutate: boundMutate,\n      get data() {\n        stateDependencies.data = true;\n        return returnedData;\n      },\n      get error() {\n        stateDependencies.error = true;\n        return error;\n      },\n      get isValidating() {\n        stateDependencies.isValidating = true;\n        return isValidating;\n      },\n      get isLoading() {\n        stateDependencies.isLoading = true;\n        return isLoading;\n      }\n    };\n  };\n  var SWRConfig = index_js.OBJECT.defineProperty(index_js.SWRConfig, 'defaultValue', {\n    value: index_js.defaultConfig\n  });\n  /**\n   * A hook to fetch data.\n   *\n   * @link https://swr.vercel.app\n   * @example\n   * ```jsx\n   * import useSWR from 'swr'\n   * function Profile() {\n   *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n   *   if (error) return <div>failed to load</div>\n   *   if (isLoading) return <div>loading...</div>\n   *   return <div>hello {data.name}!</div>\n   * }\n   * ```\n   */\n  var useSWR = index_js.withArgs(useSWRHandler);\n\n  // useSWR\n\n  Object.defineProperty(exports, \"mutate\", {\n    enumerable: true,\n    get: function () {\n      return index_js.mutate;\n    }\n  });\n  Object.defineProperty(exports, \"preload\", {\n    enumerable: true,\n    get: function () {\n      return index_js.preload;\n    }\n  });\n  Object.defineProperty(exports, \"useSWRConfig\", {\n    enumerable: true,\n    get: function () {\n      return index_js.useSWRConfig;\n    }\n  });\n  exports.SWRConfig = SWRConfig;\n  exports.default = useSWR;\n  exports.unstable_serialize = unstable_serialize;\n});","lineCount":688,"map":[[4,2,1,0,"Object"],[4,8,1,6],[4,9,1,7,"defineProperty"],[4,23,1,21],[4,24,1,22,"exports"],[4,31,1,29],[4,33,1,31],[4,45,1,43],[4,47,1,45],[5,4,1,47,"value"],[5,9,1,52],[5,11,1,54],[6,2,1,59],[6,3,1,60],[6,4,1,61],[7,2,3,0],[7,6,3,4,"React"],[7,11,3,9],[7,14,3,12,"require"],[7,21,3,19],[7,22,3,19,"_dependencyMap"],[7,36,3,19],[7,48,3,27],[7,49,3,28],[8,2,4,0],[8,6,4,4,"index_js$1"],[8,16,4,14],[8,19,4,17,"require"],[8,26,4,24],[8,27,4,24,"_dependencyMap"],[8,41,4,24],[8,85,4,64],[8,86,4,65],[9,2,5,0],[9,6,5,4,"index_js"],[9,14,5,12],[9,17,5,15,"require"],[9,24,5,22],[9,25,5,22,"_dependencyMap"],[9,39,5,22],[9,67,5,46],[9,68,5,47],[10,2,7,0],[10,11,7,9,"_interopDefault"],[10,26,7,24,"_interopDefault"],[10,27,7,26,"e"],[10,28,7,27],[10,30,7,29],[11,4,7,31],[11,11,7,38,"e"],[11,12,7,39],[11,16,7,43,"e"],[11,17,7,44],[11,18,7,45,"__esModule"],[11,28,7,55],[11,31,7,58,"e"],[11,32,7,59],[11,35,7,62],[12,6,7,64,"default"],[12,13,7,71],[12,15,7,73,"e"],[13,4,7,75],[13,5,7,76],[14,2,7,78],[15,2,9,0],[15,6,9,4,"React__default"],[15,20,9,18],[15,23,9,21],[15,36,9,34,"_interopDefault"],[15,51,9,49],[15,52,9,50,"React"],[15,57,9,55],[15,58,9,56],[17,2,11,0],[18,2,12,0],[18,6,12,6,"noop"],[18,10,12,10],[18,13,12,13,"noop"],[18,14,12,13],[18,19,12,17],[18,20,12,18],[18,21,12,19],[19,2,13,0],[20,2,14,0],[21,2,15,0],[22,2,16,0],[23,2,17,0],[23,6,17,6,"UNDEFINED"],[23,15,17,15],[23,18,17,18],[23,35,17,36,"noop"],[23,39,17,40],[23,40,17,41],[23,41,17,42],[24,2,18,0],[24,6,18,6,"OBJECT"],[24,12,18,12],[24,15,18,15,"Object"],[24,21,18,21],[25,2,19,0],[25,6,19,6,"isUndefined"],[25,17,19,17],[25,20,19,21,"v"],[25,21,19,22],[25,25,19,25,"v"],[25,26,19,26],[25,31,19,31,"UNDEFINED"],[25,40,19,40],[26,2,20,0],[26,6,20,6,"isFunction"],[26,16,20,16],[26,19,20,20,"v"],[26,20,20,21],[26,24,20,24],[26,31,20,31,"v"],[26,32,20,32],[26,36,20,36],[26,46,20,46],[28,2,22,0],[29,2,23,0],[30,2,24,0],[31,2,25,0],[32,2,26,0],[32,6,26,6,"table"],[32,11,26,11],[32,14,26,14],[32,18,26,18,"WeakMap"],[32,25,26,25],[32,26,26,26],[32,27,26,27],[33,2,27,0],[33,6,27,6,"isObjectType"],[33,18,27,18],[33,21,27,21,"isObjectType"],[33,22,27,22,"value"],[33,27,27,27],[33,29,27,29,"type"],[33,33,27,33],[33,38,27,36,"OBJECT"],[33,44,27,42],[33,45,27,43,"prototype"],[33,54,27,52],[33,55,27,53,"toString"],[33,63,27,61],[33,64,27,62,"call"],[33,68,27,66],[33,69,27,67,"value"],[33,74,27,72],[33,75,27,73],[33,80,27,78],[33,91,27,89,"type"],[33,95,27,93],[33,98,27,96],[34,2,28,0],[35,2,29,0],[35,6,29,4,"counter"],[35,13,29,11],[35,16,29,14],[35,17,29,15],[36,2,30,0],[37,2,31,0],[38,2,32,0],[39,2,33,0],[40,2,34,0],[41,2,35,0],[42,2,36,0],[43,2,37,0],[44,2,38,0],[44,6,38,6,"stableHash"],[44,16,38,16],[44,19,38,20,"arg"],[44,22,38,23],[44,26,38,26],[45,4,39,4],[45,8,39,10,"type"],[45,12,39,14],[45,15,39,17],[45,22,39,24,"arg"],[45,25,39,27],[46,4,40,4],[46,8,40,10,"isDate"],[46,14,40,16],[46,17,40,19,"isObjectType"],[46,29,40,31],[46,30,40,32,"arg"],[46,33,40,35],[46,35,40,37],[46,41,40,43],[46,42,40,44],[47,4,41,4],[47,8,41,10,"isRegex"],[47,15,41,17],[47,18,41,20,"isObjectType"],[47,30,41,32],[47,31,41,33,"arg"],[47,34,41,36],[47,36,41,38],[47,44,41,46],[47,45,41,47],[48,4,42,4],[48,8,42,10,"isPlainObject"],[48,21,42,23],[48,24,42,26,"isObjectType"],[48,36,42,38],[48,37,42,39,"arg"],[48,40,42,42],[48,42,42,44],[48,50,42,52],[48,51,42,53],[49,4,43,4],[49,8,43,8,"result"],[49,14,43,14],[50,4,44,4],[50,8,44,8,"index"],[50,13,44,13],[51,4,45,4],[51,8,45,8,"OBJECT"],[51,14,45,14],[51,15,45,15,"arg"],[51,18,45,18],[51,19,45,19],[51,24,45,24,"arg"],[51,27,45,27],[51,31,45,31],[51,32,45,32,"isDate"],[51,38,45,38],[51,42,45,42],[51,43,45,43,"isRegex"],[51,50,45,50],[51,52,45,52],[52,6,46,8],[53,6,47,8],[54,6,48,8,"result"],[54,12,48,14],[54,15,48,17,"table"],[54,20,48,22],[54,21,48,23,"get"],[54,24,48,26],[54,25,48,27,"arg"],[54,28,48,30],[54,29,48,31],[55,6,49,8],[55,10,49,12,"result"],[55,16,49,18],[55,18,49,20],[55,25,49,27,"result"],[55,31,49,33],[56,6,50,8],[57,6,51,8],[58,6,52,8],[59,6,53,8,"result"],[59,12,53,14],[59,15,53,17],[59,17,53,19,"counter"],[59,24,53,26],[59,27,53,29],[59,30,53,32],[60,6,54,8,"table"],[60,11,54,13],[60,12,54,14,"set"],[60,15,54,17],[60,16,54,18,"arg"],[60,19,54,21],[60,21,54,23,"result"],[60,27,54,29],[60,28,54,30],[61,6,55,8],[61,10,55,12,"Array"],[61,15,55,17],[61,16,55,18,"isArray"],[61,23,55,25],[61,24,55,26,"arg"],[61,27,55,29],[61,28,55,30],[61,30,55,32],[62,8,56,12],[63,8,57,12,"result"],[63,14,57,18],[63,17,57,21],[63,20,57,24],[64,8,58,12],[64,13,58,16,"index"],[64,18,58,21],[64,21,58,24],[64,22,58,25],[64,24,58,27,"index"],[64,29,58,32],[64,32,58,35,"arg"],[64,35,58,38],[64,36,58,39,"length"],[64,42,58,45],[64,44,58,47,"index"],[64,49,58,52],[64,51,58,54],[64,53,58,55],[65,10,59,16,"result"],[65,16,59,22],[65,20,59,26,"stableHash"],[65,30,59,36],[65,31,59,37,"arg"],[65,34,59,40],[65,35,59,41,"index"],[65,40,59,46],[65,41,59,47],[65,42,59,48],[65,45,59,51],[65,48,59,54],[66,8,60,12],[67,8,61,12,"table"],[67,13,61,17],[67,14,61,18,"set"],[67,17,61,21],[67,18,61,22,"arg"],[67,21,61,25],[67,23,61,27,"result"],[67,29,61,33],[67,30,61,34],[68,6,62,8],[69,6,63,8],[69,10,63,12,"isPlainObject"],[69,23,63,25],[69,25,63,27],[70,8,64,12],[71,8,65,12,"result"],[71,14,65,18],[71,17,65,21],[71,20,65,24],[72,8,66,12],[72,12,66,18,"keys"],[72,16,66,22],[72,19,66,25,"OBJECT"],[72,25,66,31],[72,26,66,32,"keys"],[72,30,66,36],[72,31,66,37,"arg"],[72,34,66,40],[72,35,66,41],[72,36,66,42,"sort"],[72,40,66,46],[72,41,66,47],[72,42,66,48],[73,8,67,12],[73,15,67,18],[73,16,67,19,"isUndefined"],[73,27,67,30],[73,28,67,31,"index"],[73,33,67,36],[73,36,67,39,"keys"],[73,40,67,43],[73,41,67,44,"pop"],[73,44,67,47],[73,45,67,48],[73,46,67,49],[73,47,67,50],[73,49,67,51],[74,10,68,16],[74,14,68,20],[74,15,68,21,"isUndefined"],[74,26,68,32],[74,27,68,33,"arg"],[74,30,68,36],[74,31,68,37,"index"],[74,36,68,42],[74,37,68,43],[74,38,68,44],[74,40,68,46],[75,12,69,20,"result"],[75,18,69,26],[75,22,69,30,"index"],[75,27,69,35],[75,30,69,38],[75,33,69,41],[75,36,69,44,"stableHash"],[75,46,69,54],[75,47,69,55,"arg"],[75,50,69,58],[75,51,69,59,"index"],[75,56,69,64],[75,57,69,65],[75,58,69,66],[75,61,69,69],[75,64,69,72],[76,10,70,16],[77,8,71,12],[78,8,72,12,"table"],[78,13,72,17],[78,14,72,18,"set"],[78,17,72,21],[78,18,72,22,"arg"],[78,21,72,25],[78,23,72,27,"result"],[78,29,72,33],[78,30,72,34],[79,6,73,8],[80,4,74,4],[80,5,74,5],[80,11,74,11],[81,6,75,8,"result"],[81,12,75,14],[81,15,75,17,"isDate"],[81,21,75,23],[81,24,75,26,"arg"],[81,27,75,29],[81,28,75,30,"toJSON"],[81,34,75,36],[81,35,75,37],[81,36,75,38],[81,39,75,41,"type"],[81,43,75,45],[81,47,75,49],[81,55,75,57],[81,58,75,60,"arg"],[81,61,75,63],[81,62,75,64,"toString"],[81,70,75,72],[81,71,75,73],[81,72,75,74],[81,75,75,77,"type"],[81,79,75,81],[81,83,75,85],[81,91,75,93],[81,94,75,96,"JSON"],[81,98,75,100],[81,99,75,101,"stringify"],[81,108,75,110],[81,109,75,111,"arg"],[81,112,75,114],[81,113,75,115],[81,116,75,118],[81,118,75,120],[81,121,75,123,"arg"],[81,124,75,126],[82,4,76,4],[83,4,77,4],[83,11,77,11,"result"],[83,17,77,17],[84,2,78,0],[84,3,78,1],[85,2,80,0],[85,6,80,6,"serialize"],[85,15,80,15],[85,18,80,19,"key"],[85,21,80,22],[85,25,80,25],[86,4,81,4],[86,8,81,8,"isFunction"],[86,18,81,18],[86,19,81,19,"key"],[86,22,81,22],[86,23,81,23],[86,25,81,25],[87,6,82,8],[87,10,82,12],[88,8,83,12,"key"],[88,11,83,15],[88,14,83,18,"key"],[88,17,83,21],[88,18,83,22],[88,19,83,23],[89,6,84,8],[89,7,84,9],[89,8,84,10],[89,15,84,17,"err"],[89,18,84,20],[89,20,84,22],[90,8,85,12],[91,8,86,12,"key"],[91,11,86,15],[91,14,86,18],[91,16,86,20],[92,6,87,8],[93,4,88,4],[94,4,89,4],[95,4,90,4],[96,4,91,4],[96,8,91,10,"args"],[96,12,91,14],[96,15,91,17,"key"],[96,18,91,20],[97,4,92,4],[98,4,93,4,"key"],[98,7,93,7],[98,10,93,10],[98,17,93,17,"key"],[98,20,93,20],[98,24,93,24],[98,32,93,32],[98,35,93,35,"key"],[98,38,93,38],[98,41,93,41],[98,42,93,42,"Array"],[98,47,93,47],[98,48,93,48,"isArray"],[98,55,93,55],[98,56,93,56,"key"],[98,59,93,59],[98,60,93,60],[98,63,93,63,"key"],[98,66,93,66],[98,67,93,67,"length"],[98,73,93,73],[98,76,93,76,"key"],[98,79,93,79],[98,83,93,83,"stableHash"],[98,93,93,93],[98,94,93,94,"key"],[98,97,93,97],[98,98,93,98],[98,101,93,101],[98,103,93,103],[99,4,94,4],[99,11,94,11],[99,12,95,8,"key"],[99,15,95,11],[99,17,96,8,"args"],[99,21,96,12],[99,22,97,5],[100,2,98,0],[100,3,98,1],[101,2,100,0],[101,6,100,6,"unstable_serialize"],[101,24,100,24],[101,27,100,28,"key"],[101,30,100,31],[101,34,100,34,"serialize"],[101,43,100,43],[101,44,100,44,"key"],[101,47,100,47],[101,48,100,48],[101,49,100,49],[101,50,100,50],[101,51,100,51],[103,2,102,0],[104,2,103,0],[104,6,103,6,"use"],[104,9,103,9],[104,12,103,12,"React__default"],[104,26,103,26],[104,27,103,27,"default"],[104,34,103,34],[104,35,103,35,"use"],[104,38,103,38],[105,2,103,42],[106,2,104,0],[107,2,105,0],[108,2,106,0],[109,2,107,2,"thenable"],[109,10,107,10],[109,14,107,13],[110,4,108,4],[110,12,108,11,"thenable"],[110,20,108,19],[110,21,108,20,"status"],[110,27,108,26],[111,6,109,8],[111,11,109,13],[111,20,109,22],[112,8,110,12],[112,14,110,18,"thenable"],[112,22,110,26],[113,6,111,8],[113,11,111,13],[113,22,111,24],[114,8,112,12],[114,15,112,19,"thenable"],[114,23,112,27],[114,24,112,28,"value"],[114,29,112,33],[115,6,113,8],[115,11,113,13],[115,21,113,23],[116,8,114,12],[116,14,114,18,"thenable"],[116,22,114,26],[116,23,114,27,"reason"],[116,29,114,33],[117,6,115,8],[118,8,116,12,"thenable"],[118,16,116,20],[118,17,116,21,"status"],[118,23,116,27],[118,26,116,30],[118,35,116,39],[119,8,117,12,"thenable"],[119,16,117,20],[119,17,117,21,"then"],[119,21,117,25],[119,22,117,27,"v"],[119,23,117,28],[119,27,117,31],[120,10,118,16,"thenable"],[120,18,118,24],[120,19,118,25,"status"],[120,25,118,31],[120,28,118,34],[120,39,118,45],[121,10,119,16,"thenable"],[121,18,119,24],[121,19,119,25,"value"],[121,24,119,30],[121,27,119,33,"v"],[121,28,119,34],[122,8,120,12],[122,9,120,13],[122,11,120,16,"e"],[122,12,120,17],[122,16,120,20],[123,10,121,16,"thenable"],[123,18,121,24],[123,19,121,25,"status"],[123,25,121,31],[123,28,121,34],[123,38,121,44],[124,10,122,16,"thenable"],[124,18,122,24],[124,19,122,25,"reason"],[124,25,122,31],[124,28,122,34,"e"],[124,29,122,35],[125,8,123,12],[125,9,123,13],[125,10,123,14],[126,8,124,12],[126,14,124,18,"thenable"],[126,22,124,26],[127,4,125,4],[128,2,126,0],[128,3,126,1],[128,4,126,2],[129,2,127,0],[129,6,127,6,"WITH_DEDUPE"],[129,17,127,17],[129,20,127,20],[130,4,128,4,"dedupe"],[130,10,128,10],[130,12,128,12],[131,2,129,0],[131,3,129,1],[132,2,130,0],[132,6,130,6,"useSWRHandler"],[132,19,130,19],[132,22,130,22,"useSWRHandler"],[132,23,130,23,"_key"],[132,27,130,27],[132,29,130,29,"fetcher"],[132,36,130,36],[132,38,130,38,"config"],[132,44,130,44],[132,49,130,47],[133,4,131,4],[133,8,131,12,"cache"],[133,13,131,17],[133,16,131,167,"config"],[133,22,131,173],[133,23,131,12,"cache"],[133,28,131,17],[134,6,131,19,"compare"],[134,13,131,26],[134,16,131,167,"config"],[134,22,131,173],[134,23,131,19,"compare"],[134,30,131,26],[135,6,131,28,"suspense"],[135,14,131,36],[135,17,131,167,"config"],[135,23,131,173],[135,24,131,28,"suspense"],[135,32,131,36],[136,6,131,38,"fallbackData"],[136,18,131,50],[136,21,131,167,"config"],[136,27,131,173],[136,28,131,38,"fallbackData"],[136,40,131,50],[137,6,131,52,"revalidateOnMount"],[137,23,131,69],[137,26,131,167,"config"],[137,32,131,173],[137,33,131,52,"revalidateOnMount"],[137,50,131,69],[138,6,131,71,"revalidateIfStale"],[138,23,131,88],[138,26,131,167,"config"],[138,32,131,173],[138,33,131,71,"revalidateIfStale"],[138,50,131,88],[139,6,131,90,"refreshInterval"],[139,21,131,105],[139,24,131,167,"config"],[139,30,131,173],[139,31,131,90,"refreshInterval"],[139,46,131,105],[140,6,131,107,"refreshWhenHidden"],[140,23,131,124],[140,26,131,167,"config"],[140,32,131,173],[140,33,131,107,"refreshWhenHidden"],[140,50,131,124],[141,6,131,126,"refreshWhenOffline"],[141,24,131,144],[141,27,131,167,"config"],[141,33,131,173],[141,34,131,126,"refreshWhenOffline"],[141,52,131,144],[142,6,131,146,"keepPreviousData"],[142,22,131,162],[142,25,131,167,"config"],[142,31,131,173],[142,32,131,146,"keepPreviousData"],[142,48,131,162],[143,4,132,4],[143,8,132,4,"_index_js$SWRGlobalSt"],[143,29,132,4],[143,32,132,59,"index_js"],[143,40,132,67],[143,41,132,68,"SWRGlobalState"],[143,55,132,82],[143,56,132,83,"get"],[143,59,132,86],[143,60,132,87,"cache"],[143,65,132,92],[143,66,132,93],[144,6,132,93,"_index_js$SWRGlobalSt2"],[144,28,132,93],[144,31,132,93,"_slicedToArray"],[144,45,132,93],[144,46,132,93,"_index_js$SWRGlobalSt"],[144,67,132,93],[145,6,132,11,"EVENT_REVALIDATORS"],[145,24,132,29],[145,27,132,29,"_index_js$SWRGlobalSt2"],[145,49,132,29],[146,6,132,31,"MUTATION"],[146,14,132,39],[146,17,132,39,"_index_js$SWRGlobalSt2"],[146,39,132,39],[147,6,132,41,"FETCH"],[147,11,132,46],[147,14,132,46,"_index_js$SWRGlobalSt2"],[147,36,132,46],[148,6,132,48,"PRELOAD"],[148,13,132,55],[148,16,132,55,"_index_js$SWRGlobalSt2"],[148,38,132,55],[149,4,133,4],[150,4,134,4],[151,4,135,4],[152,4,136,4],[153,4,137,4],[153,8,137,4,"_index_js$serialize"],[153,27,137,4],[153,30,137,25,"index_js"],[153,38,137,33],[153,39,137,34,"serialize"],[153,48,137,43],[153,49,137,44,"_key"],[153,53,137,48],[153,54,137,49],[154,6,137,49,"_index_js$serialize2"],[154,26,137,49],[154,29,137,49,"_slicedToArray"],[154,43,137,49],[154,44,137,49,"_index_js$serialize"],[154,63,137,49],[155,6,137,11,"key"],[155,9,137,14],[155,12,137,14,"_index_js$serialize2"],[155,32,137,14],[156,6,137,16,"fnArg"],[156,11,137,21],[156,14,137,21,"_index_js$serialize2"],[156,34,137,21],[157,4,138,4],[158,4,139,4],[158,8,139,10,"initialMountedRef"],[158,25,139,27],[158,28,139,30,"React"],[158,33,139,35],[158,34,139,36,"useRef"],[158,40,139,42],[158,41,139,43],[158,46,139,48],[158,47,139,49],[159,4,140,4],[160,4,141,4],[161,4,142,4],[161,8,142,10,"unmountedRef"],[161,20,142,22],[161,23,142,25,"React"],[161,28,142,30],[161,29,142,31,"useRef"],[161,35,142,37],[161,36,142,38],[161,41,142,43],[161,42,142,44],[162,4,143,4],[163,4,144,4],[163,8,144,10,"keyRef"],[163,14,144,16],[163,17,144,19,"React"],[163,22,144,24],[163,23,144,25,"useRef"],[163,29,144,31],[163,30,144,32,"key"],[163,33,144,35],[163,34,144,36],[164,4,145,4],[164,8,145,10,"fetcherRef"],[164,18,145,20],[164,21,145,23,"React"],[164,26,145,28],[164,27,145,29,"useRef"],[164,33,145,35],[164,34,145,36,"fetcher"],[164,41,145,43],[164,42,145,44],[165,4,146,4],[165,8,146,10,"configRef"],[165,17,146,19],[165,20,146,22,"React"],[165,25,146,27],[165,26,146,28,"useRef"],[165,32,146,34],[165,33,146,35,"config"],[165,39,146,41],[165,40,146,42],[166,4,147,4],[166,8,147,10,"getConfig"],[166,17,147,19],[166,20,147,22,"getConfig"],[166,21,147,22],[166,26,147,26,"configRef"],[166,35,147,35],[166,36,147,36,"current"],[166,43,147,43],[167,4,148,4],[167,8,148,10,"isActive"],[167,16,148,18],[167,19,148,21,"isActive"],[167,20,148,21],[167,25,148,25,"getConfig"],[167,34,148,34],[167,35,148,35],[167,36,148,36],[167,37,148,37,"isVisible"],[167,46,148,46],[167,47,148,47],[167,48,148,48],[167,52,148,52,"getConfig"],[167,61,148,61],[167,62,148,62],[167,63,148,63],[167,64,148,64,"isOnline"],[167,72,148,72],[167,73,148,73],[167,74,148,74],[168,4,149,4],[168,8,149,4,"_index_js$createCache"],[168,29,149,4],[168,32,149,66,"index_js"],[168,40,149,74],[168,41,149,75,"createCacheHelper"],[168,58,149,92],[168,59,149,93,"cache"],[168,64,149,98],[168,66,149,100,"key"],[168,69,149,103],[168,70,149,104],[169,6,149,104,"_index_js$createCache2"],[169,28,149,104],[169,31,149,104,"_slicedToArray"],[169,45,149,104],[169,46,149,104,"_index_js$createCache"],[169,67,149,104],[170,6,149,11,"getCache"],[170,14,149,19],[170,17,149,19,"_index_js$createCache2"],[170,39,149,19],[171,6,149,21,"setCache"],[171,14,149,29],[171,17,149,29,"_index_js$createCache2"],[171,39,149,29],[172,6,149,31,"subscribeCache"],[172,20,149,45],[172,23,149,45,"_index_js$createCache2"],[172,45,149,45],[173,6,149,47,"getInitialCache"],[173,21,149,62],[173,24,149,62,"_index_js$createCache2"],[173,46,149,62],[174,4,150,4],[174,8,150,10,"stateDependencies"],[174,25,150,27],[174,28,150,30,"React"],[174,33,150,35],[174,34,150,36,"useRef"],[174,40,150,42],[174,41,150,43],[174,42,150,44],[174,43,150,45],[174,44,150,46],[174,45,150,47,"current"],[174,52,150,54],[175,4,151,4],[176,4,152,4],[177,4,153,4],[177,8,153,10,"fallback"],[177,16,153,18],[177,19,153,21,"index_js"],[177,27,153,29],[177,28,153,30,"isUndefined"],[177,39,153,41],[177,40,153,42,"fallbackData"],[177,52,153,54],[177,53,153,55],[177,56,153,58,"index_js"],[177,64,153,66],[177,65,153,67,"isUndefined"],[177,76,153,78],[177,77,153,79,"config"],[177,83,153,85],[177,84,153,86,"fallback"],[177,92,153,94],[177,93,153,95],[177,96,153,98,"index_js"],[177,104,153,106],[177,105,153,107,"UNDEFINED"],[177,114,153,116],[177,117,153,119,"config"],[177,123,153,125],[177,124,153,126,"fallback"],[177,132,153,134],[177,133,153,135,"key"],[177,136,153,138],[177,137,153,139],[177,140,153,142,"fallbackData"],[177,152,153,154],[178,4,154,4],[178,8,154,10,"isEqual"],[178,15,154,17],[178,18,154,20,"isEqual"],[178,19,154,21,"prev"],[178,23,154,25],[178,25,154,27,"current"],[178,32,154,34],[178,37,154,37],[179,6,155,8],[179,11,155,12],[179,15,155,18,"_"],[179,16,155,19],[179,20,155,23,"stateDependencies"],[179,37,155,40],[179,39,155,41],[180,8,156,12],[180,12,156,18,"t"],[180,13,156,19],[180,16,156,22,"_"],[180,17,156,23],[181,8,157,12],[181,12,157,16,"t"],[181,13,157,17],[181,18,157,22],[181,24,157,28],[181,26,157,30],[182,10,158,16],[182,14,158,20],[182,15,158,21,"compare"],[182,22,158,28],[182,23,158,29,"prev"],[182,27,158,33],[182,28,158,34,"t"],[182,29,158,35],[182,30,158,36],[182,32,158,38,"current"],[182,39,158,45],[182,40,158,46,"t"],[182,41,158,47],[182,42,158,48],[182,43,158,49],[182,45,158,51],[183,12,159,20],[183,16,159,24],[183,17,159,25,"index_js"],[183,25,159,33],[183,26,159,34,"isUndefined"],[183,37,159,45],[183,38,159,46,"prev"],[183,42,159,50],[183,43,159,51,"t"],[183,44,159,52],[183,45,159,53],[183,46,159,54],[183,48,159,56],[184,14,160,24],[184,21,160,31],[184,26,160,36],[185,12,161,20],[186,12,162,20],[186,16,162,24],[186,17,162,25,"compare"],[186,24,162,32],[186,25,162,33,"returnedData"],[186,37,162,45],[186,39,162,47,"current"],[186,46,162,54],[186,47,162,55,"t"],[186,48,162,56],[186,49,162,57],[186,50,162,58],[186,52,162,60],[187,14,163,24],[187,21,163,31],[187,26,163,36],[188,12,164,20],[189,10,165,16],[190,8,166,12],[190,9,166,13],[190,15,166,19],[191,10,167,16],[191,14,167,20,"current"],[191,21,167,27],[191,22,167,28,"t"],[191,23,167,29],[191,24,167,30],[191,29,167,35,"prev"],[191,33,167,39],[191,34,167,40,"t"],[191,35,167,41],[191,36,167,42],[191,38,167,44],[192,12,168,20],[192,19,168,27],[192,24,168,32],[193,10,169,16],[194,8,170,12],[195,6,171,8],[196,6,172,8],[196,13,172,15],[196,17,172,19],[197,4,173,4],[197,5,173,5],[198,4,174,4],[198,8,174,10,"getSnapshot"],[198,19,174,21],[198,22,174,24,"React"],[198,27,174,29],[198,28,174,30,"useMemo"],[198,35,174,37],[198,36,174,38],[198,42,174,42],[199,6,175,8],[199,10,175,14,"shouldStartRequest"],[199,28,175,32],[199,31,175,35],[199,32,175,36],[199,38,175,40],[200,8,176,12],[200,12,176,16],[200,13,176,17,"key"],[200,16,176,20],[200,18,176,22],[200,25,176,29],[200,30,176,34],[201,8,177,12],[201,12,177,16],[201,13,177,17,"fetcher"],[201,20,177,24],[201,22,177,26],[201,29,177,33],[201,34,177,38],[202,8,178,12],[203,8,179,12],[203,12,179,16],[203,13,179,17,"index_js"],[203,21,179,25],[203,22,179,26,"isUndefined"],[203,33,179,37],[203,34,179,38,"revalidateOnMount"],[203,51,179,55],[203,52,179,56],[203,54,179,58],[203,61,179,65,"revalidateOnMount"],[203,78,179,82],[204,8,180,12],[205,8,181,12],[205,12,181,16,"getConfig"],[205,21,181,25],[205,22,181,26],[205,23,181,27],[205,24,181,28,"isPaused"],[205,32,181,36],[205,33,181,37],[205,34,181,38],[205,36,181,40],[205,43,181,47],[205,48,181,52],[206,8,182,12],[206,12,182,16,"suspense"],[206,20,182,24],[206,22,182,26],[206,29,182,33],[206,34,182,38],[207,8,183,12],[207,15,183,19,"revalidateIfStale"],[207,32,183,36],[207,37,183,41],[207,42,183,46],[208,6,184,8],[208,7,184,9],[208,9,184,11],[208,10,184,12],[209,6,185,8],[210,6,186,8],[210,10,186,14,"getSelectedCache"],[210,26,186,30],[210,29,186,34,"state"],[210,34,186,39],[210,38,186,42],[211,8,187,12],[212,8,188,12],[212,12,188,18,"snapshot"],[212,20,188,26],[212,23,188,29,"index_js"],[212,31,188,37],[212,32,188,38,"mergeObjects"],[212,44,188,50],[212,45,188,51,"state"],[212,50,188,56],[212,51,188,57],[213,8,189,12],[213,15,189,19,"snapshot"],[213,23,189,27],[213,24,189,28,"_k"],[213,26,189,30],[214,8,190,12],[214,12,190,16],[214,13,190,17,"shouldStartRequest"],[214,31,190,35],[214,33,190,37],[215,10,191,16],[215,17,191,23,"snapshot"],[215,25,191,31],[216,8,192,12],[217,8,193,12],[217,15,193,19],[218,10,194,16,"isValidating"],[218,22,194,28],[218,24,194,30],[218,28,194,34],[219,10,195,16,"isLoading"],[219,19,195,25],[219,21,195,27],[219,25,195,31],[220,10,196,16],[220,13,196,19,"snapshot"],[221,8,197,12],[221,9,197,13],[222,6,198,8],[222,7,198,9],[223,6,199,8],[223,10,199,14,"cachedData"],[223,20,199,24],[223,23,199,27,"getCache"],[223,31,199,35],[223,32,199,36],[223,33,199,37],[224,6,200,8],[224,10,200,14,"initialData"],[224,21,200,25],[224,24,200,28,"getInitialCache"],[224,39,200,43],[224,40,200,44],[224,41,200,45],[225,6,201,8],[225,10,201,14,"clientSnapshot"],[225,24,201,28],[225,27,201,31,"getSelectedCache"],[225,43,201,47],[225,44,201,48,"cachedData"],[225,54,201,58],[225,55,201,59],[226,6,202,8],[226,10,202,14,"serverSnapshot"],[226,24,202,28],[226,27,202,31,"cachedData"],[226,37,202,41],[226,42,202,46,"initialData"],[226,53,202,57],[226,56,202,60,"clientSnapshot"],[226,70,202,74],[226,73,202,77,"getSelectedCache"],[226,89,202,93],[226,90,202,94,"initialData"],[226,101,202,105],[226,102,202,106],[227,6,203,8],[228,6,204,8],[229,6,205,8],[230,6,206,8],[230,10,206,12,"memorizedSnapshot"],[230,27,206,29],[230,30,206,32,"clientSnapshot"],[230,44,206,46],[231,6,207,8],[231,13,207,15],[231,14,208,12],[231,20,208,16],[232,8,209,16],[232,12,209,22,"newSnapshot"],[232,23,209,33],[232,26,209,36,"getSelectedCache"],[232,42,209,52],[232,43,209,53,"getCache"],[232,51,209,61],[232,52,209,62],[232,53,209,63],[232,54,209,64],[233,8,210,16],[233,12,210,22,"compareResult"],[233,25,210,35],[233,28,210,38,"isEqual"],[233,35,210,45],[233,36,210,46,"newSnapshot"],[233,47,210,57],[233,49,210,59,"memorizedSnapshot"],[233,66,210,76],[233,67,210,77],[234,8,211,16],[234,12,211,20,"compareResult"],[234,25,211,33],[234,27,211,35],[235,10,212,20],[236,10,213,20],[237,10,214,20],[238,10,215,20],[239,10,216,20],[240,10,217,20],[241,10,218,20],[242,10,219,20],[243,10,220,20],[244,10,221,20],[245,10,222,20,"memorizedSnapshot"],[245,27,222,37],[245,28,222,38,"data"],[245,32,222,42],[245,35,222,45,"newSnapshot"],[245,46,222,56],[245,47,222,57,"data"],[245,51,222,61],[246,10,223,20,"memorizedSnapshot"],[246,27,223,37],[246,28,223,38,"isLoading"],[246,37,223,47],[246,40,223,50,"newSnapshot"],[246,51,223,61],[246,52,223,62,"isLoading"],[246,61,223,71],[247,10,224,20,"memorizedSnapshot"],[247,27,224,37],[247,28,224,38,"isValidating"],[247,40,224,50],[247,43,224,53,"newSnapshot"],[247,54,224,64],[247,55,224,65,"isValidating"],[247,67,224,77],[248,10,225,20,"memorizedSnapshot"],[248,27,225,37],[248,28,225,38,"error"],[248,33,225,43],[248,36,225,46,"newSnapshot"],[248,47,225,57],[248,48,225,58,"error"],[248,53,225,63],[249,10,226,20],[249,17,226,27,"memorizedSnapshot"],[249,34,226,44],[250,8,227,16],[250,9,227,17],[250,15,227,23],[251,10,228,20,"memorizedSnapshot"],[251,27,228,37],[251,30,228,40,"newSnapshot"],[251,41,228,51],[252,10,229,20],[252,17,229,27,"newSnapshot"],[252,28,229,38],[253,8,230,16],[254,6,231,12],[254,7,231,13],[254,9,232,12],[254,15,232,16,"serverSnapshot"],[254,29,232,30],[254,30,233,9],[255,6,234,4],[256,4,235,4],[256,5,235,5],[256,7,235,7],[256,8,236,8,"cache"],[256,13,236,13],[256,15,237,8,"key"],[256,18,237,11],[256,19,238,5],[256,20,238,6],[257,4,239,4],[258,4,240,4],[258,8,240,10,"cached"],[258,14,240,16],[258,17,240,19,"index_js$1"],[258,27,240,29],[258,28,240,30,"useSyncExternalStore"],[258,48,240,50],[258,49,240,51,"React"],[258,54,240,56],[258,55,240,57,"useCallback"],[258,66,240,68],[258,67,240,70,"callback"],[258,75,240,78],[258,79,240,81,"subscribeCache"],[258,93,240,95],[258,94,240,96,"key"],[258,97,240,99],[258,99,240,101],[258,100,240,102,"current"],[258,107,240,109],[258,109,240,111,"prev"],[258,113,240,115],[258,118,240,118],[259,6,241,12],[259,10,241,16],[259,11,241,17,"isEqual"],[259,18,241,24],[259,19,241,25,"prev"],[259,23,241,29],[259,25,241,31,"current"],[259,32,241,38],[259,33,241,39],[259,35,241,41,"callback"],[259,43,241,49],[259,44,241,50],[259,45,241,51],[260,4,242,8],[260,5,242,9],[260,6,242,10],[261,4,242,12],[262,4,243,4],[262,5,244,8,"cache"],[262,10,244,13],[262,12,245,8,"key"],[262,15,245,11],[262,16,246,5],[262,17,246,6],[262,19,246,8,"getSnapshot"],[262,30,246,19],[262,31,246,20],[262,32,246,21],[262,33,246,22],[262,35,246,24,"getSnapshot"],[262,46,246,35],[262,47,246,36],[262,48,246,37],[262,49,246,38],[262,50,246,39],[263,4,247,4],[263,8,247,10,"isInitialMount"],[263,22,247,24],[263,25,247,27],[263,26,247,28,"initialMountedRef"],[263,43,247,45],[263,44,247,46,"current"],[263,51,247,53],[264,4,248,4],[264,8,248,10,"hasRevalidator"],[264,22,248,24],[264,25,248,27,"EVENT_REVALIDATORS"],[264,43,248,45],[264,44,248,46,"key"],[264,47,248,49],[264,48,248,50],[264,52,248,54,"EVENT_REVALIDATORS"],[264,70,248,72],[264,71,248,73,"key"],[264,74,248,76],[264,75,248,77],[264,76,248,78,"length"],[264,82,248,84],[264,85,248,87],[264,86,248,88],[265,4,249,4],[265,8,249,10,"cachedData"],[265,18,249,20],[265,21,249,23,"cached"],[265,27,249,29],[265,28,249,30,"data"],[265,32,249,34],[266,4,250,4],[266,8,250,10,"data"],[266,12,250,14],[266,15,250,17,"index_js"],[266,23,250,25],[266,24,250,26,"isUndefined"],[266,35,250,37],[266,36,250,38,"cachedData"],[266,46,250,48],[266,47,250,49],[266,50,250,52,"fallback"],[266,58,250,60],[266,62,250,64,"index_js"],[266,70,250,72],[266,71,250,73,"isPromiseLike"],[266,84,250,86],[266,85,250,87,"fallback"],[266,93,250,95],[266,94,250,96],[266,97,250,99,"use"],[266,100,250,102],[266,101,250,103,"fallback"],[266,109,250,111],[266,110,250,112],[266,113,250,115,"fallback"],[266,121,250,123],[266,124,250,126,"cachedData"],[266,134,250,136],[267,4,251,4],[267,8,251,10,"error"],[267,13,251,15],[267,16,251,18,"cached"],[267,22,251,24],[267,23,251,25,"error"],[267,28,251,30],[268,4,252,4],[269,4,253,4],[269,8,253,10,"laggyDataRef"],[269,20,253,22],[269,23,253,25,"React"],[269,28,253,30],[269,29,253,31,"useRef"],[269,35,253,37],[269,36,253,38,"data"],[269,40,253,42],[269,41,253,43],[270,4,254,4],[270,8,254,10,"returnedData"],[270,20,254,22],[270,23,254,25,"keepPreviousData"],[270,39,254,41],[270,42,254,44,"index_js"],[270,50,254,52],[270,51,254,53,"isUndefined"],[270,62,254,64],[270,63,254,65,"cachedData"],[270,73,254,75],[270,74,254,76],[270,77,254,79,"laggyDataRef"],[270,89,254,91],[270,90,254,92,"current"],[270,97,254,99],[270,100,254,102,"cachedData"],[270,110,254,112],[270,113,254,115,"data"],[270,117,254,119],[271,4,255,4],[272,4,256,4],[273,4,257,4],[274,4,258,4],[274,8,258,10,"shouldDoInitialRevalidation"],[274,35,258,37],[274,38,258,40],[274,39,258,41],[274,45,258,45],[275,6,259,8],[276,6,260,8],[276,10,260,12,"hasRevalidator"],[276,24,260,26],[276,28,260,30],[276,29,260,31,"index_js"],[276,37,260,39],[276,38,260,40,"isUndefined"],[276,49,260,51],[276,50,260,52,"error"],[276,55,260,57],[276,56,260,58],[276,58,260,60],[276,65,260,67],[276,70,260,72],[277,6,261,8],[278,6,262,8],[278,10,262,12,"isInitialMount"],[278,24,262,26],[278,28,262,30],[278,29,262,31,"index_js"],[278,37,262,39],[278,38,262,40,"isUndefined"],[278,49,262,51],[278,50,262,52,"revalidateOnMount"],[278,67,262,69],[278,68,262,70],[278,70,262,72],[278,77,262,79,"revalidateOnMount"],[278,94,262,96],[279,6,263,8],[280,6,264,8],[280,10,264,12,"getConfig"],[280,19,264,21],[280,20,264,22],[280,21,264,23],[280,22,264,24,"isPaused"],[280,30,264,32],[280,31,264,33],[280,32,264,34],[280,34,264,36],[280,41,264,43],[280,46,264,48],[281,6,265,8],[282,6,266,8],[283,6,267,8],[284,6,268,8],[284,10,268,12,"suspense"],[284,18,268,20],[284,20,268,22],[284,27,268,29,"index_js"],[284,35,268,37],[284,36,268,38,"isUndefined"],[284,47,268,49],[284,48,268,50,"data"],[284,52,268,54],[284,53,268,55],[284,56,268,58],[284,61,268,63],[284,64,268,66,"revalidateIfStale"],[284,81,268,83],[285,6,269,8],[286,6,270,8],[287,6,271,8],[287,13,271,15,"index_js"],[287,21,271,23],[287,22,271,24,"isUndefined"],[287,33,271,35],[287,34,271,36,"data"],[287,38,271,40],[287,39,271,41],[287,43,271,45,"revalidateIfStale"],[287,60,271,62],[288,4,272,4],[288,5,272,5],[288,7,272,7],[288,8,272,8],[289,4,273,4],[290,4,274,4],[291,4,275,4],[291,8,275,10,"defaultValidatingState"],[291,30,275,32],[291,33,275,35],[291,34,275,36],[291,36,275,38,"key"],[291,39,275,41],[291,43,275,45,"fetcher"],[291,50,275,52],[291,54,275,56,"isInitialMount"],[291,68,275,70],[291,72,275,74,"shouldDoInitialRevalidation"],[291,99,275,101],[291,100,275,102],[292,4,276,4],[292,8,276,10,"isValidating"],[292,20,276,22],[292,23,276,25,"index_js"],[292,31,276,33],[292,32,276,34,"isUndefined"],[292,43,276,45],[292,44,276,46,"cached"],[292,50,276,52],[292,51,276,53,"isValidating"],[292,63,276,65],[292,64,276,66],[292,67,276,69,"defaultValidatingState"],[292,89,276,91],[292,92,276,94,"cached"],[292,98,276,100],[292,99,276,101,"isValidating"],[292,111,276,113],[293,4,277,4],[293,8,277,10,"isLoading"],[293,17,277,19],[293,20,277,22,"index_js"],[293,28,277,30],[293,29,277,31,"isUndefined"],[293,40,277,42],[293,41,277,43,"cached"],[293,47,277,49],[293,48,277,50,"isLoading"],[293,57,277,59],[293,58,277,60],[293,61,277,63,"defaultValidatingState"],[293,83,277,85],[293,86,277,88,"cached"],[293,92,277,94],[293,93,277,95,"isLoading"],[293,102,277,104],[294,4,278,4],[295,4,279,4],[296,4,280,4],[296,8,280,10,"revalidate"],[296,18,280,20],[296,21,280,23,"React"],[296,26,280,28],[296,27,280,29,"useCallback"],[296,38,280,40],[297,6,280,40],[297,10,280,40,"_ref"],[297,14,280,40],[297,17,280,40,"_asyncToGenerator"],[297,34,280,40],[297,35,280,41],[297,46,280,48,"revalidateOpts"],[297,60,280,62],[297,62,280,65],[298,8,281,8],[298,12,281,14,"currentFetcher"],[298,26,281,28],[298,29,281,31,"fetcherRef"],[298,39,281,41],[298,40,281,42,"current"],[298,47,281,49],[299,8,282,8],[299,12,282,12],[299,13,282,13,"key"],[299,16,282,16],[299,20,282,20],[299,21,282,21,"currentFetcher"],[299,35,282,35],[299,39,282,39,"unmountedRef"],[299,51,282,51],[299,52,282,52,"current"],[299,59,282,59],[299,63,282,63,"getConfig"],[299,72,282,72],[299,73,282,73],[299,74,282,74],[299,75,282,75,"isPaused"],[299,83,282,83],[299,84,282,84],[299,85,282,85],[299,87,282,87],[300,10,283,12],[300,17,283,19],[300,22,283,24],[301,8,284,8],[302,8,285,8],[302,12,285,12,"newData"],[302,19,285,19],[303,8,286,8],[303,12,286,12,"startAt"],[303,19,286,19],[304,8,287,8],[304,12,287,12,"loading"],[304,19,287,19],[304,22,287,22],[304,26,287,26],[305,8,288,8],[305,12,288,14,"opts"],[305,16,288,18],[305,19,288,21,"revalidateOpts"],[305,33,288,35],[305,37,288,39],[305,38,288,40],[305,39,288,41],[306,8,289,8],[307,8,290,8],[308,8,291,8],[308,12,291,14,"shouldStartNewRequest"],[308,33,291,35],[308,36,291,38],[308,37,291,39,"FETCH"],[308,42,291,44],[308,43,291,45,"key"],[308,46,291,48],[308,47,291,49],[308,51,291,53],[308,52,291,54,"opts"],[308,56,291,58],[308,57,291,59,"dedupe"],[308,63,291,65],[309,8,292,8],[310,0,293,0],[311,0,294,0],[312,0,295,0],[313,0,296,0],[314,0,297,0],[315,0,298,0],[316,0,299,0],[317,0,300,0],[318,0,301,0],[319,8,302,9],[319,12,302,15,"callbackSafeguard"],[319,29,302,32],[319,32,302,35,"callbackSafeguard"],[319,33,302,35],[319,38,302,39],[320,10,303,12],[320,14,303,16,"index_js"],[320,22,303,24],[320,23,303,25,"IS_REACT_LEGACY"],[320,38,303,40],[320,40,303,42],[321,12,304,16],[321,19,304,23],[321,20,304,24,"unmountedRef"],[321,32,304,36],[321,33,304,37,"current"],[321,40,304,44],[321,44,304,48,"key"],[321,47,304,51],[321,52,304,56,"keyRef"],[321,58,304,62],[321,59,304,63,"current"],[321,66,304,70],[321,70,304,74,"initialMountedRef"],[321,87,304,91],[321,88,304,92,"current"],[321,95,304,99],[322,10,305,12],[323,10,306,12],[323,17,306,19,"key"],[323,20,306,22],[323,25,306,27,"keyRef"],[323,31,306,33],[323,32,306,34,"current"],[323,39,306,41],[324,8,307,8],[324,9,307,9],[325,8,308,8],[326,8,309,8],[326,12,309,14,"finalState"],[326,22,309,24],[326,25,309,27],[327,10,310,12,"isValidating"],[327,22,310,24],[327,24,310,26],[327,29,310,31],[328,10,311,12,"isLoading"],[328,19,311,21],[328,21,311,23],[329,8,312,8],[329,9,312,9],[330,8,313,8],[330,12,313,14,"finishRequestAndUpdateState"],[330,39,313,41],[330,42,313,44,"finishRequestAndUpdateState"],[330,43,313,44],[330,48,313,48],[331,10,314,12,"setCache"],[331,18,314,20],[331,19,314,21,"finalState"],[331,29,314,31],[331,30,314,32],[332,8,315,8],[332,9,315,9],[333,8,316,8],[333,12,316,14,"cleanupState"],[333,24,316,26],[333,27,316,29,"cleanupState"],[333,28,316,29],[333,33,316,33],[334,10,317,12],[335,10,318,12],[335,14,318,18,"requestInfo"],[335,25,318,29],[335,28,318,32,"FETCH"],[335,33,318,37],[335,34,318,38,"key"],[335,37,318,41],[335,38,318,42],[336,10,319,12],[336,14,319,16,"requestInfo"],[336,25,319,27],[336,29,319,31,"requestInfo"],[336,40,319,42],[336,41,319,43],[336,42,319,44],[336,43,319,45],[336,48,319,50,"startAt"],[336,55,319,57],[336,57,319,59],[337,12,320,16],[337,19,320,23,"FETCH"],[337,24,320,28],[337,25,320,29,"key"],[337,28,320,32],[337,29,320,33],[338,10,321,12],[339,8,322,8],[339,9,322,9],[340,8,323,8],[341,8,324,8],[341,12,324,14,"initialState"],[341,24,324,26],[341,27,324,29],[342,10,325,12,"isValidating"],[342,22,325,24],[342,24,325,26],[343,8,326,8],[343,9,326,9],[344,8,327,8],[345,8,328,8],[346,8,329,8],[346,12,329,12,"index_js"],[346,20,329,20],[346,21,329,21,"isUndefined"],[346,32,329,32],[346,33,329,33,"getCache"],[346,41,329,41],[346,42,329,42],[346,43,329,43],[346,44,329,44,"data"],[346,48,329,48],[346,49,329,49],[346,51,329,51],[347,10,330,12,"initialState"],[347,22,330,24],[347,23,330,25,"isLoading"],[347,32,330,34],[347,35,330,37],[347,39,330,41],[348,8,331,8],[349,8,332,8],[349,12,332,12],[350,10,333,12],[350,14,333,16,"shouldStartNewRequest"],[350,35,333,37],[350,37,333,39],[351,12,334,16,"setCache"],[351,20,334,24],[351,21,334,25,"initialState"],[351,33,334,37],[351,34,334,38],[352,12,335,16],[353,12,336,16],[354,12,337,16],[354,16,337,20,"config"],[354,22,337,26],[354,23,337,27,"loadingTimeout"],[354,37,337,41],[354,41,337,45,"index_js"],[354,49,337,53],[354,50,337,54,"isUndefined"],[354,61,337,65],[354,62,337,66,"getCache"],[354,70,337,74],[354,71,337,75],[354,72,337,76],[354,73,337,77,"data"],[354,77,337,81],[354,78,337,82],[354,80,337,84],[355,14,338,20,"setTimeout"],[355,24,338,30],[355,25,338,31],[355,31,338,35],[356,16,339,24],[356,20,339,28,"loading"],[356,27,339,35],[356,31,339,39,"callbackSafeguard"],[356,48,339,56],[356,49,339,57],[356,50,339,58],[356,52,339,60],[357,18,340,28,"getConfig"],[357,27,340,37],[357,28,340,38],[357,29,340,39],[357,30,340,40,"onLoadingSlow"],[357,43,340,53],[357,44,340,54,"key"],[357,47,340,57],[357,49,340,59,"config"],[357,55,340,65],[357,56,340,66],[358,16,341,24],[359,14,342,20],[359,15,342,21],[359,17,342,23,"config"],[359,23,342,29],[359,24,342,30,"loadingTimeout"],[359,38,342,44],[359,39,342,45],[360,12,343,16],[361,12,344,16],[362,12,345,16],[363,12,346,16,"FETCH"],[363,17,346,21],[363,18,346,22,"key"],[363,21,346,25],[363,22,346,26],[363,25,346,29],[363,26,347,20,"currentFetcher"],[363,40,347,34],[363,41,347,35,"fnArg"],[363,46,347,40],[363,47,347,41],[363,49,348,20,"index_js"],[363,57,348,28],[363,58,348,29,"getTimestamp"],[363,70,348,41],[363,71,348,42],[363,72,348,43],[363,73,349,17],[364,10,350,12],[365,10,351,12],[366,10,352,12],[367,10,353,12],[368,10,353,13],[368,14,353,13,"_FETCH$key"],[368,24,353,13],[368,27,353,13,"_slicedToArray"],[368,41,353,13],[368,42,354,33,"FETCH"],[368,47,354,38],[368,48,354,39,"key"],[368,51,354,42],[368,52,354,43],[369,10,354,13,"newData"],[369,17,354,20],[369,20,354,20,"_FETCH$key"],[369,30,354,20],[370,10,354,22,"startAt"],[370,17,354,29],[370,20,354,29,"_FETCH$key"],[370,30,354,29],[371,10,355,12,"newData"],[371,17,355,19],[371,26,355,28,"newData"],[371,33,355,35],[372,10,356,12],[372,14,356,16,"shouldStartNewRequest"],[372,35,356,37],[372,37,356,39],[373,12,357,16],[374,12,358,16],[375,12,359,16,"setTimeout"],[375,22,359,26],[375,23,359,27,"cleanupState"],[375,35,359,39],[375,37,359,41,"config"],[375,43,359,47],[375,44,359,48,"dedupingInterval"],[375,60,359,64],[375,61,359,65],[376,10,360,12],[377,10,361,12],[378,10,362,12],[379,10,363,12],[380,10,364,12],[381,10,365,12],[382,10,366,12],[383,10,367,12],[383,14,367,16],[383,15,367,17,"FETCH"],[383,20,367,22],[383,21,367,23,"key"],[383,24,367,26],[383,25,367,27],[383,29,367,31,"FETCH"],[383,34,367,36],[383,35,367,37,"key"],[383,38,367,40],[383,39,367,41],[383,40,367,42],[383,41,367,43],[383,42,367,44],[383,47,367,49,"startAt"],[383,54,367,56],[383,56,367,58],[384,12,368,16],[384,16,368,20,"shouldStartNewRequest"],[384,37,368,41],[384,39,368,43],[385,14,369,20],[385,18,369,24,"callbackSafeguard"],[385,35,369,41],[385,36,369,42],[385,37,369,43],[385,39,369,45],[386,16,370,24,"getConfig"],[386,25,370,33],[386,26,370,34],[386,27,370,35],[386,28,370,36,"onDiscarded"],[386,39,370,47],[386,40,370,48,"key"],[386,43,370,51],[386,44,370,52],[387,14,371,20],[388,12,372,16],[389,12,373,16],[389,19,373,23],[389,24,373,28],[390,10,374,12],[391,10,375,12],[392,10,376,12,"finalState"],[392,20,376,22],[392,21,376,23,"error"],[392,26,376,28],[392,29,376,31,"index_js"],[392,37,376,39],[392,38,376,40,"UNDEFINED"],[392,47,376,49],[393,10,377,12],[394,10,378,12],[395,10,379,12],[396,10,380,12],[397,10,381,12],[398,10,382,12],[399,10,383,12],[400,10,384,12],[401,10,385,12],[402,10,386,12],[403,10,387,12],[404,10,388,12],[405,10,389,12],[405,14,389,18,"mutationInfo"],[405,26,389,30],[405,29,389,33,"MUTATION"],[405,37,389,41],[405,38,389,42,"key"],[405,41,389,45],[405,42,389,46],[406,10,390,12],[406,14,390,16],[406,15,390,17,"index_js"],[406,23,390,25],[406,24,390,26,"isUndefined"],[406,35,390,37],[406,36,390,38,"mutationInfo"],[406,48,390,50],[406,49,390,51],[407,10,390,55],[408,10,391,13,"startAt"],[408,17,391,20],[408,21,391,24,"mutationInfo"],[408,33,391,36],[408,34,391,37],[408,35,391,38],[408,36,391,39],[409,10,391,43],[410,10,392,12,"startAt"],[410,17,392,19],[410,21,392,23,"mutationInfo"],[410,33,392,35],[410,34,392,36],[410,35,392,37],[410,36,392,38],[411,10,392,42],[412,10,393,12,"mutationInfo"],[412,22,393,24],[412,23,393,25],[412,24,393,26],[412,25,393,27],[412,30,393,32],[412,31,393,33],[412,32,393,34],[412,34,393,36],[413,12,394,16,"finishRequestAndUpdateState"],[413,39,394,43],[413,40,394,44],[413,41,394,45],[414,12,395,16],[414,16,395,20,"shouldStartNewRequest"],[414,37,395,41],[414,39,395,43],[415,14,396,20],[415,18,396,24,"callbackSafeguard"],[415,35,396,41],[415,36,396,42],[415,37,396,43],[415,39,396,45],[416,16,397,24,"getConfig"],[416,25,397,33],[416,26,397,34],[416,27,397,35],[416,28,397,36,"onDiscarded"],[416,39,397,47],[416,40,397,48,"key"],[416,43,397,51],[416,44,397,52],[417,14,398,20],[418,12,399,16],[419,12,400,16],[419,19,400,23],[419,24,400,28],[420,10,401,12],[421,10,402,12],[422,10,403,12],[423,10,404,12],[423,14,404,18,"cacheData"],[423,23,404,27],[423,26,404,30,"getCache"],[423,34,404,38],[423,35,404,39],[423,36,404,40],[423,37,404,41,"data"],[423,41,404,45],[424,10,405,12],[425,10,406,12],[426,10,407,12,"finalState"],[426,20,407,22],[426,21,407,23,"data"],[426,25,407,27],[426,28,407,30,"compare"],[426,35,407,37],[426,36,407,38,"cacheData"],[426,45,407,47],[426,47,407,49,"newData"],[426,54,407,56],[426,55,407,57],[426,58,407,60,"cacheData"],[426,67,407,69],[426,70,407,72,"newData"],[426,77,407,79],[427,10,408,12],[428,10,409,12],[428,14,409,16,"shouldStartNewRequest"],[428,35,409,37],[428,37,409,39],[429,12,410,16],[429,16,410,20,"callbackSafeguard"],[429,33,410,37],[429,34,410,38],[429,35,410,39],[429,37,410,41],[430,14,411,20,"getConfig"],[430,23,411,29],[430,24,411,30],[430,25,411,31],[430,26,411,32,"onSuccess"],[430,35,411,41],[430,36,411,42,"newData"],[430,43,411,49],[430,45,411,51,"key"],[430,48,411,54],[430,50,411,56,"config"],[430,56,411,62],[430,57,411,63],[431,12,412,16],[432,10,413,12],[433,8,414,8],[433,9,414,9],[433,10,414,10],[433,17,414,17,"err"],[433,20,414,20],[433,22,414,22],[434,10,415,12,"cleanupState"],[434,22,415,24],[434,23,415,25],[434,24,415,26],[435,10,416,12],[435,14,416,18,"currentConfig"],[435,27,416,31],[435,30,416,34,"getConfig"],[435,39,416,43],[435,40,416,44],[435,41,416,45],[436,10,417,12],[436,14,417,20,"shouldRetryOnError"],[436,32,417,38],[436,35,417,43,"currentConfig"],[436,48,417,56],[436,49,417,20,"shouldRetryOnError"],[436,67,417,38],[437,10,418,12],[438,10,419,12],[438,14,419,16],[438,15,419,17,"currentConfig"],[438,28,419,30],[438,29,419,31,"isPaused"],[438,37,419,39],[438,38,419,40],[438,39,419,41],[438,41,419,43],[439,12,420,16],[440,12,421,16,"finalState"],[440,22,421,26],[440,23,421,27,"error"],[440,28,421,32],[440,31,421,35,"err"],[440,34,421,38],[441,12,422,16],[442,12,423,16],[443,12,424,16],[443,16,424,20,"shouldStartNewRequest"],[443,37,424,41],[443,41,424,45,"callbackSafeguard"],[443,58,424,62],[443,59,424,63],[443,60,424,64],[443,62,424,66],[444,14,425,20,"currentConfig"],[444,27,425,33],[444,28,425,34,"onError"],[444,35,425,41],[444,36,425,42,"err"],[444,39,425,45],[444,41,425,47,"key"],[444,44,425,50],[444,46,425,52,"currentConfig"],[444,59,425,65],[444,60,425,66],[445,14,426,20],[445,18,426,24,"shouldRetryOnError"],[445,36,426,42],[445,41,426,47],[445,45,426,51],[445,49,426,55,"index_js"],[445,57,426,63],[445,58,426,64,"isFunction"],[445,68,426,74],[445,69,426,75,"shouldRetryOnError"],[445,87,426,93],[445,88,426,94],[445,92,426,98,"shouldRetryOnError"],[445,110,426,116],[445,111,426,117,"err"],[445,114,426,120],[445,115,426,121],[445,117,426,123],[446,16,427,24],[446,20,427,28],[446,21,427,29,"getConfig"],[446,30,427,38],[446,31,427,39],[446,32,427,40],[446,33,427,41,"revalidateOnFocus"],[446,50,427,58],[446,54,427,62],[446,55,427,63,"getConfig"],[446,64,427,72],[446,65,427,73],[446,66,427,74],[446,67,427,75,"revalidateOnReconnect"],[446,88,427,96],[446,92,427,100,"isActive"],[446,100,427,108],[446,101,427,109],[446,102,427,110],[446,104,427,112],[447,18,428,28],[448,18,429,28],[449,18,430,28],[450,18,431,28,"currentConfig"],[450,31,431,41],[450,32,431,42,"onErrorRetry"],[450,44,431,54],[450,45,431,55,"err"],[450,48,431,58],[450,50,431,60,"key"],[450,53,431,63],[450,55,431,65,"currentConfig"],[450,68,431,78],[450,70,431,81,"_opts"],[450,75,431,86],[450,79,431,89],[451,20,432,32],[451,24,432,38,"revalidators"],[451,36,432,50],[451,39,432,53,"EVENT_REVALIDATORS"],[451,57,432,71],[451,58,432,72,"key"],[451,61,432,75],[451,62,432,76],[452,20,433,32],[452,24,433,36,"revalidators"],[452,36,433,48],[452,40,433,52,"revalidators"],[452,52,433,64],[452,53,433,65],[452,54,433,66],[452,55,433,67],[452,57,433,69],[453,22,434,36,"revalidators"],[453,34,434,48],[453,35,434,49],[453,36,434,50],[453,37,434,51],[453,38,434,52,"index_js"],[453,46,434,60],[453,47,434,61,"revalidateEvents"],[453,63,434,77],[453,64,434,78,"ERROR_REVALIDATE_EVENT"],[453,86,434,100],[453,88,434,102,"_opts"],[453,93,434,107],[453,94,434,108],[454,20,435,32],[455,18,436,28],[455,19,436,29],[455,21,436,31],[456,20,437,32,"retryCount"],[456,30,437,42],[456,32,437,44],[456,33,437,45,"opts"],[456,37,437,49],[456,38,437,50,"retryCount"],[456,48,437,60],[456,52,437,64],[456,53,437,65],[456,57,437,69],[456,58,437,70],[457,20,438,32,"dedupe"],[457,26,438,38],[457,28,438,40],[458,18,439,28],[458,19,439,29],[458,20,439,30],[459,16,440,24],[460,14,441,20],[461,12,442,16],[462,10,443,12],[463,8,444,8],[464,8,445,8],[465,8,446,8,"loading"],[465,15,446,15],[465,18,446,18],[465,23,446,23],[466,8,447,8],[467,8,448,8,"finishRequestAndUpdateState"],[467,35,448,35],[467,36,448,36],[467,37,448,37],[468,8,449,8],[468,15,449,15],[468,19,449,19],[469,6,450,4],[469,7,450,5],[470,6,450,5],[470,23,450,5,"_x"],[470,25,450,5],[471,8,450,5],[471,15,450,5,"_ref"],[471,19,450,5],[471,20,450,5,"apply"],[471,25,450,5],[471,32,450,5,"arguments"],[471,41,450,5],[472,6,450,5],[473,4,450,5],[474,4,450,7],[475,4,451,4],[476,4,452,4],[477,4,453,4],[478,4,454,4],[479,4,455,4],[480,4,456,4],[481,4,457,4],[482,4,458,4],[483,4,459,4],[484,4,460,4],[485,4,461,4],[485,5,462,8,"key"],[485,8,462,11],[485,10,463,8,"cache"],[485,15,463,13],[485,16,464,5],[485,17,464,6],[486,4,465,4],[487,4,466,4],[488,4,467,4],[488,8,467,10,"boundMutate"],[488,19,467,21],[488,22,467,24,"React"],[488,27,467,29],[488,28,467,30,"useCallback"],[488,39,467,41],[489,4,467,42],[490,4,468,4],[490,16,468,15],[491,6,468,15],[491,15,468,15,"_len"],[491,19,468,15],[491,22,468,15,"arguments"],[491,31,468,15],[491,32,468,15,"length"],[491,38,468,15],[491,40,468,8,"args"],[491,44,468,12],[491,51,468,12,"Array"],[491,56,468,12],[491,57,468,12,"_len"],[491,61,468,12],[491,64,468,12,"_key2"],[491,69,468,12],[491,75,468,12,"_key2"],[491,80,468,12],[491,83,468,12,"_len"],[491,87,468,12],[491,89,468,12,"_key2"],[491,94,468,12],[492,8,468,8,"args"],[492,12,468,12],[492,13,468,12,"_key2"],[492,18,468,12],[492,22,468,12,"arguments"],[492,31,468,12],[492,32,468,12,"_key2"],[492,37,468,12],[493,6,468,12],[494,6,469,8],[494,13,469,15,"index_js"],[494,21,469,23],[494,22,469,24,"internalMutate"],[494,36,469,38],[494,37,469,39,"cache"],[494,42,469,44],[494,44,469,46,"keyRef"],[494,50,469,52],[494,51,469,53,"current"],[494,58,469,60],[494,60,469,62],[494,63,469,65,"args"],[494,67,469,69],[494,68,469,70],[495,4,470,4],[495,5,470,5],[496,4,470,7],[497,4,471,4],[497,6,471,6],[497,7,471,7],[498,4,472,4],[499,4,473,4,"index_js"],[499,12,473,12],[499,13,473,13,"useIsomorphicLayoutEffect"],[499,38,473,38],[499,39,473,39],[499,45,473,43],[500,6,474,8,"fetcherRef"],[500,16,474,18],[500,17,474,19,"current"],[500,24,474,26],[500,27,474,29,"fetcher"],[500,34,474,36],[501,6,475,8,"configRef"],[501,15,475,17],[501,16,475,18,"current"],[501,23,475,25],[501,26,475,28,"config"],[501,32,475,34],[502,6,476,8],[503,6,477,8],[504,6,478,8],[504,10,478,12],[504,11,478,13,"index_js"],[504,19,478,21],[504,20,478,22,"isUndefined"],[504,31,478,33],[504,32,478,34,"cachedData"],[504,42,478,44],[504,43,478,45],[504,45,478,47],[505,8,479,12,"laggyDataRef"],[505,20,479,24],[505,21,479,25,"current"],[505,28,479,32],[505,31,479,35,"cachedData"],[505,41,479,45],[506,6,480,8],[507,4,481,4],[507,5,481,5],[507,6,481,6],[508,4,482,4],[509,4,483,4,"index_js"],[509,12,483,12],[509,13,483,13,"useIsomorphicLayoutEffect"],[509,38,483,38],[509,39,483,39],[509,45,483,43],[510,6,484,8],[510,10,484,12],[510,11,484,13,"key"],[510,14,484,16],[510,16,484,18],[511,6,485,8],[511,10,485,14,"softRevalidate"],[511,24,485,28],[511,27,485,31,"revalidate"],[511,37,485,41],[511,38,485,42,"bind"],[511,42,485,46],[511,43,485,47,"index_js"],[511,51,485,55],[511,52,485,56,"UNDEFINED"],[511,61,485,65],[511,63,485,67,"WITH_DEDUPE"],[511,74,485,78],[511,75,485,79],[512,6,486,8],[513,6,487,8],[514,6,488,8],[514,10,488,12,"nextFocusRevalidatedAt"],[514,32,488,34],[514,35,488,37],[514,36,488,38],[515,6,489,8],[515,10,489,14,"onRevalidate"],[515,22,489,26],[515,25,489,29],[515,34,489,29,"onRevalidate"],[515,35,489,30,"type"],[515,39,489,34],[515,41,489,48],[516,8,489,48],[516,12,489,36,"opts"],[516,16,489,40],[516,19,489,40,"arguments"],[516,28,489,40],[516,29,489,40,"length"],[516,35,489,40],[516,43,489,40,"arguments"],[516,52,489,40],[516,60,489,40,"undefined"],[516,69,489,40],[516,72,489,40,"arguments"],[516,81,489,40],[516,87,489,43],[516,88,489,44],[516,89,489,45],[517,8,490,12],[517,12,490,16,"type"],[517,16,490,20],[517,20,490,24,"index_js"],[517,28,490,32],[517,29,490,33,"revalidateEvents"],[517,45,490,49],[517,46,490,50,"FOCUS_EVENT"],[517,57,490,61],[517,59,490,63],[518,10,491,16],[518,14,491,22,"now"],[518,17,491,25],[518,20,491,28,"Date"],[518,24,491,32],[518,25,491,33,"now"],[518,28,491,36],[518,29,491,37],[518,30,491,38],[519,10,492,16],[519,14,492,20,"getConfig"],[519,23,492,29],[519,24,492,30],[519,25,492,31],[519,26,492,32,"revalidateOnFocus"],[519,43,492,49],[519,47,492,53,"now"],[519,50,492,56],[519,53,492,59,"nextFocusRevalidatedAt"],[519,75,492,81],[519,79,492,85,"isActive"],[519,87,492,93],[519,88,492,94],[519,89,492,95],[519,91,492,97],[520,12,493,20,"nextFocusRevalidatedAt"],[520,34,493,42],[520,37,493,45,"now"],[520,40,493,48],[520,43,493,51,"getConfig"],[520,52,493,60],[520,53,493,61],[520,54,493,62],[520,55,493,63,"focusThrottleInterval"],[520,76,493,84],[521,12,494,20,"softRevalidate"],[521,26,494,34],[521,27,494,35],[521,28,494,36],[522,10,495,16],[523,8,496,12],[523,9,496,13],[523,15,496,19],[523,19,496,23,"type"],[523,23,496,27],[523,27,496,31,"index_js"],[523,35,496,39],[523,36,496,40,"revalidateEvents"],[523,52,496,56],[523,53,496,57,"RECONNECT_EVENT"],[523,68,496,72],[523,70,496,74],[524,10,497,16],[524,14,497,20,"getConfig"],[524,23,497,29],[524,24,497,30],[524,25,497,31],[524,26,497,32,"revalidateOnReconnect"],[524,47,497,53],[524,51,497,57,"isActive"],[524,59,497,65],[524,60,497,66],[524,61,497,67],[524,63,497,69],[525,12,498,20,"softRevalidate"],[525,26,498,34],[525,27,498,35],[525,28,498,36],[526,10,499,16],[527,8,500,12],[527,9,500,13],[527,15,500,19],[527,19,500,23,"type"],[527,23,500,27],[527,27,500,31,"index_js"],[527,35,500,39],[527,36,500,40,"revalidateEvents"],[527,52,500,56],[527,53,500,57,"MUTATE_EVENT"],[527,65,500,69],[527,67,500,71],[528,10,501,16],[528,17,501,23,"revalidate"],[528,27,501,33],[528,28,501,34],[528,29,501,35],[529,8,502,12],[529,9,502,13],[529,15,502,19],[529,19,502,23,"type"],[529,23,502,27],[529,27,502,31,"index_js"],[529,35,502,39],[529,36,502,40,"revalidateEvents"],[529,52,502,56],[529,53,502,57,"ERROR_REVALIDATE_EVENT"],[529,75,502,79],[529,77,502,81],[530,10,503,16],[530,17,503,23,"revalidate"],[530,27,503,33],[530,28,503,34,"opts"],[530,32,503,38],[530,33,503,39],[531,8,504,12],[532,8,505,12],[533,6,506,8],[533,7,506,9],[534,6,507,8],[534,10,507,14,"unsubEvents"],[534,21,507,25],[534,24,507,28,"index_js"],[534,32,507,36],[534,33,507,37,"subscribeCallback"],[534,50,507,54],[534,51,507,55,"key"],[534,54,507,58],[534,56,507,60,"EVENT_REVALIDATORS"],[534,74,507,78],[534,76,507,80,"onRevalidate"],[534,88,507,92],[534,89,507,93],[535,6,508,8],[536,6,509,8,"unmountedRef"],[536,18,509,20],[536,19,509,21,"current"],[536,26,509,28],[536,29,509,31],[536,34,509,36],[537,6,510,8,"keyRef"],[537,12,510,14],[537,13,510,15,"current"],[537,20,510,22],[537,23,510,25,"key"],[537,26,510,28],[538,6,511,8,"initialMountedRef"],[538,23,511,25],[538,24,511,26,"current"],[538,31,511,33],[538,34,511,36],[538,38,511,40],[539,6,512,8],[540,6,513,8,"setCache"],[540,14,513,16],[540,15,513,17],[541,8,514,12,"_k"],[541,10,514,14],[541,12,514,16,"fnArg"],[542,6,515,8],[542,7,515,9],[542,8,515,10],[543,6,516,8],[544,6,517,8],[544,10,517,12,"shouldDoInitialRevalidation"],[544,37,517,39],[544,39,517,41],[545,8,518,12],[545,12,518,16,"index_js"],[545,20,518,24],[545,21,518,25,"isUndefined"],[545,32,518,36],[545,33,518,37,"data"],[545,37,518,41],[545,38,518,42],[545,42,518,46,"index_js"],[545,50,518,54],[545,51,518,55,"IS_SERVER"],[545,60,518,64],[545,62,518,66],[546,10,519,16],[547,10,520,16,"softRevalidate"],[547,24,520,30],[547,25,520,31],[547,26,520,32],[548,8,521,12],[548,9,521,13],[548,15,521,19],[549,10,522,16],[550,10,523,16],[551,10,524,16,"index_js"],[551,18,524,24],[551,19,524,25,"rAF"],[551,22,524,28],[551,23,524,29,"softRevalidate"],[551,37,524,43],[551,38,524,44],[552,8,525,12],[553,6,526,8],[554,6,527,8],[554,13,527,15],[554,19,527,19],[555,8,528,12],[556,8,529,12,"unmountedRef"],[556,20,529,24],[556,21,529,25,"current"],[556,28,529,32],[556,31,529,35],[556,35,529,39],[557,8,530,12,"unsubEvents"],[557,19,530,23],[557,20,530,24],[557,21,530,25],[558,6,531,8],[558,7,531,9],[559,4,532,4],[559,5,532,5],[559,7,532,7],[559,8,533,8,"key"],[559,11,533,11],[559,12,534,5],[559,13,534,6],[560,4,535,4],[561,4,536,4,"index_js"],[561,12,536,12],[561,13,536,13,"useIsomorphicLayoutEffect"],[561,38,536,38],[561,39,536,39],[561,45,536,43],[562,6,537,8],[562,10,537,12,"timer"],[562,15,537,17],[563,6,538,8],[563,15,538,17,"next"],[563,19,538,21,"next"],[563,20,538,21],[563,22,538,24],[564,8,539,12],[565,8,540,12],[566,8,541,12],[566,12,541,18,"interval"],[566,20,541,26],[566,23,541,29,"index_js"],[566,31,541,37],[566,32,541,38,"isFunction"],[566,42,541,48],[566,43,541,49,"refreshInterval"],[566,58,541,64],[566,59,541,65],[566,62,541,68,"refreshInterval"],[566,77,541,83],[566,78,541,84,"getCache"],[566,86,541,92],[566,87,541,93],[566,88,541,94],[566,89,541,95,"data"],[566,93,541,99],[566,94,541,100],[566,97,541,103,"refreshInterval"],[566,112,541,118],[567,8,542,12],[568,8,543,12],[569,8,544,12],[570,8,545,12],[570,12,545,16,"interval"],[570,20,545,24],[570,24,545,28,"timer"],[570,29,545,33],[570,34,545,38],[570,35,545,39],[570,36,545,40],[570,38,545,42],[571,10,546,16,"timer"],[571,15,546,21],[571,18,546,24,"setTimeout"],[571,28,546,34],[571,29,546,35,"execute"],[571,36,546,42],[571,38,546,44,"interval"],[571,46,546,52],[571,47,546,53],[572,8,547,12],[573,6,548,8],[574,6,549,8],[574,15,549,17,"execute"],[574,22,549,24,"execute"],[574,23,549,24],[574,25,549,27],[575,8,550,12],[576,8,551,12],[577,8,552,12],[577,12,552,16],[577,13,552,17,"getCache"],[577,21,552,25],[577,22,552,26],[577,23,552,27],[577,24,552,28,"error"],[577,29,552,33],[577,34,552,38,"refreshWhenHidden"],[577,51,552,55],[577,55,552,59,"getConfig"],[577,64,552,68],[577,65,552,69],[577,66,552,70],[577,67,552,71,"isVisible"],[577,76,552,80],[577,77,552,81],[577,78,552,82],[577,79,552,83],[577,84,552,88,"refreshWhenOffline"],[577,102,552,106],[577,106,552,110,"getConfig"],[577,115,552,119],[577,116,552,120],[577,117,552,121],[577,118,552,122,"isOnline"],[577,126,552,130],[577,127,552,131],[577,128,552,132],[577,129,552,133],[577,131,552,135],[578,10,553,16,"revalidate"],[578,20,553,26],[578,21,553,27,"WITH_DEDUPE"],[578,32,553,38],[578,33,553,39],[578,34,553,40,"then"],[578,38,553,44],[578,39,553,45,"next"],[578,43,553,49],[578,44,553,50],[579,8,554,12],[579,9,554,13],[579,15,554,19],[580,10,555,16],[581,10,556,16,"next"],[581,14,556,20],[581,15,556,21],[581,16,556,22],[582,8,557,12],[583,6,558,8],[584,6,559,8,"next"],[584,10,559,12],[584,11,559,13],[584,12,559,14],[585,6,560,8],[585,13,560,15],[585,19,560,19],[586,8,561,12],[586,12,561,16,"timer"],[586,17,561,21],[586,19,561,23],[587,10,562,16,"clearTimeout"],[587,22,562,28],[587,23,562,29,"timer"],[587,28,562,34],[587,29,562,35],[588,10,563,16,"timer"],[588,15,563,21],[588,18,563,24],[588,19,563,25],[588,20,563,26],[589,8,564,12],[590,6,565,8],[590,7,565,9],[591,4,566,4],[591,5,566,5],[591,7,566,7],[591,8,567,8,"refreshInterval"],[591,23,567,23],[591,25,568,8,"refreshWhenHidden"],[591,42,568,25],[591,44,569,8,"refreshWhenOffline"],[591,62,569,26],[591,64,570,8,"key"],[591,67,570,11],[591,68,571,5],[591,69,571,6],[592,4,572,4],[593,4,573,4,"React"],[593,9,573,9],[593,10,573,10,"useDebugValue"],[593,23,573,23],[593,24,573,24,"returnedData"],[593,36,573,36],[593,37,573,37],[594,4,574,4],[595,4,575,4],[596,4,576,4],[597,4,577,4],[598,4,578,4],[598,8,578,8,"suspense"],[598,16,578,16],[598,20,578,20,"index_js"],[598,28,578,28],[598,29,578,29,"isUndefined"],[598,40,578,40],[598,41,578,41,"data"],[598,45,578,45],[598,46,578,46],[598,50,578,50,"key"],[598,53,578,53],[598,55,578,55],[599,6,579,8],[600,6,580,8],[601,6,581,8],[602,6,582,8],[602,10,582,12],[602,11,582,13,"index_js"],[602,19,582,21],[602,20,582,22,"IS_REACT_LEGACY"],[602,35,582,37],[602,39,582,41,"index_js"],[602,47,582,49],[602,48,582,50,"IS_SERVER"],[602,57,582,59],[602,59,582,61],[603,8,583,12],[603,14,583,18],[603,18,583,22,"Error"],[603,23,583,27],[603,24,583,28],[603,79,583,83],[603,80,583,84],[604,6,584,8],[605,6,585,8],[606,6,586,8,"fetcherRef"],[606,16,586,18],[606,17,586,19,"current"],[606,24,586,26],[606,27,586,29,"fetcher"],[606,34,586,36],[607,6,587,8,"configRef"],[607,15,587,17],[607,16,587,18,"current"],[607,23,587,25],[607,26,587,28,"config"],[607,32,587,34],[608,6,588,8,"unmountedRef"],[608,18,588,20],[608,19,588,21,"current"],[608,26,588,28],[608,29,588,31],[608,34,588,36],[609,6,589,8],[609,10,589,14,"req"],[609,13,589,17],[609,16,589,20,"PRELOAD"],[609,23,589,27],[609,24,589,28,"key"],[609,27,589,31],[609,28,589,32],[610,6,590,8],[610,10,590,12],[610,11,590,13,"index_js"],[610,19,590,21],[610,20,590,22,"isUndefined"],[610,31,590,33],[610,32,590,34,"req"],[610,35,590,37],[610,36,590,38],[610,38,590,40],[611,8,591,12],[611,12,591,18,"promise"],[611,19,591,25],[611,22,591,28,"boundMutate"],[611,33,591,39],[611,34,591,40,"req"],[611,37,591,43],[611,38,591,44],[612,8,592,12,"use"],[612,11,592,15],[612,12,592,16,"promise"],[612,19,592,23],[612,20,592,24],[613,6,593,8],[614,6,594,8],[614,10,594,12,"index_js"],[614,18,594,20],[614,19,594,21,"isUndefined"],[614,30,594,32],[614,31,594,33,"error"],[614,36,594,38],[614,37,594,39],[614,39,594,41],[615,8,595,12],[615,12,595,18,"promise"],[615,20,595,25],[615,23,595,28,"revalidate"],[615,33,595,38],[615,34,595,39,"WITH_DEDUPE"],[615,45,595,50],[615,46,595,51],[616,8,596,12],[616,12,596,16],[616,13,596,17,"index_js"],[616,21,596,25],[616,22,596,26,"isUndefined"],[616,33,596,37],[616,34,596,38,"returnedData"],[616,46,596,50],[616,47,596,51],[616,49,596,53],[617,10,597,16,"promise"],[617,18,597,23],[617,19,597,24,"status"],[617,25,597,30],[617,28,597,33],[617,39,597,44],[618,10,598,16,"promise"],[618,18,598,23],[618,19,598,24,"value"],[618,24,598,29],[618,27,598,32],[618,31,598,36],[619,8,599,12],[620,8,600,12,"use"],[620,11,600,15],[620,12,600,16,"promise"],[620,20,600,23],[620,21,600,24],[621,6,601,8],[621,7,601,9],[621,13,601,15],[622,8,602,12],[622,14,602,18,"error"],[622,19,602,23],[623,6,603,8],[624,4,604,4],[625,4,605,4],[625,11,605,11],[626,6,606,8,"mutate"],[626,12,606,14],[626,14,606,16,"boundMutate"],[626,25,606,27],[627,6,607,8],[627,10,607,12,"data"],[627,14,607,16,"data"],[627,15,607,16],[627,17,607,20],[628,8,608,12,"stateDependencies"],[628,25,608,29],[628,26,608,30,"data"],[628,30,608,34],[628,33,608,37],[628,37,608,41],[629,8,609,12],[629,15,609,19,"returnedData"],[629,27,609,31],[630,6,610,8],[630,7,610,9],[631,6,611,8],[631,10,611,12,"error"],[631,15,611,17,"error"],[631,16,611,17],[631,18,611,21],[632,8,612,12,"stateDependencies"],[632,25,612,29],[632,26,612,30,"error"],[632,31,612,35],[632,34,612,38],[632,38,612,42],[633,8,613,12],[633,15,613,19,"error"],[633,20,613,24],[634,6,614,8],[634,7,614,9],[635,6,615,8],[635,10,615,12,"isValidating"],[635,22,615,24,"isValidating"],[635,23,615,24],[635,25,615,28],[636,8,616,12,"stateDependencies"],[636,25,616,29],[636,26,616,30,"isValidating"],[636,38,616,42],[636,41,616,45],[636,45,616,49],[637,8,617,12],[637,15,617,19,"isValidating"],[637,27,617,31],[638,6,618,8],[638,7,618,9],[639,6,619,8],[639,10,619,12,"isLoading"],[639,19,619,21,"isLoading"],[639,20,619,21],[639,22,619,25],[640,8,620,12,"stateDependencies"],[640,25,620,29],[640,26,620,30,"isLoading"],[640,35,620,39],[640,38,620,42],[640,42,620,46],[641,8,621,12],[641,15,621,19,"isLoading"],[641,24,621,28],[642,6,622,8],[643,4,623,4],[643,5,623,5],[644,2,624,0],[644,3,624,1],[645,2,625,0],[645,6,625,6,"SWRConfig"],[645,15,625,15],[645,18,625,18,"index_js"],[645,26,625,26],[645,27,625,27,"OBJECT"],[645,33,625,33],[645,34,625,34,"defineProperty"],[645,48,625,48],[645,49,625,49,"index_js"],[645,57,625,57],[645,58,625,58,"SWRConfig"],[645,67,625,67],[645,69,625,69],[645,83,625,83],[645,85,625,85],[646,4,626,4,"value"],[646,9,626,9],[646,11,626,11,"index_js"],[646,19,626,19],[646,20,626,20,"defaultConfig"],[647,2,627,0],[647,3,627,1],[647,4,627,2],[648,2,628,0],[649,0,629,0],[650,0,630,0],[651,0,631,0],[652,0,632,0],[653,0,633,0],[654,0,634,0],[655,0,635,0],[656,0,636,0],[657,0,637,0],[658,0,638,0],[659,0,639,0],[660,0,640,0],[661,0,641,0],[662,0,642,0],[663,2,642,4],[663,6,642,10,"useSWR"],[663,12,642,16],[663,15,642,19,"index_js"],[663,23,642,27],[663,24,642,28,"withArgs"],[663,32,642,36],[663,33,642,37,"useSWRHandler"],[663,46,642,50],[663,47,642,51],[665,2,644,0],[667,2,646,0,"Object"],[667,8,646,6],[667,9,646,7,"defineProperty"],[667,23,646,21],[667,24,646,22,"exports"],[667,31,646,29],[667,33,646,31],[667,41,646,39],[667,43,646,41],[668,4,647,2,"enumerable"],[668,14,647,12],[668,16,647,14],[668,20,647,18],[669,4,648,2,"get"],[669,7,648,5],[669,9,648,7],[669,18,648,7,"get"],[669,19,648,7],[669,21,648,19],[670,6,648,21],[670,13,648,28,"index_js"],[670,21,648,36],[670,22,648,37,"mutate"],[670,28,648,43],[671,4,648,45],[672,2,649,0],[672,3,649,1],[672,4,649,2],[673,2,650,0,"Object"],[673,8,650,6],[673,9,650,7,"defineProperty"],[673,23,650,21],[673,24,650,22,"exports"],[673,31,650,29],[673,33,650,31],[673,42,650,40],[673,44,650,42],[674,4,651,2,"enumerable"],[674,14,651,12],[674,16,651,14],[674,20,651,18],[675,4,652,2,"get"],[675,7,652,5],[675,9,652,7],[675,18,652,7,"get"],[675,19,652,7],[675,21,652,19],[676,6,652,21],[676,13,652,28,"index_js"],[676,21,652,36],[676,22,652,37,"preload"],[676,29,652,44],[677,4,652,46],[678,2,653,0],[678,3,653,1],[678,4,653,2],[679,2,654,0,"Object"],[679,8,654,6],[679,9,654,7,"defineProperty"],[679,23,654,21],[679,24,654,22,"exports"],[679,31,654,29],[679,33,654,31],[679,47,654,45],[679,49,654,47],[680,4,655,2,"enumerable"],[680,14,655,12],[680,16,655,14],[680,20,655,18],[681,4,656,2,"get"],[681,7,656,5],[681,9,656,7],[681,18,656,7,"get"],[681,19,656,7],[681,21,656,19],[682,6,656,21],[682,13,656,28,"index_js"],[682,21,656,36],[682,22,656,37,"useSWRConfig"],[682,34,656,49],[683,4,656,51],[684,2,657,0],[684,3,657,1],[684,4,657,2],[685,2,658,0,"exports"],[685,9,658,7],[685,10,658,8,"SWRConfig"],[685,19,658,17],[685,22,658,20,"SWRConfig"],[685,31,658,29],[686,2,659,0,"exports"],[686,9,659,7],[686,10,659,8,"default"],[686,17,659,15],[686,20,659,18,"useSWR"],[686,26,659,24],[687,2,660,0,"exports"],[687,9,660,7],[687,10,660,8,"unstable_serialize"],[687,28,660,26],[687,31,660,29,"unstable_serialize"],[687,49,660,47],[688,0,660,48],[688,3]],"functionMap":{"names":["<global>","_interopDefault","noop","isUndefined","isFunction","isObjectType","stableHash","serialize","unstable_serialize","<anonymous>","thenable.then$argument_0","thenable.then$argument_1","useSWRHandler","getConfig","isActive","isEqual","React.useMemo$argument_0","getSelectedCache","index_js$1.useSyncExternalStore$argument_0","subscribeCache$argument_1","revalidate","callbackSafeguard","finishRequestAndUpdateState","cleanupState","setTimeout$argument_0","currentConfig.onErrorRetry$argument_3","boundMutate","index_js.useIsomorphicLayoutEffect$argument_0","onRevalidate","next","execute","get__data","get__error","get__isValidating","get__isLoading","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACM,+ED;aEK,MF;oBGO,oBH;mBIC,2BJ;qBKO,2EL;mBMW;CNwC;kBOE;CPkB;2BQE,wBR;CSO;0BCU;aDG,EE;aFG;CTG;sBYI;sBCiB,qBD;qBEC,qDF;oBGM;KHmB;sCIC;oCPC;SOS;iCCE;SDY;YPU;aOuB;YPC,kBO;KJG;qEMK,gCC;SDE,CN;yCHgB;KGc;yCQQ;mCCsB;SDK;4CEM;SFE;6BGC;SHM;+BIgB;qBJI;gFKyF;6BLK;KRc;IckB;KdE;uCeG;KfQ;uCeE;6BCM;SDiB;elBqB;SkBI;KfC;uCeI;QEE;SFU;QGC;SHS;elBE;SkBK;KfC;QmByC;SnBG;QoBC;SpBG;QqBC;SrBG;QsBC;StBG;CZE;OmCwB,uCnC;OmCI,wCnC;OmCI,6CnC"}},"type":"js/module"}]}