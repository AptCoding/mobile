{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // example input: 31323334\n  // output: [49, 50, 51, 52 ]\n  // unexpected input: empty string, non-hex characters, odd length\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.asciiToHexString = asciiToHexString;\n  exports.binaryToHexString = binaryToHexString;\n  exports.byteArrayToAsciiString = void 0;\n  exports.byteArrayToHexString = byteArrayToHexString;\n  exports.converter = void 0;\n  exports.getCrc16ModbusAscii = getCrc16ModbusAscii;\n  exports.hexStringToAscii = hexStringToAscii;\n  exports.hexStringToByteArray = hexStringToByteArray;\n  exports.hexToNumberInlittleEndian = hexToNumberInlittleEndian;\n  exports.numToLittleEndianHex = numToLittleEndianHex;\n  function hexStringToByteArray(hexString) {\n    if (typeof hexString !== 'string' || hexString.length % 2 !== 0 || !hexString) {\n      throw new Error('Invalid hex string');\n    }\n    var bytes = new Uint8Array(hexString.length / 2);\n    for (var i = 0; i < hexString.length; i += 2) {\n      bytes[i / 2] = parseInt(hexString.substring(i, i + 2), 16);\n    }\n    return bytes;\n  }\n\n  // example input: 31323334\n  // output: \"1234\"\n  // unexpected input: odd length, non-hex characters\n  function hexStringToAscii(hexString) {\n    if (typeof hexString !== 'string' || !/^[0-9a-fA-F]*$/.test(hexString) || hexString.length % 2 !== 0) {\n      throw new Error('Invalid hex string');\n    }\n    var asciiString = '';\n    for (var i = 0; i < hexString.length; i += 2) {\n      var hexPair = hexString.substring(i, i + 2);\n      var asciiChar = String.fromCharCode(parseInt(hexPair, 16));\n      asciiString += asciiChar;\n    }\n    return asciiString;\n  }\n\n  // example input: \"ACC0161RLC01_V1.1.5\"\n  // output: 41434330313631524c4330315f56312e312e35\n  function asciiToHexString(asciiString) {\n    // eslint-disable-next-line no-control-regex\n    if (typeof asciiString !== 'string' || !/^[\\x00-\\x7F]*$/.test(asciiString)) {\n      throw new Error('Invalid ASCII string');\n    }\n    var hexString = '';\n    for (var i = 0; i < asciiString.length; i++) {\n      var hex = asciiString.charCodeAt(i).toString(16);\n      hexString += hex.padStart(2, '0');\n    }\n    return hexString;\n  }\n\n  // convert binary file content to hex string\n  function binaryToHexString(binaryData) {\n    return Array.from(binaryData, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  // example input: [49, 50, 51, 52 ]\n  // output: \"31323334\"\n  function byteArrayToHexString(byteArray) {\n    return Array.from(byteArray, byte => ('0' + (byte & 0xff).toString(16)).slice(-2)).join('');\n  }\n\n  // example input: [49, 50, 51, 52 ]\n  // output: \"1234\"\n  var byteArrayToAsciiString = byteArray => {\n    return String.fromCharCode(...byteArray);\n  };\n\n  // reference: https://www.modbustools.com/modbus_crc16.html\n  // but it is in little-endian mode:\n  exports.byteArrayToAsciiString = byteArrayToAsciiString;\n  function getCrc16ModbusAscii(input) {\n    var crc16 = 0xffff;\n    if (!input) throw new Error('Invalid input');\n    for (var i = 0; i < input.length; i += 2) {\n      var byte = parseInt(input.substring(i, i + 2), 16);\n      crc16 ^= byte;\n      for (var j = 0; j < 8; j++) {\n        if (crc16 & 1) {\n          crc16 = crc16 >> 1 & 0x7fff ^ 0xa001;\n        } else {\n          crc16 = crc16 >> 1 & 0x7fff;\n        }\n      }\n    }\n    var lowByte = crc16 & 0xff;\n    var highByte = crc16 >> 8 & 0xff;\n    return lowByte.toString(16).padStart(2, '0') + highByte.toString(16).padStart(2, '0');\n  }\n\n  // e.g. input: 517560 output: b8e50700\n  function numToLittleEndianHex(num) {\n    var byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    // Convert the number to a hexadecimal string\n    var hexString = num.toString(16);\n\n    // Ensure the hexadecimal string has an even length\n    if (hexString.length % 2 !== 0) {\n      hexString = '0' + hexString;\n    }\n\n    // Pad the hexadecimal string to the desired byte size\n    while (hexString.length < byteSize * 2) {\n      hexString = '00' + hexString;\n    }\n\n    // Split the hexadecimal string into byte pairs\n    var bytePairs = hexString.match(/.{1,2}/g);\n    if (!bytePairs) {\n      throw new Error('Invalid hex string');\n    }\n\n    // Reverse the byte pairs to convert to little-endian\n    var littleEndianHex = bytePairs.reverse().join('');\n    return littleEndianHex;\n  }\n\n  // e.g. input: b8e50700 output: 517560\n  function hexToNumberInlittleEndian(hexString) {\n    // Split the hexadecimal string into byte pairs\n    var bytePairs = hexString.match(/.{1,2}/g);\n    if (!bytePairs) {\n      throw new Error('Invalid hex string');\n    }\n\n    // Reverse the byte pairs to convert from little-endian to big-endian\n    var bigEndianHex = bytePairs.reverse().join('');\n\n    // Convert the big-endian hexadecimal string to a decimal number\n    return parseInt(bigEndianHex, 16);\n  }\n  var converter = exports.converter = {\n    hexStringToByteArray,\n    hexStringToAscii,\n    asciiToHexString,\n    binaryToHexString,\n    byteArrayToHexString,\n    byteArrayToAsciiString,\n    getCrc16ModbusAscii,\n    numToLittleEndianHex,\n    hexToNumberInlittleEndian\n  };\n});","lineCount":153,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"value"],[8,9,5,0],[9,2,5,0],[10,2,5,0,"exports"],[10,9,5,0],[10,10,5,0,"asciiToHexString"],[10,26,5,0],[10,29,5,0,"asciiToHexString"],[10,45,5,0],[11,2,5,0,"exports"],[11,9,5,0],[11,10,5,0,"binaryToHexString"],[11,27,5,0],[11,30,5,0,"binaryToHexString"],[11,47,5,0],[12,2,5,0,"exports"],[12,9,5,0],[12,10,5,0,"byteArrayToAsciiString"],[12,32,5,0],[13,2,5,0,"exports"],[13,9,5,0],[13,10,5,0,"byteArrayToHexString"],[13,30,5,0],[13,33,5,0,"byteArrayToHexString"],[13,53,5,0],[14,2,5,0,"exports"],[14,9,5,0],[14,10,5,0,"converter"],[14,19,5,0],[15,2,5,0,"exports"],[15,9,5,0],[15,10,5,0,"getCrc16ModbusAscii"],[15,29,5,0],[15,32,5,0,"getCrc16ModbusAscii"],[15,51,5,0],[16,2,5,0,"exports"],[16,9,5,0],[16,10,5,0,"hexStringToAscii"],[16,26,5,0],[16,29,5,0,"hexStringToAscii"],[16,45,5,0],[17,2,5,0,"exports"],[17,9,5,0],[17,10,5,0,"hexStringToByteArray"],[17,30,5,0],[17,33,5,0,"hexStringToByteArray"],[17,53,5,0],[18,2,5,0,"exports"],[18,9,5,0],[18,10,5,0,"hexToNumberInlittleEndian"],[18,35,5,0],[18,38,5,0,"hexToNumberInlittleEndian"],[18,63,5,0],[19,2,5,0,"exports"],[19,9,5,0],[19,10,5,0,"numToLittleEndianHex"],[19,30,5,0],[19,33,5,0,"numToLittleEndianHex"],[19,53,5,0],[20,2,6,7],[20,11,6,16,"hexStringToByteArray"],[20,31,6,36,"hexStringToByteArray"],[20,32,6,37,"hexString"],[20,41,6,46],[20,43,6,48],[21,4,7,2],[21,8,7,6],[21,15,7,13,"hexString"],[21,24,7,22],[21,29,7,27],[21,37,7,35],[21,41,7,39,"hexString"],[21,50,7,48],[21,51,7,49,"length"],[21,57,7,55],[21,60,7,58],[21,61,7,59],[21,66,7,64],[21,67,7,65],[21,71,7,69],[21,72,7,70,"hexString"],[21,81,7,79],[21,83,7,81],[22,6,8,4],[22,12,8,10],[22,16,8,14,"Error"],[22,21,8,19],[22,22,8,20],[22,42,8,40],[22,43,8,41],[23,4,9,2],[24,4,10,2],[24,8,10,8,"bytes"],[24,13,10,13],[24,16,10,16],[24,20,10,20,"Uint8Array"],[24,30,10,30],[24,31,10,31,"hexString"],[24,40,10,40],[24,41,10,41,"length"],[24,47,10,47],[24,50,10,50],[24,51,10,51],[24,52,10,52],[25,4,11,2],[25,9,11,7],[25,13,11,11,"i"],[25,14,11,12],[25,17,11,15],[25,18,11,16],[25,20,11,18,"i"],[25,21,11,19],[25,24,11,22,"hexString"],[25,33,11,31],[25,34,11,32,"length"],[25,40,11,38],[25,42,11,40,"i"],[25,43,11,41],[25,47,11,45],[25,48,11,46],[25,50,11,48],[26,6,12,4,"bytes"],[26,11,12,9],[26,12,12,10,"i"],[26,13,12,11],[26,16,12,14],[26,17,12,15],[26,18,12,16],[26,21,12,19,"parseInt"],[26,29,12,27],[26,30,12,28,"hexString"],[26,39,12,37],[26,40,12,38,"substring"],[26,49,12,47],[26,50,12,48,"i"],[26,51,12,49],[26,53,12,51,"i"],[26,54,12,52],[26,57,12,55],[26,58,12,56],[26,59,12,57],[26,61,12,59],[26,63,12,61],[26,64,12,62],[27,4,13,2],[28,4,14,2],[28,11,14,9,"bytes"],[28,16,14,14],[29,2,15,0],[31,2,17,0],[32,2,18,0],[33,2,19,0],[34,2,20,7],[34,11,20,16,"hexStringToAscii"],[34,27,20,32,"hexStringToAscii"],[34,28,20,33,"hexString"],[34,37,20,42],[34,39,20,44],[35,4,21,2],[35,8,21,6],[35,15,21,13,"hexString"],[35,24,21,22],[35,29,21,27],[35,37,21,35],[35,41,21,39],[35,42,21,40],[35,58,21,56],[35,59,21,57,"test"],[35,63,21,61],[35,64,21,62,"hexString"],[35,73,21,71],[35,74,21,72],[35,78,21,76,"hexString"],[35,87,21,85],[35,88,21,86,"length"],[35,94,21,92],[35,97,21,95],[35,98,21,96],[35,103,21,101],[35,104,21,102],[35,106,21,104],[36,6,22,4],[36,12,22,10],[36,16,22,14,"Error"],[36,21,22,19],[36,22,22,20],[36,42,22,40],[36,43,22,41],[37,4,23,2],[38,4,24,2],[38,8,24,6,"asciiString"],[38,19,24,17],[38,22,24,20],[38,24,24,22],[39,4,25,2],[39,9,25,7],[39,13,25,11,"i"],[39,14,25,12],[39,17,25,15],[39,18,25,16],[39,20,25,18,"i"],[39,21,25,19],[39,24,25,22,"hexString"],[39,33,25,31],[39,34,25,32,"length"],[39,40,25,38],[39,42,25,40,"i"],[39,43,25,41],[39,47,25,45],[39,48,25,46],[39,50,25,48],[40,6,26,4],[40,10,26,10,"hexPair"],[40,17,26,17],[40,20,26,20,"hexString"],[40,29,26,29],[40,30,26,30,"substring"],[40,39,26,39],[40,40,26,40,"i"],[40,41,26,41],[40,43,26,43,"i"],[40,44,26,44],[40,47,26,47],[40,48,26,48],[40,49,26,49],[41,6,27,4],[41,10,27,10,"asciiChar"],[41,19,27,19],[41,22,27,22,"String"],[41,28,27,28],[41,29,27,29,"fromCharCode"],[41,41,27,41],[41,42,27,42,"parseInt"],[41,50,27,50],[41,51,27,51,"hexPair"],[41,58,27,58],[41,60,27,60],[41,62,27,62],[41,63,27,63],[41,64,27,64],[42,6,28,4,"asciiString"],[42,17,28,15],[42,21,28,19,"asciiChar"],[42,30,28,28],[43,4,29,2],[44,4,30,2],[44,11,30,9,"asciiString"],[44,22,30,20],[45,2,31,0],[47,2,33,0],[48,2,34,0],[49,2,35,7],[49,11,35,16,"asciiToHexString"],[49,27,35,32,"asciiToHexString"],[49,28,35,33,"asciiString"],[49,39,35,44],[49,41,35,46],[50,4,36,2],[51,4,37,2],[51,8,37,6],[51,15,37,13,"asciiString"],[51,26,37,24],[51,31,37,29],[51,39,37,37],[51,43,37,41],[51,44,37,42],[51,60,37,58],[51,61,37,59,"test"],[51,65,37,63],[51,66,37,64,"asciiString"],[51,77,37,75],[51,78,37,76],[51,80,37,78],[52,6,38,4],[52,12,38,10],[52,16,38,14,"Error"],[52,21,38,19],[52,22,38,20],[52,44,38,42],[52,45,38,43],[53,4,39,2],[54,4,40,2],[54,8,40,6,"hexString"],[54,17,40,15],[54,20,40,18],[54,22,40,20],[55,4,41,2],[55,9,41,7],[55,13,41,11,"i"],[55,14,41,12],[55,17,41,15],[55,18,41,16],[55,20,41,18,"i"],[55,21,41,19],[55,24,41,22,"asciiString"],[55,35,41,33],[55,36,41,34,"length"],[55,42,41,40],[55,44,41,42,"i"],[55,45,41,43],[55,47,41,45],[55,49,41,47],[56,6,42,4],[56,10,42,10,"hex"],[56,13,42,13],[56,16,42,16,"asciiString"],[56,27,42,27],[56,28,42,28,"charCodeAt"],[56,38,42,38],[56,39,42,39,"i"],[56,40,42,40],[56,41,42,41],[56,42,42,42,"toString"],[56,50,42,50],[56,51,42,51],[56,53,42,53],[56,54,42,54],[57,6,43,4,"hexString"],[57,15,43,13],[57,19,43,17,"hex"],[57,22,43,20],[57,23,43,21,"padStart"],[57,31,43,29],[57,32,43,30],[57,33,43,31],[57,35,43,33],[57,38,43,36],[57,39,43,37],[58,4,44,2],[59,4,45,2],[59,11,45,9,"hexString"],[59,20,45,18],[60,2,46,0],[62,2,48,0],[63,2,49,7],[63,11,49,16,"binaryToHexString"],[63,28,49,33,"binaryToHexString"],[63,29,49,34,"binaryData"],[63,39,49,44],[63,41,49,46],[64,4,50,2],[64,11,50,9,"Array"],[64,16,50,14],[64,17,50,15,"from"],[64,21,50,19],[64,22,50,20,"binaryData"],[64,32,50,30],[64,34,50,32,"byte"],[64,38,50,36],[64,42,50,40,"byte"],[64,46,50,44],[64,47,50,45,"toString"],[64,55,50,53],[64,56,50,54],[64,58,50,56],[64,59,50,57],[64,60,50,58,"padStart"],[64,68,50,66],[64,69,50,67],[64,70,50,68],[64,72,50,70],[64,75,50,73],[64,76,50,74],[64,77,50,75],[64,78,50,76,"join"],[64,82,50,80],[64,83,50,81],[64,85,50,83],[64,86,50,84],[65,2,51,0],[67,2,53,0],[68,2,54,0],[69,2,55,7],[69,11,55,16,"byteArrayToHexString"],[69,31,55,36,"byteArrayToHexString"],[69,32,55,37,"byteArray"],[69,41,55,46],[69,43,55,48],[70,4,56,2],[70,11,56,9,"Array"],[70,16,56,14],[70,17,56,15,"from"],[70,21,56,19],[70,22,56,20,"byteArray"],[70,31,56,29],[70,33,56,31,"byte"],[70,37,56,35],[70,41,56,39],[70,42,56,40],[70,45,56,43],[70,48,56,46],[70,49,56,47,"byte"],[70,53,56,51],[70,56,56,54],[70,60,56,58],[70,62,56,60,"toString"],[70,70,56,68],[70,71,56,69],[70,73,56,71],[70,74,56,72],[70,76,56,74,"slice"],[70,81,56,79],[70,82,56,80],[70,83,56,81],[70,84,56,82],[70,85,56,83],[70,86,56,84],[70,87,56,85,"join"],[70,91,56,89],[70,92,56,90],[70,94,56,92],[70,95,56,93],[71,2,57,0],[73,2,59,0],[74,2,60,0],[75,2,61,7],[75,6,61,13,"byteArrayToAsciiString"],[75,28,61,35],[75,31,61,38,"byteArray"],[75,40,61,47],[75,44,61,51],[76,4,62,2],[76,11,62,9,"String"],[76,17,62,15],[76,18,62,16,"fromCharCode"],[76,30,62,28],[76,31,62,29],[76,34,62,32,"byteArray"],[76,43,62,41],[76,44,62,42],[77,2,63,0],[77,3,63,1],[79,2,65,0],[80,2,66,0],[81,2,66,0,"exports"],[81,9,66,0],[81,10,66,0,"byteArrayToAsciiString"],[81,32,66,0],[81,35,66,0,"byteArrayToAsciiString"],[81,57,66,0],[82,2,67,7],[82,11,67,16,"getCrc16ModbusAscii"],[82,30,67,35,"getCrc16ModbusAscii"],[82,31,67,36,"input"],[82,36,67,41],[82,38,67,43],[83,4,68,2],[83,8,68,6,"crc16"],[83,13,68,11],[83,16,68,14],[83,22,68,20],[84,4,69,2],[84,8,69,6],[84,9,69,7,"input"],[84,14,69,12],[84,16,69,14],[84,22,69,20],[84,26,69,24,"Error"],[84,31,69,29],[84,32,69,30],[84,47,69,45],[84,48,69,46],[85,4,70,2],[85,9,70,7],[85,13,70,11,"i"],[85,14,70,12],[85,17,70,15],[85,18,70,16],[85,20,70,18,"i"],[85,21,70,19],[85,24,70,22,"input"],[85,29,70,27],[85,30,70,28,"length"],[85,36,70,34],[85,38,70,36,"i"],[85,39,70,37],[85,43,70,41],[85,44,70,42],[85,46,70,44],[86,6,71,4],[86,10,71,10,"byte"],[86,14,71,14],[86,17,71,17,"parseInt"],[86,25,71,25],[86,26,71,26,"input"],[86,31,71,31],[86,32,71,32,"substring"],[86,41,71,41],[86,42,71,42,"i"],[86,43,71,43],[86,45,71,45,"i"],[86,46,71,46],[86,49,71,49],[86,50,71,50],[86,51,71,51],[86,53,71,53],[86,55,71,55],[86,56,71,56],[87,6,72,4,"crc16"],[87,11,72,9],[87,15,72,13,"byte"],[87,19,72,17],[88,6,73,4],[88,11,73,9],[88,15,73,13,"j"],[88,16,73,14],[88,19,73,17],[88,20,73,18],[88,22,73,20,"j"],[88,23,73,21],[88,26,73,24],[88,27,73,25],[88,29,73,27,"j"],[88,30,73,28],[88,32,73,30],[88,34,73,32],[89,8,74,6],[89,12,74,10,"crc16"],[89,17,74,15],[89,20,74,18],[89,21,74,19],[89,23,74,21],[90,10,75,8,"crc16"],[90,15,75,13],[90,18,75,16,"crc16"],[90,23,75,21],[90,27,75,25],[90,28,75,26],[90,31,75,29],[90,37,75,35],[90,40,75,38],[90,46,75,44],[91,8,76,6],[91,9,76,7],[91,15,76,13],[92,10,77,8,"crc16"],[92,15,77,13],[92,18,77,16,"crc16"],[92,23,77,21],[92,27,77,25],[92,28,77,26],[92,31,77,29],[92,37,77,35],[93,8,78,6],[94,6,79,4],[95,4,80,2],[96,4,81,2],[96,8,81,8,"lowByte"],[96,15,81,15],[96,18,81,18,"crc16"],[96,23,81,23],[96,26,81,26],[96,30,81,30],[97,4,82,2],[97,8,82,8,"highByte"],[97,16,82,16],[97,19,82,19,"crc16"],[97,24,82,24],[97,28,82,28],[97,29,82,29],[97,32,82,32],[97,36,82,36],[98,4,83,2],[98,11,83,9,"lowByte"],[98,18,83,16],[98,19,83,17,"toString"],[98,27,83,25],[98,28,83,26],[98,30,83,28],[98,31,83,29],[98,32,83,30,"padStart"],[98,40,83,38],[98,41,83,39],[98,42,83,40],[98,44,83,42],[98,47,83,45],[98,48,83,46],[98,51,83,49,"highByte"],[98,59,83,57],[98,60,83,58,"toString"],[98,68,83,66],[98,69,83,67],[98,71,83,69],[98,72,83,70],[98,73,83,71,"padStart"],[98,81,83,79],[98,82,83,80],[98,83,83,81],[98,85,83,83],[98,88,83,86],[98,89,83,87],[99,2,84,0],[101,2,86,0],[102,2,87,7],[102,11,87,16,"numToLittleEndianHex"],[102,31,87,36,"numToLittleEndianHex"],[102,32,87,37,"num"],[102,35,87,40],[102,37,87,56],[103,4,87,56],[103,8,87,42,"byteSize"],[103,16,87,50],[103,19,87,50,"arguments"],[103,28,87,50],[103,29,87,50,"length"],[103,35,87,50],[103,43,87,50,"arguments"],[103,52,87,50],[103,60,87,50,"undefined"],[103,69,87,50],[103,72,87,50,"arguments"],[103,81,87,50],[103,87,87,53],[103,88,87,54],[104,4,88,2],[105,4,89,2],[105,8,89,6,"hexString"],[105,17,89,15],[105,20,89,18,"num"],[105,23,89,21],[105,24,89,22,"toString"],[105,32,89,30],[105,33,89,31],[105,35,89,33],[105,36,89,34],[107,4,91,2],[108,4,92,2],[108,8,92,6,"hexString"],[108,17,92,15],[108,18,92,16,"length"],[108,24,92,22],[108,27,92,25],[108,28,92,26],[108,33,92,31],[108,34,92,32],[108,36,92,34],[109,6,93,4,"hexString"],[109,15,93,13],[109,18,93,16],[109,21,93,19],[109,24,93,22,"hexString"],[109,33,93,31],[110,4,94,2],[112,4,96,2],[113,4,97,2],[113,11,97,9,"hexString"],[113,20,97,18],[113,21,97,19,"length"],[113,27,97,25],[113,30,97,28,"byteSize"],[113,38,97,36],[113,41,97,39],[113,42,97,40],[113,44,97,42],[114,6,98,4,"hexString"],[114,15,98,13],[114,18,98,16],[114,22,98,20],[114,25,98,23,"hexString"],[114,34,98,32],[115,4,99,2],[117,4,101,2],[118,4,102,2],[118,8,102,8,"bytePairs"],[118,17,102,17],[118,20,102,20,"hexString"],[118,29,102,29],[118,30,102,30,"match"],[118,35,102,35],[118,36,102,36],[118,45,102,45],[118,46,102,46],[119,4,103,2],[119,8,103,6],[119,9,103,7,"bytePairs"],[119,18,103,16],[119,20,103,18],[120,6,104,4],[120,12,104,10],[120,16,104,14,"Error"],[120,21,104,19],[120,22,104,20],[120,42,104,40],[120,43,104,41],[121,4,105,2],[123,4,107,2],[124,4,108,2],[124,8,108,8,"littleEndianHex"],[124,23,108,23],[124,26,108,26,"bytePairs"],[124,35,108,35],[124,36,108,36,"reverse"],[124,43,108,43],[124,44,108,44],[124,45,108,45],[124,46,108,46,"join"],[124,50,108,50],[124,51,108,51],[124,53,108,53],[124,54,108,54],[125,4,109,2],[125,11,109,9,"littleEndianHex"],[125,26,109,24],[126,2,110,0],[128,2,112,0],[129,2,113,7],[129,11,113,16,"hexToNumberInlittleEndian"],[129,36,113,41,"hexToNumberInlittleEndian"],[129,37,113,42,"hexString"],[129,46,113,51],[129,48,113,53],[130,4,114,2],[131,4,115,2],[131,8,115,8,"bytePairs"],[131,17,115,17],[131,20,115,20,"hexString"],[131,29,115,29],[131,30,115,30,"match"],[131,35,115,35],[131,36,115,36],[131,45,115,45],[131,46,115,46],[132,4,116,2],[132,8,116,6],[132,9,116,7,"bytePairs"],[132,18,116,16],[132,20,116,18],[133,6,117,4],[133,12,117,10],[133,16,117,14,"Error"],[133,21,117,19],[133,22,117,20],[133,42,117,40],[133,43,117,41],[134,4,118,2],[136,4,120,2],[137,4,121,2],[137,8,121,8,"bigEndianHex"],[137,20,121,20],[137,23,121,23,"bytePairs"],[137,32,121,32],[137,33,121,33,"reverse"],[137,40,121,40],[137,41,121,41],[137,42,121,42],[137,43,121,43,"join"],[137,47,121,47],[137,48,121,48],[137,50,121,50],[137,51,121,51],[139,4,123,2],[140,4,124,2],[140,11,124,9,"parseInt"],[140,19,124,17],[140,20,124,18,"bigEndianHex"],[140,32,124,30],[140,34,124,32],[140,36,124,34],[140,37,124,35],[141,2,125,0],[142,2,126,7],[142,6,126,13,"converter"],[142,15,126,22],[142,18,126,22,"exports"],[142,25,126,22],[142,26,126,22,"converter"],[142,35,126,22],[142,38,126,25],[143,4,127,2,"hexStringToByteArray"],[143,24,127,22],[144,4,128,2,"hexStringToAscii"],[144,20,128,18],[145,4,129,2,"asciiToHexString"],[145,20,129,18],[146,4,130,2,"binaryToHexString"],[146,21,130,19],[147,4,131,2,"byteArrayToHexString"],[147,24,131,22],[148,4,132,2,"byteArrayToAsciiString"],[148,26,132,24],[149,4,133,2,"getCrc16ModbusAscii"],[149,23,133,21],[150,4,134,2,"numToLittleEndianHex"],[150,24,134,22],[151,4,135,2,"hexToNumberInlittleEndian"],[152,2,136,0],[152,3,136,1],[153,0,136,2],[153,3]],"functionMap":{"names":["<global>","hexStringToByteArray","hexStringToAscii","asciiToHexString","binaryToHexString","Array.from$argument_1","byteArrayToHexString","byteArrayToAsciiString","getCrc16ModbusAscii","numToLittleEndianHex","hexToNumberInlittleEndian"],"mappings":"AAA;OCK;CDS;OEK;CFW;OGI;CHW;OIG;gCCC,0CD;CJC;OMI;+BDC,oDC;CNC;sCOI;CPE;OQI;CRiB;OSG;CTuB;OUG;CVY"}},"type":"js/module"}]}