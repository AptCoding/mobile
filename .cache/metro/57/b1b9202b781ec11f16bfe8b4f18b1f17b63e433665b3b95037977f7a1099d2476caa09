{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":76,"column":55,"index":3747}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":76,"column":55,"index":3747}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"./NotificationsEmitter","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":156,"index":207}}],"key":"qDo41+rcVvd1q2cm07M11viNWYQ="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useLastNotificationResponse;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = require(_dependencyMap[2], \"react\");\n  var _NotificationsEmitter = require(_dependencyMap[3], \"./NotificationsEmitter\");\n  /**\n   * A React hook which returns the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n   *\n   * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n   *\n   * @return The hook may return one of these three types/values:\n   * - `undefined` - until we're sure of what to return,\n   * - `null` - if no notification response has been received yet,\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n   *\n   * @example\n   * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n   * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n   * ```jsx\n   * import * as Notifications from 'expo-notifications';\n   * import { Linking } from 'react-native';\n   *\n   * export default function App() {\n   *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n   *   React.useEffect(() => {\n   *     if (\n   *       lastNotificationResponse &&\n   *       lastNotificationResponse.notification.request.content.data.url &&\n   *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n   *     ) {\n   *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n   *     }\n   *   }, [lastNotificationResponse]);\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function useLastNotificationResponse() {\n    var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      lastNotificationResponse = _useState2[0],\n      setLastNotificationResponse = _useState2[1];\n    // Pure function that returns the new response if it is different from the previous,\n    // otherwise return the previous response\n    var newResponseIfNeeded = (prevResponse, newResponse) => {\n      // If the new response is undefined or null, no need for update\n      if (!newResponse) {\n        return prevResponse;\n      }\n      // If the previous response is undefined or null and the new response is not, we should update\n      if (!prevResponse) {\n        return newResponse;\n      }\n      return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n    };\n    // useLayoutEffect ensures the listener is registered as soon as possible\n    (0, _react.useLayoutEffect)(() => {\n      // Get the last response first, in case it was set earlier (even in native code on startup)\n      // before this renders\n      (0, _NotificationsEmitter.getLastNotificationResponseAsync)?.().then(response => setLastNotificationResponse(prevResponse => newResponseIfNeeded(prevResponse, response)));\n      // Set up listener for responses that come in, and set the last response if needed\n      var subscription = (0, _NotificationsEmitter.addNotificationResponseReceivedListener)(response => setLastNotificationResponse(prevResponse => newResponseIfNeeded(prevResponse, response)));\n      var clearResponseSubscription = (0, _NotificationsEmitter.addNotificationResponseClearedListener)(() => {\n        setLastNotificationResponse(undefined);\n      });\n      return () => {\n        subscription.remove();\n        clearResponseSubscription.remove();\n      };\n    }, []);\n    return lastNotificationResponse;\n  }\n});","lineCount":83,"map":[[8,2,1,0],[8,6,1,0,"_react"],[8,12,1,0],[8,15,1,0,"require"],[8,22,1,0],[8,23,1,0,"_dependencyMap"],[8,37,1,0],[9,2,2,0],[9,6,2,0,"_NotificationsEmitter"],[9,27,2,0],[9,30,2,0,"require"],[9,37,2,0],[9,38,2,0,"_dependencyMap"],[9,52,2,0],[10,2,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,2,41,15],[48,11,41,24,"useLastNotificationResponse"],[48,38,41,51,"useLastNotificationResponse"],[48,39,41,51],[48,41,41,54],[49,4,42,4],[49,8,42,4,"_useState"],[49,17,42,4],[49,20,42,68],[49,24,42,68,"useState"],[49,39,42,76],[49,41,42,77,"undefined"],[49,50,42,86],[49,51,42,87],[50,6,42,87,"_useState2"],[50,16,42,87],[50,23,42,87,"_slicedToArray2"],[50,38,42,87],[50,39,42,87,"default"],[50,46,42,87],[50,48,42,87,"_useState"],[50,57,42,87],[51,6,42,11,"lastNotificationResponse"],[51,30,42,35],[51,33,42,35,"_useState2"],[51,43,42,35],[52,6,42,37,"setLastNotificationResponse"],[52,33,42,64],[52,36,42,64,"_useState2"],[52,46,42,64],[53,4,43,4],[54,4,44,4],[55,4,45,4],[55,8,45,10,"newResponseIfNeeded"],[55,27,45,29],[55,30,45,32,"newResponseIfNeeded"],[55,31,45,33,"prevResponse"],[55,43,45,45],[55,45,45,47,"newResponse"],[55,56,45,58],[55,61,45,63],[56,6,46,8],[57,6,47,8],[57,10,47,12],[57,11,47,13,"newResponse"],[57,22,47,24],[57,24,47,26],[58,8,48,12],[58,15,48,19,"prevResponse"],[58,27,48,31],[59,6,49,8],[60,6,50,8],[61,6,51,8],[61,10,51,12],[61,11,51,13,"prevResponse"],[61,23,51,25],[61,25,51,27],[62,8,52,12],[62,15,52,19,"newResponse"],[62,26,52,30],[63,6,53,8],[64,6,54,8],[64,13,54,15,"prevResponse"],[64,25,54,27],[64,26,54,28,"notification"],[64,38,54,40],[64,39,54,41,"request"],[64,46,54,48],[64,47,54,49,"identifier"],[64,57,54,59],[64,62,55,12,"newResponse"],[64,73,55,23],[64,74,55,24,"notification"],[64,86,55,36],[64,87,55,37,"request"],[64,94,55,44],[64,95,55,45,"identifier"],[64,105,55,55],[64,108,56,14,"newResponse"],[64,119,56,25],[64,122,57,14,"prevResponse"],[64,134,57,26],[65,4,58,4],[65,5,58,5],[66,4,59,4],[67,4,60,4],[67,8,60,4,"useLayoutEffect"],[67,30,60,19],[67,32,60,20],[67,38,60,26],[68,6,61,8],[69,6,62,8],[70,6,63,8],[70,10,63,8,"getLastNotificationResponseAsync"],[70,64,63,40],[70,68,63,43],[70,69,63,44],[70,70,63,45,"then"],[70,74,63,49],[70,75,63,51,"response"],[70,83,63,59],[70,87,63,64,"setLastNotificationResponse"],[70,114,63,91],[70,115,63,93,"prevResponse"],[70,127,63,105],[70,131,63,110,"newResponseIfNeeded"],[70,150,63,129],[70,151,63,130,"prevResponse"],[70,163,63,142],[70,165,63,144,"response"],[70,173,63,152],[70,174,63,153],[70,175,63,154],[70,176,63,155],[71,6,64,8],[72,6,65,8],[72,10,65,14,"subscription"],[72,22,65,26],[72,25,65,29],[72,29,65,29,"addNotificationResponseReceivedListener"],[72,90,65,68],[72,92,65,70,"response"],[72,100,65,78],[72,104,65,83,"setLastNotificationResponse"],[72,131,65,110],[72,132,65,112,"prevResponse"],[72,144,65,124],[72,148,65,129,"newResponseIfNeeded"],[72,167,65,148],[72,168,65,149,"prevResponse"],[72,180,65,161],[72,182,65,163,"response"],[72,190,65,171],[72,191,65,172],[72,192,65,173],[72,193,65,174],[73,6,66,8],[73,10,66,14,"clearResponseSubscription"],[73,35,66,39],[73,38,66,42],[73,42,66,42,"addNotificationResponseClearedListener"],[73,102,66,80],[73,104,66,81],[73,110,66,87],[74,8,67,12,"setLastNotificationResponse"],[74,35,67,39],[74,36,67,40,"undefined"],[74,45,67,49],[74,46,67,50],[75,6,68,8],[75,7,68,9],[75,8,68,10],[76,6,69,8],[76,13,69,15],[76,19,69,21],[77,8,70,12,"subscription"],[77,20,70,24],[77,21,70,25,"remove"],[77,27,70,31],[77,28,70,32],[77,29,70,33],[78,8,71,12,"clearResponseSubscription"],[78,33,71,37],[78,34,71,38,"remove"],[78,40,71,44],[78,41,71,45],[78,42,71,46],[79,6,72,8],[79,7,72,9],[80,4,73,4],[80,5,73,5],[80,7,73,7],[80,9,73,9],[80,10,73,10],[81,4,74,4],[81,11,74,11,"lastNotificationResponse"],[81,35,74,35],[82,2,75,0],[83,0,75,1],[83,3]],"functionMap":{"names":["<global>","useLastNotificationResponse","newResponseIfNeeded","useLayoutEffect$argument_0","getLastNotificationResponseAsync.then$argument_0","setLastNotificationResponse$argument_0","addNotificationResponseReceivedListener$argument_0","addNotificationResponseClearedListener$argument_0","<anonymous>"],"mappings":"AAA;eCwC;gCCI;KDa;oBEE;kDCG,0CC,6DD,CD;qEGE,0CD,6DC,CH;iFIC;SJE;eKC;SLG;KFC;CDE"}},"type":"js/module"}]}