{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":225,"column":0,"index":7778}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":225,"column":0,"index":7778}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"../error/TRPCError.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"9ib1RjUnEdxHK//Di4rQ4LyNNns="}},{"name":"../utils.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":53,"index":105}}],"key":"Fat1H7ILw/aiXtTd5J3KzMpI+dk="}},{"name":"./parseConnectionParams.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":106},"end":{"line":3,"column":78,"index":184}}],"key":"E6ZmZPOi+bBorCLQtt/fZAIdEvE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRequestInfo = getRequestInfo;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _TRPCError = require(_dependencyMap[2], \"../error/TRPCError.mjs\");\n  var _utils = require(_dependencyMap[3], \"../utils.mjs\");\n  var _parseConnectionParams = require(_dependencyMap[4], \"./parseConnectionParams.mjs\");\n  /**\n   * Memoize a function that takes no arguments\n   * @internal\n   */\n  function memo(fn) {\n    var promise = null;\n    var value = _utils.unsetMarker;\n    return {\n      /**\n      * Lazily read the value\n      */\n      read: function () {\n        var _ref = (0, _asyncToGenerator2.default)(function* () {\n          if (value !== _utils.unsetMarker) {\n            return value;\n          }\n          if (promise === null) {\n            // dedupes promises and catches errors\n            promise = fn().catch(cause => {\n              if (cause instanceof _TRPCError.TRPCError) {\n                throw cause;\n              }\n              throw new _TRPCError.TRPCError({\n                code: 'BAD_REQUEST',\n                message: cause instanceof Error ? cause.message : 'Invalid input',\n                cause\n              });\n            });\n          }\n          value = yield promise;\n          promise = null;\n          return value;\n        });\n        return function read() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      /**\n      * Get an already stored result\n      */\n      result: () => {\n        return value !== _utils.unsetMarker ? value : undefined;\n      }\n    };\n  }\n  var jsonContentTypeHandler = {\n    isMatch(req) {\n      return !!req.headers.get('content-type')?.startsWith('application/json');\n    },\n    parse(opts) {\n      var req = opts.req;\n      var isBatchCall = opts.searchParams.get('batch') === '1';\n      var paths = isBatchCall ? opts.path.split(',') : [opts.path];\n      var getInputs = memo(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        var inputs = undefined;\n        if (req.method === 'GET') {\n          var queryInput = opts.searchParams.get('input');\n          if (queryInput) {\n            inputs = JSON.parse(queryInput);\n          }\n        } else {\n          inputs = yield req.json();\n        }\n        if (inputs === undefined) {\n          return {};\n        }\n        if (!isBatchCall) {\n          return {\n            0: opts.router._def._config.transformer.input.deserialize(inputs)\n          };\n        }\n        if (!(0, _utils.isObject)(inputs)) {\n          throw new _TRPCError.TRPCError({\n            code: 'BAD_REQUEST',\n            message: '\"input\" needs to be an object when doing a batch call'\n          });\n        }\n        var acc = {};\n        for (var index of paths.keys()) {\n          var input = inputs[index];\n          if (input !== undefined) {\n            acc[index] = opts.router._def._config.transformer.input.deserialize(input);\n          }\n        }\n        return acc;\n      }));\n      var calls = paths.map((path, index) => {\n        var procedure = opts.router._def.procedures[path] ?? null;\n        return {\n          path,\n          procedure,\n          getRawInput: function () {\n            var _ref3 = (0, _asyncToGenerator2.default)(function* () {\n              var inputs = yield getInputs.read();\n              var input = inputs[index];\n              if (procedure?._def.type === 'subscription') {\n                var lastEventId = opts.headers.get('last-event-id') ?? opts.searchParams.get('lastEventId') ?? opts.searchParams.get('Last-Event-Id');\n                if (lastEventId) {\n                  if ((0, _utils.isObject)(input)) {\n                    input = {\n                      ...input,\n                      lastEventId: lastEventId\n                    };\n                  } else {\n                    input ?? (input = {\n                      lastEventId: lastEventId\n                    });\n                  }\n                }\n              }\n              return input;\n            });\n            return function getRawInput() {\n              return _ref3.apply(this, arguments);\n            };\n          }(),\n          result: () => {\n            return getInputs.result()?.[index];\n          }\n        };\n      });\n      var types = new Set(calls.map(call => call.procedure?._def.type).filter(Boolean));\n      /* istanbul ignore if -- @preserve */\n      if (types.size > 1) {\n        throw new _TRPCError.TRPCError({\n          code: 'BAD_REQUEST',\n          message: `Cannot mix procedure types in call: ${Array.from(types).join(', ')}`\n        });\n      }\n      var type = types.values().next().value ?? 'unknown';\n      var connectionParamsStr = opts.searchParams.get('connectionParams');\n      var info = {\n        isBatchCall,\n        accept: req.headers.get('trpc-accept'),\n        calls,\n        type,\n        connectionParams: connectionParamsStr === null ? null : (0, _parseConnectionParams.parseConnectionParamsFromString)(connectionParamsStr),\n        signal: req.signal\n      };\n      return info;\n    }\n  };\n  var formDataContentTypeHandler = {\n    isMatch(req) {\n      return !!req.headers.get('content-type')?.startsWith('multipart/form-data');\n    },\n    parse(opts) {\n      var req = opts.req;\n      if (req.method !== 'POST') {\n        throw new _TRPCError.TRPCError({\n          code: 'METHOD_NOT_SUPPORTED',\n          message: 'Only POST requests are supported for multipart/form-data requests'\n        });\n      }\n      var getInputs = memo(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        var fd = yield req.formData();\n        return fd;\n      }));\n      return {\n        accept: null,\n        calls: [{\n          path: opts.path,\n          getRawInput: getInputs.read,\n          result: getInputs.result,\n          procedure: opts.router._def.procedures[opts.path] ?? null\n        }],\n        isBatchCall: false,\n        type: 'mutation',\n        connectionParams: null,\n        signal: req.signal\n      };\n    }\n  };\n  var octetStreamContentTypeHandler = {\n    isMatch(req) {\n      return !!req.headers.get('content-type')?.startsWith('application/octet-stream');\n    },\n    parse(opts) {\n      var req = opts.req;\n      if (req.method !== 'POST') {\n        throw new _TRPCError.TRPCError({\n          code: 'METHOD_NOT_SUPPORTED',\n          message: 'Only POST requests are supported for application/octet-stream requests'\n        });\n      }\n      var getInputs = memo(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        return req.body;\n      }));\n      return {\n        calls: [{\n          path: opts.path,\n          getRawInput: getInputs.read,\n          result: getInputs.result,\n          procedure: opts.router._def.procedures[opts.path] ?? null\n        }],\n        isBatchCall: false,\n        accept: null,\n        type: 'mutation',\n        connectionParams: null,\n        signal: req.signal\n      };\n    }\n  };\n  var handlers = [jsonContentTypeHandler, formDataContentTypeHandler, octetStreamContentTypeHandler];\n  function getContentTypeHandler(req) {\n    var handler = handlers.find(handler => handler.isMatch(req));\n    if (handler) {\n      return handler;\n    }\n    if (!handler && req.method === 'GET') {\n      // fallback to JSON for get requests so GET-requests can be opened in browser easily\n      return jsonContentTypeHandler;\n    }\n    throw new _TRPCError.TRPCError({\n      code: 'UNSUPPORTED_MEDIA_TYPE',\n      message: req.headers.has('content-type') ? `Unsupported content-type \"${req.headers.get('content-type')}` : 'Missing content-type header'\n    });\n  }\n  function getRequestInfo(opts) {\n    var handler = getContentTypeHandler(opts.req);\n    return handler.parse(opts);\n  }\n});","lineCount":233,"map":[[8,2,1,0],[8,6,1,0,"_TRPCError"],[8,16,1,0],[8,19,1,0,"require"],[8,26,1,0],[8,27,1,0,"_dependencyMap"],[8,41,1,0],[9,2,2,0],[9,6,2,0,"_utils"],[9,12,2,0],[9,15,2,0,"require"],[9,22,2,0],[9,23,2,0,"_dependencyMap"],[9,37,2,0],[10,2,3,0],[10,6,3,0,"_parseConnectionParams"],[10,28,3,0],[10,31,3,0,"require"],[10,38,3,0],[10,39,3,0,"_dependencyMap"],[10,53,3,0],[11,2,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,2,8,4],[15,11,8,13,"memo"],[15,15,8,17,"memo"],[15,16,8,18,"fn"],[15,18,8,20],[15,20,8,22],[16,4,9,4],[16,8,9,8,"promise"],[16,15,9,15],[16,18,9,18],[16,22,9,22],[17,4,10,4],[17,8,10,8,"value"],[17,13,10,13],[17,16,10,16,"unsetMarker"],[17,34,10,27],[18,4,11,4],[18,11,11,11],[19,6,12,8],[20,0,13,0],[21,0,14,0],[22,6,14,8,"read"],[22,10,14,12],[23,8,14,12],[23,12,14,12,"_ref"],[23,16,14,12],[23,23,14,12,"_asyncToGenerator2"],[23,41,14,12],[23,42,14,12,"default"],[23,49,14,12],[23,51,14,14],[23,64,14,24],[24,10,15,12],[24,14,15,16,"value"],[24,19,15,21],[24,24,15,26,"unsetMarker"],[24,42,15,37],[24,44,15,39],[25,12,16,16],[25,19,16,23,"value"],[25,24,16,28],[26,10,17,12],[27,10,18,12],[27,14,18,16,"promise"],[27,21,18,23],[27,26,18,28],[27,30,18,32],[27,32,18,34],[28,12,19,16],[29,12,20,16,"promise"],[29,19,20,23],[29,22,20,26,"fn"],[29,24,20,28],[29,25,20,29],[29,26,20,30],[29,27,20,31,"catch"],[29,32,20,36],[29,33,20,38,"cause"],[29,38,20,43],[29,42,20,46],[30,14,21,20],[30,18,21,24,"cause"],[30,23,21,29],[30,35,21,41,"TRPCError"],[30,55,21,50],[30,57,21,52],[31,16,22,24],[31,22,22,30,"cause"],[31,27,22,35],[32,14,23,20],[33,14,24,20],[33,20,24,26],[33,24,24,30,"TRPCError"],[33,44,24,39],[33,45,24,40],[34,16,25,24,"code"],[34,20,25,28],[34,22,25,30],[34,35,25,43],[35,16,26,24,"message"],[35,23,26,31],[35,25,26,33,"cause"],[35,30,26,38],[35,42,26,50,"Error"],[35,47,26,55],[35,50,26,58,"cause"],[35,55,26,63],[35,56,26,64,"message"],[35,63,26,71],[35,66,26,74],[35,81,26,89],[36,16,27,24,"cause"],[37,14,28,20],[37,15,28,21],[37,16,28,22],[38,12,29,16],[38,13,29,17],[38,14,29,18],[39,10,30,12],[40,10,31,12,"value"],[40,15,31,17],[40,24,31,26,"promise"],[40,31,31,33],[41,10,32,12,"promise"],[41,17,32,19],[41,20,32,22],[41,24,32,26],[42,10,33,12],[42,17,33,19,"value"],[42,22,33,24],[43,8,34,8],[43,9,34,9],[44,8,34,9],[44,24,14,8,"read"],[44,28,14,12,"read"],[44,29,14,12],[45,10,14,12],[45,17,14,12,"_ref"],[45,21,14,12],[45,22,14,12,"apply"],[45,27,14,12],[45,34,14,12,"arguments"],[45,43,14,12],[46,8,14,12],[47,6,14,12],[47,9,34,9],[48,6,35,8],[49,0,36,0],[50,0,37,0],[51,6,37,8,"result"],[51,12,37,14],[51,14,37,16,"result"],[51,15,37,16],[51,20,37,20],[52,8,38,12],[52,15,38,19,"value"],[52,20,38,24],[52,25,38,29,"unsetMarker"],[52,43,38,40],[52,46,38,43,"value"],[52,51,38,48],[52,54,38,51,"undefined"],[52,63,38,60],[53,6,39,8],[54,4,40,4],[54,5,40,5],[55,2,41,0],[56,2,42,0],[56,6,42,6,"jsonContentTypeHandler"],[56,28,42,28],[56,31,42,31],[57,4,43,4,"isMatch"],[57,11,43,11,"isMatch"],[57,12,43,13,"req"],[57,15,43,16],[57,17,43,18],[58,6,44,8],[58,13,44,15],[58,14,44,16],[58,15,44,17,"req"],[58,18,44,20],[58,19,44,21,"headers"],[58,26,44,28],[58,27,44,29,"get"],[58,30,44,32],[58,31,44,33],[58,45,44,47],[58,46,44,48],[58,48,44,50,"startsWith"],[58,58,44,60],[58,59,44,61],[58,77,44,79],[58,78,44,80],[59,4,45,4],[59,5,45,5],[60,4,46,4,"parse"],[60,9,46,9,"parse"],[60,10,46,11,"opts"],[60,14,46,15],[60,16,46,17],[61,6,47,8],[61,10,47,16,"req"],[61,13,47,19],[61,16,47,24,"opts"],[61,20,47,28],[61,21,47,16,"req"],[61,24,47,19],[62,6,48,8],[62,10,48,14,"isBatchCall"],[62,21,48,25],[62,24,48,28,"opts"],[62,28,48,32],[62,29,48,33,"searchParams"],[62,41,48,45],[62,42,48,46,"get"],[62,45,48,49],[62,46,48,50],[62,53,48,57],[62,54,48,58],[62,59,48,63],[62,62,48,66],[63,6,49,8],[63,10,49,14,"paths"],[63,15,49,19],[63,18,49,22,"isBatchCall"],[63,29,49,33],[63,32,49,36,"opts"],[63,36,49,40],[63,37,49,41,"path"],[63,41,49,45],[63,42,49,46,"split"],[63,47,49,51],[63,48,49,52],[63,51,49,55],[63,52,49,56],[63,55,49,59],[63,56,50,12,"opts"],[63,60,50,16],[63,61,50,17,"path"],[63,65,50,21],[63,66,51,9],[64,6,52,8],[64,10,52,14,"getInputs"],[64,19,52,23],[64,22,52,26,"memo"],[64,26,52,30],[64,44,52,30,"_asyncToGenerator2"],[64,62,52,30],[64,63,52,30,"default"],[64,70,52,30],[64,72,52,31],[64,85,52,41],[65,8,53,12],[65,12,53,16,"inputs"],[65,18,53,22],[65,21,53,25,"undefined"],[65,30,53,34],[66,8,54,12],[66,12,54,16,"req"],[66,15,54,19],[66,16,54,20,"method"],[66,22,54,26],[66,27,54,31],[66,32,54,36],[66,34,54,38],[67,10,55,16],[67,14,55,22,"queryInput"],[67,24,55,32],[67,27,55,35,"opts"],[67,31,55,39],[67,32,55,40,"searchParams"],[67,44,55,52],[67,45,55,53,"get"],[67,48,55,56],[67,49,55,57],[67,56,55,64],[67,57,55,65],[68,10,56,16],[68,14,56,20,"queryInput"],[68,24,56,30],[68,26,56,32],[69,12,57,20,"inputs"],[69,18,57,26],[69,21,57,29,"JSON"],[69,25,57,33],[69,26,57,34,"parse"],[69,31,57,39],[69,32,57,40,"queryInput"],[69,42,57,50],[69,43,57,51],[70,10,58,16],[71,8,59,12],[71,9,59,13],[71,15,59,19],[72,10,60,16,"inputs"],[72,16,60,22],[72,25,60,31,"req"],[72,28,60,34],[72,29,60,35,"json"],[72,33,60,39],[72,34,60,40],[72,35,60,41],[73,8,61,12],[74,8,62,12],[74,12,62,16,"inputs"],[74,18,62,22],[74,23,62,27,"undefined"],[74,32,62,36],[74,34,62,38],[75,10,63,16],[75,17,63,23],[75,18,63,24],[75,19,63,25],[76,8,64,12],[77,8,65,12],[77,12,65,16],[77,13,65,17,"isBatchCall"],[77,24,65,28],[77,26,65,30],[78,10,66,16],[78,17,66,23],[79,12,67,20],[79,13,67,21],[79,15,67,23,"opts"],[79,19,67,27],[79,20,67,28,"router"],[79,26,67,34],[79,27,67,35,"_def"],[79,31,67,39],[79,32,67,40,"_config"],[79,39,67,47],[79,40,67,48,"transformer"],[79,51,67,59],[79,52,67,60,"input"],[79,57,67,65],[79,58,67,66,"deserialize"],[79,69,67,77],[79,70,67,78,"inputs"],[79,76,67,84],[80,10,68,16],[80,11,68,17],[81,8,69,12],[82,8,70,12],[82,12,70,16],[82,13,70,17],[82,17,70,17,"isObject"],[82,32,70,25],[82,34,70,26,"inputs"],[82,40,70,32],[82,41,70,33],[82,43,70,35],[83,10,71,16],[83,16,71,22],[83,20,71,26,"TRPCError"],[83,40,71,35],[83,41,71,36],[84,12,72,20,"code"],[84,16,72,24],[84,18,72,26],[84,31,72,39],[85,12,73,20,"message"],[85,19,73,27],[85,21,73,29],[86,10,74,16],[86,11,74,17],[86,12,74,18],[87,8,75,12],[88,8,76,12],[88,12,76,18,"acc"],[88,15,76,21],[88,18,76,24],[88,19,76,25],[88,20,76,26],[89,8,77,12],[89,13,77,17],[89,17,77,23,"index"],[89,22,77,28],[89,26,77,32,"paths"],[89,31,77,37],[89,32,77,38,"keys"],[89,36,77,42],[89,37,77,43],[89,38,77,44],[89,40,77,45],[90,10,78,16],[90,14,78,22,"input"],[90,19,78,27],[90,22,78,30,"inputs"],[90,28,78,36],[90,29,78,37,"index"],[90,34,78,42],[90,35,78,43],[91,10,79,16],[91,14,79,20,"input"],[91,19,79,25],[91,24,79,30,"undefined"],[91,33,79,39],[91,35,79,41],[92,12,80,20,"acc"],[92,15,80,23],[92,16,80,24,"index"],[92,21,80,29],[92,22,80,30],[92,25,80,33,"opts"],[92,29,80,37],[92,30,80,38,"router"],[92,36,80,44],[92,37,80,45,"_def"],[92,41,80,49],[92,42,80,50,"_config"],[92,49,80,57],[92,50,80,58,"transformer"],[92,61,80,69],[92,62,80,70,"input"],[92,67,80,75],[92,68,80,76,"deserialize"],[92,79,80,87],[92,80,80,88,"input"],[92,85,80,93],[92,86,80,94],[93,10,81,16],[94,8,82,12],[95,8,83,12],[95,15,83,19,"acc"],[95,18,83,22],[96,6,84,8],[96,7,84,9],[96,9,84,10],[97,6,85,8],[97,10,85,14,"calls"],[97,15,85,19],[97,18,85,22,"paths"],[97,23,85,27],[97,24,85,28,"map"],[97,27,85,31],[97,28,85,32],[97,29,85,33,"path"],[97,33,85,37],[97,35,85,39,"index"],[97,40,85,44],[97,45,85,47],[98,8,86,12],[98,12,86,18,"procedure"],[98,21,86,27],[98,24,86,30,"opts"],[98,28,86,34],[98,29,86,35,"router"],[98,35,86,41],[98,36,86,42,"_def"],[98,40,86,46],[98,41,86,47,"procedures"],[98,51,86,57],[98,52,86,58,"path"],[98,56,86,62],[98,57,86,63],[98,61,86,67],[98,65,86,71],[99,8,87,12],[99,15,87,19],[100,10,88,16,"path"],[100,14,88,20],[101,10,89,16,"procedure"],[101,19,89,25],[102,10,90,16,"getRawInput"],[102,21,90,27],[103,12,90,27],[103,16,90,27,"_ref3"],[103,21,90,27],[103,28,90,27,"_asyncToGenerator2"],[103,46,90,27],[103,47,90,27,"default"],[103,54,90,27],[103,56,90,29],[103,69,90,39],[104,14,91,20],[104,18,91,26,"inputs"],[104,24,91,32],[104,33,91,41,"getInputs"],[104,42,91,50],[104,43,91,51,"read"],[104,47,91,55],[104,48,91,56],[104,49,91,57],[105,14,92,20],[105,18,92,24,"input"],[105,23,92,29],[105,26,92,32,"inputs"],[105,32,92,38],[105,33,92,39,"index"],[105,38,92,44],[105,39,92,45],[106,14,93,20],[106,18,93,24,"procedure"],[106,27,93,33],[106,29,93,35,"_def"],[106,33,93,39],[106,34,93,40,"type"],[106,38,93,44],[106,43,93,49],[106,57,93,63],[106,59,93,65],[107,16,94,24],[107,20,94,30,"lastEventId"],[107,31,94,41],[107,34,94,44,"opts"],[107,38,94,48],[107,39,94,49,"headers"],[107,46,94,56],[107,47,94,57,"get"],[107,50,94,60],[107,51,94,61],[107,66,94,76],[107,67,94,77],[107,71,94,81,"opts"],[107,75,94,85],[107,76,94,86,"searchParams"],[107,88,94,98],[107,89,94,99,"get"],[107,92,94,102],[107,93,94,103],[107,106,94,116],[107,107,94,117],[107,111,94,121,"opts"],[107,115,94,125],[107,116,94,126,"searchParams"],[107,128,94,138],[107,129,94,139,"get"],[107,132,94,142],[107,133,94,143],[107,148,94,158],[107,149,94,159],[108,16,95,24],[108,20,95,28,"lastEventId"],[108,31,95,39],[108,33,95,41],[109,18,96,28],[109,22,96,32],[109,26,96,32,"isObject"],[109,41,96,40],[109,43,96,41,"input"],[109,48,96,46],[109,49,96,47],[109,51,96,49],[110,20,97,32,"input"],[110,25,97,37],[110,28,97,40],[111,22,98,36],[111,25,98,39,"input"],[111,30,98,44],[112,22,99,36,"lastEventId"],[112,33,99,47],[112,35,99,49,"lastEventId"],[113,20,100,32],[113,21,100,33],[114,18,101,28],[114,19,101,29],[114,25,101,35],[115,20,102,32,"input"],[115,25,102,37],[115,30,102,42,"input"],[115,35,102,47],[115,38,102,50],[116,22,103,36,"lastEventId"],[116,33,103,47],[116,35,103,49,"lastEventId"],[117,20,104,32],[117,21,104,33],[117,22,104,34],[118,18,105,28],[119,16,106,24],[120,14,107,20],[121,14,108,20],[121,21,108,27,"input"],[121,26,108,32],[122,12,109,16],[122,13,109,17],[123,12,109,17],[123,28,90,16,"getRawInput"],[123,39,90,27,"getRawInput"],[123,40,90,27],[124,14,90,27],[124,21,90,27,"_ref3"],[124,26,90,27],[124,27,90,27,"apply"],[124,32,90,27],[124,39,90,27,"arguments"],[124,48,90,27],[125,12,90,27],[126,10,90,27],[126,13,109,17],[127,10,110,16,"result"],[127,16,110,22],[127,18,110,24,"result"],[127,19,110,24],[127,24,110,28],[128,12,111,20],[128,19,111,27,"getInputs"],[128,28,111,36],[128,29,111,37,"result"],[128,35,111,43],[128,36,111,44],[128,37,111,45],[128,40,111,48,"index"],[128,45,111,53],[128,46,111,54],[129,10,112,16],[130,8,113,12],[130,9,113,13],[131,6,114,8],[131,7,114,9],[131,8,114,10],[132,6,115,8],[132,10,115,14,"types"],[132,15,115,19],[132,18,115,22],[132,22,115,26,"Set"],[132,25,115,29],[132,26,115,30,"calls"],[132,31,115,35],[132,32,115,36,"map"],[132,35,115,39],[132,36,115,41,"call"],[132,40,115,45],[132,44,115,48,"call"],[132,48,115,52],[132,49,115,53,"procedure"],[132,58,115,62],[132,60,115,64,"_def"],[132,64,115,68],[132,65,115,69,"type"],[132,69,115,73],[132,70,115,74],[132,71,115,75,"filter"],[132,77,115,81],[132,78,115,82,"Boolean"],[132,85,115,89],[132,86,115,90],[132,87,115,91],[133,6,116,8],[134,6,116,46],[134,10,116,50,"types"],[134,15,116,55],[134,16,116,56,"size"],[134,20,116,60],[134,23,116,63],[134,24,116,64],[134,26,116,66],[135,8,117,12],[135,14,117,18],[135,18,117,22,"TRPCError"],[135,38,117,31],[135,39,117,32],[136,10,118,16,"code"],[136,14,118,20],[136,16,118,22],[136,29,118,35],[137,10,119,16,"message"],[137,17,119,23],[137,19,119,25],[137,58,119,64,"Array"],[137,63,119,69],[137,64,119,70,"from"],[137,68,119,74],[137,69,119,75,"types"],[137,74,119,80],[137,75,119,81],[137,76,119,82,"join"],[137,80,119,86],[137,81,119,87],[137,85,119,91],[137,86,119,92],[138,8,120,12],[138,9,120,13],[138,10,120,14],[139,6,121,8],[140,6,122,8],[140,10,122,14,"type"],[140,14,122,18],[140,17,122,21,"types"],[140,22,122,26],[140,23,122,27,"values"],[140,29,122,33],[140,30,122,34],[140,31,122,35],[140,32,122,36,"next"],[140,36,122,40],[140,37,122,41],[140,38,122,42],[140,39,122,43,"value"],[140,44,122,48],[140,48,122,52],[140,57,122,61],[141,6,123,8],[141,10,123,14,"connectionParamsStr"],[141,29,123,33],[141,32,123,36,"opts"],[141,36,123,40],[141,37,123,41,"searchParams"],[141,49,123,53],[141,50,123,54,"get"],[141,53,123,57],[141,54,123,58],[141,72,123,76],[141,73,123,77],[142,6,124,8],[142,10,124,14,"info"],[142,14,124,18],[142,17,124,21],[143,8,125,12,"isBatchCall"],[143,19,125,23],[144,8,126,12,"accept"],[144,14,126,18],[144,16,126,20,"req"],[144,19,126,23],[144,20,126,24,"headers"],[144,27,126,31],[144,28,126,32,"get"],[144,31,126,35],[144,32,126,36],[144,45,126,49],[144,46,126,50],[145,8,127,12,"calls"],[145,13,127,17],[146,8,128,12,"type"],[146,12,128,16],[147,8,129,12,"connectionParams"],[147,24,129,28],[147,26,129,30,"connectionParamsStr"],[147,45,129,49],[147,50,129,54],[147,54,129,58],[147,57,129,61],[147,61,129,65],[147,64,129,68],[147,68,129,68,"parseConnectionParamsFromString"],[147,122,129,99],[147,124,129,100,"connectionParamsStr"],[147,143,129,119],[147,144,129,120],[148,8,130,12,"signal"],[148,14,130,18],[148,16,130,20,"req"],[148,19,130,23],[148,20,130,24,"signal"],[149,6,131,8],[149,7,131,9],[150,6,132,8],[150,13,132,15,"info"],[150,17,132,19],[151,4,133,4],[152,2,134,0],[152,3,134,1],[153,2,135,0],[153,6,135,6,"formDataContentTypeHandler"],[153,32,135,32],[153,35,135,35],[154,4,136,4,"isMatch"],[154,11,136,11,"isMatch"],[154,12,136,13,"req"],[154,15,136,16],[154,17,136,18],[155,6,137,8],[155,13,137,15],[155,14,137,16],[155,15,137,17,"req"],[155,18,137,20],[155,19,137,21,"headers"],[155,26,137,28],[155,27,137,29,"get"],[155,30,137,32],[155,31,137,33],[155,45,137,47],[155,46,137,48],[155,48,137,50,"startsWith"],[155,58,137,60],[155,59,137,61],[155,80,137,82],[155,81,137,83],[156,4,138,4],[156,5,138,5],[157,4,139,4,"parse"],[157,9,139,9,"parse"],[157,10,139,11,"opts"],[157,14,139,15],[157,16,139,17],[158,6,140,8],[158,10,140,16,"req"],[158,13,140,19],[158,16,140,24,"opts"],[158,20,140,28],[158,21,140,16,"req"],[158,24,140,19],[159,6,141,8],[159,10,141,12,"req"],[159,13,141,15],[159,14,141,16,"method"],[159,20,141,22],[159,25,141,27],[159,31,141,33],[159,33,141,35],[160,8,142,12],[160,14,142,18],[160,18,142,22,"TRPCError"],[160,38,142,31],[160,39,142,32],[161,10,143,16,"code"],[161,14,143,20],[161,16,143,22],[161,38,143,44],[162,10,144,16,"message"],[162,17,144,23],[162,19,144,25],[163,8,145,12],[163,9,145,13],[163,10,145,14],[164,6,146,8],[165,6,147,8],[165,10,147,14,"getInputs"],[165,19,147,23],[165,22,147,26,"memo"],[165,26,147,30],[165,44,147,30,"_asyncToGenerator2"],[165,62,147,30],[165,63,147,30,"default"],[165,70,147,30],[165,72,147,31],[165,85,147,41],[166,8,148,12],[166,12,148,18,"fd"],[166,14,148,20],[166,23,148,29,"req"],[166,26,148,32],[166,27,148,33,"formData"],[166,35,148,41],[166,36,148,42],[166,37,148,43],[167,8,149,12],[167,15,149,19,"fd"],[167,17,149,21],[168,6,150,8],[168,7,150,9],[168,9,150,10],[169,6,151,8],[169,13,151,15],[170,8,152,12,"accept"],[170,14,152,18],[170,16,152,20],[170,20,152,24],[171,8,153,12,"calls"],[171,13,153,17],[171,15,153,19],[171,16,154,16],[172,10,155,20,"path"],[172,14,155,24],[172,16,155,26,"opts"],[172,20,155,30],[172,21,155,31,"path"],[172,25,155,35],[173,10,156,20,"getRawInput"],[173,21,156,31],[173,23,156,33,"getInputs"],[173,32,156,42],[173,33,156,43,"read"],[173,37,156,47],[174,10,157,20,"result"],[174,16,157,26],[174,18,157,28,"getInputs"],[174,27,157,37],[174,28,157,38,"result"],[174,34,157,44],[175,10,158,20,"procedure"],[175,19,158,29],[175,21,158,31,"opts"],[175,25,158,35],[175,26,158,36,"router"],[175,32,158,42],[175,33,158,43,"_def"],[175,37,158,47],[175,38,158,48,"procedures"],[175,48,158,58],[175,49,158,59,"opts"],[175,53,158,63],[175,54,158,64,"path"],[175,58,158,68],[175,59,158,69],[175,63,158,73],[176,8,159,16],[176,9,159,17],[176,10,160,13],[177,8,161,12,"isBatchCall"],[177,19,161,23],[177,21,161,25],[177,26,161,30],[178,8,162,12,"type"],[178,12,162,16],[178,14,162,18],[178,24,162,28],[179,8,163,12,"connectionParams"],[179,24,163,28],[179,26,163,30],[179,30,163,34],[180,8,164,12,"signal"],[180,14,164,18],[180,16,164,20,"req"],[180,19,164,23],[180,20,164,24,"signal"],[181,6,165,8],[181,7,165,9],[182,4,166,4],[183,2,167,0],[183,3,167,1],[184,2,168,0],[184,6,168,6,"octetStreamContentTypeHandler"],[184,35,168,35],[184,38,168,38],[185,4,169,4,"isMatch"],[185,11,169,11,"isMatch"],[185,12,169,13,"req"],[185,15,169,16],[185,17,169,18],[186,6,170,8],[186,13,170,15],[186,14,170,16],[186,15,170,17,"req"],[186,18,170,20],[186,19,170,21,"headers"],[186,26,170,28],[186,27,170,29,"get"],[186,30,170,32],[186,31,170,33],[186,45,170,47],[186,46,170,48],[186,48,170,50,"startsWith"],[186,58,170,60],[186,59,170,61],[186,85,170,87],[186,86,170,88],[187,4,171,4],[187,5,171,5],[188,4,172,4,"parse"],[188,9,172,9,"parse"],[188,10,172,11,"opts"],[188,14,172,15],[188,16,172,17],[189,6,173,8],[189,10,173,16,"req"],[189,13,173,19],[189,16,173,24,"opts"],[189,20,173,28],[189,21,173,16,"req"],[189,24,173,19],[190,6,174,8],[190,10,174,12,"req"],[190,13,174,15],[190,14,174,16,"method"],[190,20,174,22],[190,25,174,27],[190,31,174,33],[190,33,174,35],[191,8,175,12],[191,14,175,18],[191,18,175,22,"TRPCError"],[191,38,175,31],[191,39,175,32],[192,10,176,16,"code"],[192,14,176,20],[192,16,176,22],[192,38,176,44],[193,10,177,16,"message"],[193,17,177,23],[193,19,177,25],[194,8,178,12],[194,9,178,13],[194,10,178,14],[195,6,179,8],[196,6,180,8],[196,10,180,14,"getInputs"],[196,19,180,23],[196,22,180,26,"memo"],[196,26,180,30],[196,44,180,30,"_asyncToGenerator2"],[196,62,180,30],[196,63,180,30,"default"],[196,70,180,30],[196,72,180,31],[196,85,180,41],[197,8,181,12],[197,15,181,19,"req"],[197,18,181,22],[197,19,181,23,"body"],[197,23,181,27],[198,6,182,8],[198,7,182,9],[198,9,182,10],[199,6,183,8],[199,13,183,15],[200,8,184,12,"calls"],[200,13,184,17],[200,15,184,19],[200,16,185,16],[201,10,186,20,"path"],[201,14,186,24],[201,16,186,26,"opts"],[201,20,186,30],[201,21,186,31,"path"],[201,25,186,35],[202,10,187,20,"getRawInput"],[202,21,187,31],[202,23,187,33,"getInputs"],[202,32,187,42],[202,33,187,43,"read"],[202,37,187,47],[203,10,188,20,"result"],[203,16,188,26],[203,18,188,28,"getInputs"],[203,27,188,37],[203,28,188,38,"result"],[203,34,188,44],[204,10,189,20,"procedure"],[204,19,189,29],[204,21,189,31,"opts"],[204,25,189,35],[204,26,189,36,"router"],[204,32,189,42],[204,33,189,43,"_def"],[204,37,189,47],[204,38,189,48,"procedures"],[204,48,189,58],[204,49,189,59,"opts"],[204,53,189,63],[204,54,189,64,"path"],[204,58,189,68],[204,59,189,69],[204,63,189,73],[205,8,190,16],[205,9,190,17],[205,10,191,13],[206,8,192,12,"isBatchCall"],[206,19,192,23],[206,21,192,25],[206,26,192,30],[207,8,193,12,"accept"],[207,14,193,18],[207,16,193,20],[207,20,193,24],[208,8,194,12,"type"],[208,12,194,16],[208,14,194,18],[208,24,194,28],[209,8,195,12,"connectionParams"],[209,24,195,28],[209,26,195,30],[209,30,195,34],[210,8,196,12,"signal"],[210,14,196,18],[210,16,196,20,"req"],[210,19,196,23],[210,20,196,24,"signal"],[211,6,197,8],[211,7,197,9],[212,4,198,4],[213,2,199,0],[213,3,199,1],[214,2,200,0],[214,6,200,6,"handlers"],[214,14,200,14],[214,17,200,17],[214,18,201,4,"jsonContentTypeHandler"],[214,40,201,26],[214,42,202,4,"formDataContentTypeHandler"],[214,68,202,30],[214,70,203,4,"octetStreamContentTypeHandler"],[214,99,203,33],[214,100,204,1],[215,2,205,0],[215,11,205,9,"getContentTypeHandler"],[215,32,205,30,"getContentTypeHandler"],[215,33,205,31,"req"],[215,36,205,34],[215,38,205,36],[216,4,206,4],[216,8,206,10,"handler"],[216,15,206,17],[216,18,206,20,"handlers"],[216,26,206,28],[216,27,206,29,"find"],[216,31,206,33],[216,32,206,35,"handler"],[216,39,206,42],[216,43,206,45,"handler"],[216,50,206,52],[216,51,206,53,"isMatch"],[216,58,206,60],[216,59,206,61,"req"],[216,62,206,64],[216,63,206,65],[216,64,206,66],[217,4,207,4],[217,8,207,8,"handler"],[217,15,207,15],[217,17,207,17],[218,6,208,8],[218,13,208,15,"handler"],[218,20,208,22],[219,4,209,4],[220,4,210,4],[220,8,210,8],[220,9,210,9,"handler"],[220,16,210,16],[220,20,210,20,"req"],[220,23,210,23],[220,24,210,24,"method"],[220,30,210,30],[220,35,210,35],[220,40,210,40],[220,42,210,42],[221,6,211,8],[222,6,212,8],[222,13,212,15,"jsonContentTypeHandler"],[222,35,212,37],[223,4,213,4],[224,4,214,4],[224,10,214,10],[224,14,214,14,"TRPCError"],[224,34,214,23],[224,35,214,24],[225,6,215,8,"code"],[225,10,215,12],[225,12,215,14],[225,36,215,38],[226,6,216,8,"message"],[226,13,216,15],[226,15,216,17,"req"],[226,18,216,20],[226,19,216,21,"headers"],[226,26,216,28],[226,27,216,29,"has"],[226,30,216,32],[226,31,216,33],[226,45,216,47],[226,46,216,48],[226,49,216,51],[226,78,216,80,"req"],[226,81,216,83],[226,82,216,84,"headers"],[226,89,216,91],[226,90,216,92,"get"],[226,93,216,95],[226,94,216,96],[226,108,216,110],[226,109,216,111],[226,111,216,113],[226,114,216,116],[227,4,217,4],[227,5,217,5],[227,6,217,6],[228,2,218,0],[229,2,219,0],[229,11,219,9,"getRequestInfo"],[229,25,219,23,"getRequestInfo"],[229,26,219,24,"opts"],[229,30,219,28],[229,32,219,30],[230,4,220,4],[230,8,220,10,"handler"],[230,15,220,17],[230,18,220,20,"getContentTypeHandler"],[230,39,220,41],[230,40,220,42,"opts"],[230,44,220,46],[230,45,220,47,"req"],[230,48,220,50],[230,49,220,51],[231,4,221,4],[231,11,221,11,"handler"],[231,18,221,18],[231,19,221,19,"parse"],[231,24,221,24],[231,25,221,25,"opts"],[231,29,221,29],[231,30,221,30],[232,2,222,0],[233,0,222,1],[233,3]],"functionMap":{"names":["<global>","memo","read","fn._catch$argument_0","result","jsonContentTypeHandler.isMatch","jsonContentTypeHandler.parse","memo$argument_0","paths.map$argument_0","getRawInput","calls.map$argument_0","formDataContentTypeHandler.isMatch","formDataContentTypeHandler.parse","octetStreamContentTypeHandler.isMatch","octetStreamContentTypeHandler.parse","getContentTypeHandler","handlers.find$argument_0","getRequestInfo"],"mappings":"AAA;ICO;cCM;qCCM;iBDS;SDK;gBGG;SHE;CDE;IKE;KLE;IMC;+BCM;SDgC;gCEC;6BCK;iBDmB;wBJC;iBIE;SFE;wCIC,iCJ;KNkB;IWG;KXE;IYC;+BLQ;SKG;KZgB;IaG;KbE;IcC;+BPQ;SOE;KdgB;AeO;kCCC,+BD;CfY;AiBC;CjBG"}},"type":"js/module"}]}