{"dependencies":[{"name":"for-each","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":14,"index":29},"end":{"line":3,"column":33,"index":48}}],"key":"lhEUZMxqQgR+ORRrZeSfExQvkbU="}},{"name":"available-typed-arrays","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":27,"index":77},"end":{"line":4,"column":60,"index":110}}],"key":"onNlsh12tJbLwcb+E5iswRcy27U="}},{"name":"call-bind","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":15,"index":127},"end":{"line":5,"column":35,"index":147}}],"key":"s/OM5QIBHCERXAFS6LGhf5QsmPU="}},{"name":"call-bound","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":16,"index":165},"end":{"line":6,"column":37,"index":186}}],"key":"emlXk0v0B4n/RINR61N8YfVgpjI="}},{"name":"gopd","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":11,"index":199},"end":{"line":7,"column":26,"index":214}}],"key":"lM+iYM1YmascdkbdITyv4Cp5Yqs="}},{"name":"has-tostringtag/shams","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":21,"index":331},"end":{"line":11,"column":53,"index":363}}],"key":"blCVgJTzAq1T24bmzfkFgLNr5bw="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var forEach = require(_dependencyMap[0], \"for-each\");\n  var availableTypedArrays = require(_dependencyMap[1], \"available-typed-arrays\");\n  var callBind = require(_dependencyMap[2], \"call-bind\");\n  var callBound = require(_dependencyMap[3], \"call-bound\");\n  var gOPD = require(_dependencyMap[4], \"gopd\");\n\n  /** @type {(O: object) => string} */\n  var $toString = callBound('Object.prototype.toString');\n  var hasToStringTag = require(_dependencyMap[5], \"has-tostringtag/shams\")();\n  var g = typeof globalThis === 'undefined' ? global : globalThis;\n  var typedArrays = availableTypedArrays();\n  var $slice = callBound('String.prototype.slice');\n  var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\n  /** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */\n  var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n    for (var i = 0; i < array.length; i += 1) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  /** @typedef {(receiver: import('.').TypedArray) => string | typeof Uint8Array.prototype.slice.call | typeof Uint8Array.prototype.set.call} Getter */\n  /** @type {{ [k in `\\$${import('.').TypedArrayName}`]?: Getter } & { __proto__: null }} */\n  var cache = {\n    __proto__: null\n  };\n  if (hasToStringTag && gOPD && getPrototypeOf) {\n    forEach(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        // @ts-expect-error TS won't narrow inside a closure\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          // @ts-expect-error TS won't narrow inside a closure\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        // @ts-expect-error TODO: fix\n        cache['$' + typedArray] = callBind(descriptor.get);\n      }\n    });\n  } else {\n    forEach(typedArrays, function (typedArray) {\n      var arr = new g[typedArray]();\n      var fn = arr.slice || arr.set;\n      if (fn) {\n        // @ts-expect-error TODO: fix\n        cache['$' + typedArray] = callBind(fn);\n      }\n    });\n  }\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var tryTypedArrays = function tryAllTypedArrays(value) {\n    /** @type {ReturnType<typeof tryAllTypedArrays>} */var found = false;\n    forEach(\n    // eslint-disable-next-line no-extra-parens\n    /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */\n    cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n    function (getter, typedArray) {\n      if (!found) {\n        try {\n          // @ts-expect-error TODO: fix\n          if ('$' + getter(value) === typedArray) {\n            found = $slice(typedArray, 1);\n          }\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {(value: object) => false | import('.').TypedArrayName} */\n  var trySlices = function tryAllSlices(value) {\n    /** @type {ReturnType<typeof tryAllSlices>} */var found = false;\n    forEach(\n    // eslint-disable-next-line no-extra-parens\n    /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */\n    cache, /** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */function (getter, name) {\n      if (!found) {\n        try {\n          // @ts-expect-error TODO: fix\n          getter(value);\n          found = $slice(name, 1);\n        } catch (e) {/**/}\n      }\n    });\n    return found;\n  };\n\n  /** @type {import('.')} */\n  module.exports = function whichTypedArray(value) {\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    if (!hasToStringTag) {\n      /** @type {string} */\n      var tag = $slice($toString(value), 8, -1);\n      if ($indexOf(typedArrays, tag) > -1) {\n        return tag;\n      }\n      if (tag !== 'Object') {\n        return false;\n      }\n      // node < 0.6 hits here on real Typed Arrays\n      return trySlices(value);\n    }\n    if (!gOPD) {\n      return null;\n    } // unknown engine\n    return tryTypedArrays(value);\n  };\n});","lineCount":120,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"forEach"],[4,13,3,11],[4,16,3,14,"require"],[4,23,3,21],[4,24,3,21,"_dependencyMap"],[4,38,3,21],[4,53,3,32],[4,54,3,33],[5,2,4,0],[5,6,4,4,"availableTypedArrays"],[5,26,4,24],[5,29,4,27,"require"],[5,36,4,34],[5,37,4,34,"_dependencyMap"],[5,51,4,34],[5,80,4,59],[5,81,4,60],[6,2,5,0],[6,6,5,4,"callBind"],[6,14,5,12],[6,17,5,15,"require"],[6,24,5,22],[6,25,5,22,"_dependencyMap"],[6,39,5,22],[6,55,5,34],[6,56,5,35],[7,2,6,0],[7,6,6,4,"callBound"],[7,15,6,13],[7,18,6,16,"require"],[7,25,6,23],[7,26,6,23,"_dependencyMap"],[7,40,6,23],[7,57,6,36],[7,58,6,37],[8,2,7,0],[8,6,7,4,"gOPD"],[8,10,7,8],[8,13,7,11,"require"],[8,20,7,18],[8,21,7,18,"_dependencyMap"],[8,35,7,18],[8,46,7,25],[8,47,7,26],[10,2,9,0],[11,2,10,0],[11,6,10,4,"$toString"],[11,15,10,13],[11,18,10,16,"callBound"],[11,27,10,25],[11,28,10,26],[11,55,10,53],[11,56,10,54],[12,2,11,0],[12,6,11,4,"hasToStringTag"],[12,20,11,18],[12,23,11,21,"require"],[12,30,11,28],[12,31,11,28,"_dependencyMap"],[12,45,11,28],[12,73,11,52],[12,74,11,53],[12,75,11,54],[12,76,11,55],[13,2,13,0],[13,6,13,4,"g"],[13,7,13,5],[13,10,13,8],[13,17,13,15,"globalThis"],[13,27,13,25],[13,32,13,30],[13,43,13,41],[13,46,13,44,"global"],[13,52,13,50],[13,55,13,53,"globalThis"],[13,65,13,63],[14,2,14,0],[14,6,14,4,"typedArrays"],[14,17,14,15],[14,20,14,18,"availableTypedArrays"],[14,40,14,38],[14,41,14,39],[14,42,14,40],[15,2,16,0],[15,6,16,4,"$slice"],[15,12,16,10],[15,15,16,13,"callBound"],[15,24,16,22],[15,25,16,23],[15,49,16,47],[15,50,16,48],[16,2,17,0],[16,6,17,4,"getPrototypeOf"],[16,20,17,18],[16,23,17,21,"Object"],[16,29,17,27],[16,30,17,28,"getPrototypeOf"],[16,44,17,42],[16,45,17,43],[16,46,17,44],[18,2,19,0],[19,2,20,0],[19,6,20,4,"$indexOf"],[19,14,20,12],[19,17,20,15,"callBound"],[19,26,20,24],[19,27,20,25],[19,52,20,50],[19,54,20,52],[19,58,20,56],[19,59,20,57],[19,63,20,61],[19,72,20,70,"indexOf"],[19,79,20,77,"indexOf"],[19,80,20,78,"array"],[19,85,20,83],[19,87,20,85,"value"],[19,92,20,90],[19,94,20,92],[20,4,21,1],[20,9,21,6],[20,13,21,10,"i"],[20,14,21,11],[20,17,21,14],[20,18,21,15],[20,20,21,17,"i"],[20,21,21,18],[20,24,21,21,"array"],[20,29,21,26],[20,30,21,27,"length"],[20,36,21,33],[20,38,21,35,"i"],[20,39,21,36],[20,43,21,40],[20,44,21,41],[20,46,21,43],[21,6,22,2],[21,10,22,6,"array"],[21,15,22,11],[21,16,22,12,"i"],[21,17,22,13],[21,18,22,14],[21,23,22,19,"value"],[21,28,22,24],[21,30,22,26],[22,8,23,3],[22,15,23,10,"i"],[22,16,23,11],[23,6,24,2],[24,4,25,1],[25,4,26,1],[25,11,26,8],[25,12,26,9],[25,13,26,10],[26,2,27,0],[26,3,27,1],[28,2,29,0],[29,2,30,0],[30,2,31,0],[30,6,31,4,"cache"],[30,11,31,9],[30,14,31,12],[31,4,31,14,"__proto__"],[31,13,31,23],[31,15,31,25],[32,2,31,30],[32,3,31,31],[33,2,32,0],[33,6,32,4,"hasToStringTag"],[33,20,32,18],[33,24,32,22,"gOPD"],[33,28,32,26],[33,32,32,30,"getPrototypeOf"],[33,46,32,44],[33,48,32,46],[34,4,33,1,"forEach"],[34,11,33,8],[34,12,33,9,"typedArrays"],[34,23,33,20],[34,25,33,22],[34,35,33,32,"typedArray"],[34,45,33,42],[34,47,33,44],[35,6,34,2],[35,10,34,6,"arr"],[35,13,34,9],[35,16,34,12],[35,20,34,16,"g"],[35,21,34,17],[35,22,34,18,"typedArray"],[35,32,34,28],[35,33,34,29],[35,34,34,30],[35,35,34,31],[36,6,35,2],[36,10,35,6,"Symbol"],[36,16,35,12],[36,17,35,13,"toStringTag"],[36,28,35,24],[36,32,35,28,"arr"],[36,35,35,31],[36,37,35,33],[37,8,36,3],[37,12,36,7,"proto"],[37,17,36,12],[37,20,36,15,"getPrototypeOf"],[37,34,36,29],[37,35,36,30,"arr"],[37,38,36,33],[37,39,36,34],[38,8,37,3],[39,8,38,3],[39,12,38,7,"descriptor"],[39,22,38,17],[39,25,38,20,"gOPD"],[39,29,38,24],[39,30,38,25,"proto"],[39,35,38,30],[39,37,38,32,"Symbol"],[39,43,38,38],[39,44,38,39,"toStringTag"],[39,55,38,50],[39,56,38,51],[40,8,39,3],[40,12,39,7],[40,13,39,8,"descriptor"],[40,23,39,18],[40,25,39,20],[41,10,40,4],[41,14,40,8,"superProto"],[41,24,40,18],[41,27,40,21,"getPrototypeOf"],[41,41,40,35],[41,42,40,36,"proto"],[41,47,40,41],[41,48,40,42],[42,10,41,4],[43,10,42,4,"descriptor"],[43,20,42,14],[43,23,42,17,"gOPD"],[43,27,42,21],[43,28,42,22,"superProto"],[43,38,42,32],[43,40,42,34,"Symbol"],[43,46,42,40],[43,47,42,41,"toStringTag"],[43,58,42,52],[43,59,42,53],[44,8,43,3],[45,8,44,3],[46,8,45,3,"cache"],[46,13,45,8],[46,14,45,9],[46,17,45,12],[46,20,45,15,"typedArray"],[46,30,45,25],[46,31,45,26],[46,34,45,29,"callBind"],[46,42,45,37],[46,43,45,38,"descriptor"],[46,53,45,48],[46,54,45,49,"get"],[46,57,45,52],[46,58,45,53],[47,6,46,2],[48,4,47,1],[48,5,47,2],[48,6,47,3],[49,2,48,0],[49,3,48,1],[49,9,48,7],[50,4,49,1,"forEach"],[50,11,49,8],[50,12,49,9,"typedArrays"],[50,23,49,20],[50,25,49,22],[50,35,49,32,"typedArray"],[50,45,49,42],[50,47,49,44],[51,6,50,2],[51,10,50,6,"arr"],[51,13,50,9],[51,16,50,12],[51,20,50,16,"g"],[51,21,50,17],[51,22,50,18,"typedArray"],[51,32,50,28],[51,33,50,29],[51,34,50,30],[51,35,50,31],[52,6,51,2],[52,10,51,6,"fn"],[52,12,51,8],[52,15,51,11,"arr"],[52,18,51,14],[52,19,51,15,"slice"],[52,24,51,20],[52,28,51,24,"arr"],[52,31,51,27],[52,32,51,28,"set"],[52,35,51,31],[53,6,52,2],[53,10,52,6,"fn"],[53,12,52,8],[53,14,52,10],[54,8,53,3],[55,8,54,3,"cache"],[55,13,54,8],[55,14,54,9],[55,17,54,12],[55,20,54,15,"typedArray"],[55,30,54,25],[55,31,54,26],[55,34,54,29,"callBind"],[55,42,54,37],[55,43,54,38,"fn"],[55,45,54,40],[55,46,54,41],[56,6,55,2],[57,4,56,1],[57,5,56,2],[57,6,56,3],[58,2,57,0],[60,2,59,0],[61,2,60,0],[61,6,60,4,"tryTypedArrays"],[61,20,60,18],[61,23,60,21],[61,32,60,30,"tryAllTypedArrays"],[61,49,60,47,"tryAllTypedArrays"],[61,50,60,48,"value"],[61,55,60,53],[61,57,60,55],[62,4,61,1],[62,55,61,53],[62,59,61,57,"found"],[62,64,61,62],[62,67,61,65],[62,72,61,70],[63,4,62,1,"forEach"],[63,11,62,8],[64,4,63,2],[65,4,64,2],[65,57,64,55],[66,4,64,75,"cache"],[66,9,64,80],[66,11,65,2],[67,4,66,2],[67,14,66,12,"getter"],[67,20,66,18],[67,22,66,20,"typedArray"],[67,32,66,30],[67,34,66,32],[68,6,67,3],[68,10,67,7],[68,11,67,8,"found"],[68,16,67,13],[68,18,67,15],[69,8,68,4],[69,12,68,8],[70,10,69,4],[71,10,70,5],[71,14,70,9],[71,17,70,12],[71,20,70,15,"getter"],[71,26,70,21],[71,27,70,22,"value"],[71,32,70,27],[71,33,70,28],[71,38,70,33,"typedArray"],[71,48,70,43],[71,50,70,45],[72,12,71,6,"found"],[72,17,71,11],[72,20,71,14,"$slice"],[72,26,71,20],[72,27,71,21,"typedArray"],[72,37,71,31],[72,39,71,33],[72,40,71,34],[72,41,71,35],[73,10,72,5],[74,8,73,4],[74,9,73,5],[74,10,73,6],[74,17,73,13,"e"],[74,18,73,14],[74,20,73,16],[74,21,73,18],[75,6,74,3],[76,4,75,2],[76,5,76,1],[76,6,76,2],[77,4,77,1],[77,11,77,8,"found"],[77,16,77,13],[78,2,78,0],[78,3,78,1],[80,2,80,0],[81,2,81,0],[81,6,81,4,"trySlices"],[81,15,81,13],[81,18,81,16],[81,27,81,25,"tryAllSlices"],[81,39,81,37,"tryAllSlices"],[81,40,81,38,"value"],[81,45,81,43],[81,47,81,45],[82,4,82,1],[82,50,82,48],[82,54,82,52,"found"],[82,59,82,57],[82,62,82,60],[82,67,82,65],[83,4,83,1,"forEach"],[83,11,83,8],[84,4,84,2],[85,4,85,2],[85,57,85,55],[86,4,85,75,"cache"],[86,9,85,80],[86,11,86,2],[86,97,86,89],[86,107,86,99,"getter"],[86,113,86,105],[86,115,86,107,"name"],[86,119,86,111],[86,121,86,113],[87,6,87,3],[87,10,87,7],[87,11,87,8,"found"],[87,16,87,13],[87,18,87,15],[88,8,88,4],[88,12,88,8],[89,10,89,5],[90,10,90,5,"getter"],[90,16,90,11],[90,17,90,12,"value"],[90,22,90,17],[90,23,90,18],[91,10,91,5,"found"],[91,15,91,10],[91,18,91,13,"$slice"],[91,24,91,19],[91,25,91,20,"name"],[91,29,91,24],[91,31,91,26],[91,32,91,27],[91,33,91,28],[92,8,92,4],[92,9,92,5],[92,10,92,6],[92,17,92,13,"e"],[92,18,92,14],[92,20,92,16],[92,21,92,18],[93,6,93,3],[94,4,94,2],[94,5,95,1],[94,6,95,2],[95,4,96,1],[95,11,96,8,"found"],[95,16,96,13],[96,2,97,0],[96,3,97,1],[98,2,99,0],[99,2,100,0,"module"],[99,8,100,6],[99,9,100,7,"exports"],[99,16,100,14],[99,19,100,17],[99,28,100,26,"whichTypedArray"],[99,43,100,41,"whichTypedArray"],[99,44,100,42,"value"],[99,49,100,47],[99,51,100,49],[100,4,101,1],[100,8,101,5],[100,9,101,6,"value"],[100,14,101,11],[100,18,101,15],[100,25,101,22,"value"],[100,30,101,27],[100,35,101,32],[100,43,101,40],[100,45,101,42],[101,6,101,44],[101,13,101,51],[101,18,101,56],[102,4,101,58],[103,4,102,1],[103,8,102,5],[103,9,102,6,"hasToStringTag"],[103,23,102,20],[103,25,102,22],[104,6,103,2],[105,6,104,2],[105,10,104,6,"tag"],[105,13,104,9],[105,16,104,12,"$slice"],[105,22,104,18],[105,23,104,19,"$toString"],[105,32,104,28],[105,33,104,29,"value"],[105,38,104,34],[105,39,104,35],[105,41,104,37],[105,42,104,38],[105,44,104,40],[105,45,104,41],[105,46,104,42],[105,47,104,43],[106,6,105,2],[106,10,105,6,"$indexOf"],[106,18,105,14],[106,19,105,15,"typedArrays"],[106,30,105,26],[106,32,105,28,"tag"],[106,35,105,31],[106,36,105,32],[106,39,105,35],[106,40,105,36],[106,41,105,37],[106,43,105,39],[107,8,106,3],[107,15,106,10,"tag"],[107,18,106,13],[108,6,107,2],[109,6,108,2],[109,10,108,6,"tag"],[109,13,108,9],[109,18,108,14],[109,26,108,22],[109,28,108,24],[110,8,109,3],[110,15,109,10],[110,20,109,15],[111,6,110,2],[112,6,111,2],[113,6,112,2],[113,13,112,9,"trySlices"],[113,22,112,18],[113,23,112,19,"value"],[113,28,112,24],[113,29,112,25],[114,4,113,1],[115,4,114,1],[115,8,114,5],[115,9,114,6,"gOPD"],[115,13,114,10],[115,15,114,12],[116,6,114,14],[116,13,114,21],[116,17,114,25],[117,4,114,27],[117,5,114,28],[117,6,114,29],[118,4,115,1],[118,11,115,8,"tryTypedArrays"],[118,25,115,22],[118,26,115,23,"value"],[118,31,115,28],[118,32,115,29],[119,2,116,0],[119,3,116,1],[120,0,116,2],[120,3]],"functionMap":{"names":["<global>","indexOf","forEach$argument_1","tryAllTypedArrays","tryAllSlices","whichTypedArray"],"mappings":"AAA;6DCmB;CDO;sBEM;EFc;sBEE;EFO;qBGI;EDM;GCS;CHG;gBIG;yFFK;GEQ;CJG;iBKG;CLgB"}},"type":"js/module"}]}