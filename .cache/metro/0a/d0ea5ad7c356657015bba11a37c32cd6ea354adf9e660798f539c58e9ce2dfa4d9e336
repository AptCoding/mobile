{"dependencies":[{"name":"./is.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":63,"index":63}}],"key":"a3kdRR4+YEHt0iAzUCWd5VoNrOQ="}},{"name":"./util.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":64},"end":{"line":2,"column":37,"index":101}}],"key":"aUcbDdENC60aSU0lb8uQwyHqHcs="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.setDeep = exports.getDeep = void 0;\n  var _is = require(_dependencyMap[0], \"./is.js\");\n  var _util = require(_dependencyMap[1], \"./util.js\");\n  var getNthKey = (value, n) => {\n    var keys = value.keys();\n    while (n > 0) {\n      keys.next();\n      n--;\n    }\n    return keys.next().value;\n  };\n  function validatePath(path) {\n    if ((0, _util.includes)(path, '__proto__')) {\n      throw new Error('__proto__ is not allowed as a property');\n    }\n    if ((0, _util.includes)(path, 'prototype')) {\n      throw new Error('prototype is not allowed as a property');\n    }\n    if ((0, _util.includes)(path, 'constructor')) {\n      throw new Error('constructor is not allowed as a property');\n    }\n  }\n  var getDeep = (object, path) => {\n    validatePath(path);\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n      if ((0, _is.isSet)(object)) {\n        object = getNthKey(object, +key);\n      } else if ((0, _is.isMap)(object)) {\n        var row = +key;\n        var type = +path[++i] === 0 ? 'key' : 'value';\n        var keyOfRow = getNthKey(object, row);\n        switch (type) {\n          case 'key':\n            object = keyOfRow;\n            break;\n          case 'value':\n            object = object.get(keyOfRow);\n            break;\n        }\n      } else {\n        object = object[key];\n      }\n    }\n    return object;\n  };\n  exports.getDeep = getDeep;\n  var setDeep = (object, path, mapper) => {\n    validatePath(path);\n    if (path.length === 0) {\n      return mapper(object);\n    }\n    var parent = object;\n    for (var i = 0; i < path.length - 1; i++) {\n      var key = path[i];\n      if ((0, _is.isArray)(parent)) {\n        var index = +key;\n        parent = parent[index];\n      } else if ((0, _is.isPlainObject)(parent)) {\n        parent = parent[key];\n      } else if ((0, _is.isSet)(parent)) {\n        var row = +key;\n        parent = getNthKey(parent, row);\n      } else if ((0, _is.isMap)(parent)) {\n        var isEnd = i === path.length - 2;\n        if (isEnd) {\n          break;\n        }\n        var _row = +key;\n        var type = +path[++i] === 0 ? 'key' : 'value';\n        var keyOfRow = getNthKey(parent, _row);\n        switch (type) {\n          case 'key':\n            parent = keyOfRow;\n            break;\n          case 'value':\n            parent = parent.get(keyOfRow);\n            break;\n        }\n      }\n    }\n    var lastKey = path[path.length - 1];\n    if ((0, _is.isArray)(parent)) {\n      parent[+lastKey] = mapper(parent[+lastKey]);\n    } else if ((0, _is.isPlainObject)(parent)) {\n      parent[lastKey] = mapper(parent[lastKey]);\n    }\n    if ((0, _is.isSet)(parent)) {\n      var oldValue = getNthKey(parent, +lastKey);\n      var newValue = mapper(oldValue);\n      if (oldValue !== newValue) {\n        parent.delete(oldValue);\n        parent.add(newValue);\n      }\n    }\n    if ((0, _is.isMap)(parent)) {\n      var _row2 = +path[path.length - 2];\n      var keyToRow = getNthKey(parent, _row2);\n      var _type = +lastKey === 0 ? 'key' : 'value';\n      switch (_type) {\n        case 'key':\n          {\n            var newKey = mapper(keyToRow);\n            parent.set(newKey, parent.get(keyToRow));\n            if (newKey !== keyToRow) {\n              parent.delete(keyToRow);\n            }\n            break;\n          }\n        case 'value':\n          {\n            parent.set(keyToRow, mapper(parent.get(keyToRow)));\n            break;\n          }\n      }\n    }\n    return object;\n  };\n  exports.setDeep = setDeep;\n});","lineCount":124,"map":[[6,2,1,0],[6,6,1,0,"_is"],[6,9,1,0],[6,12,1,0,"require"],[6,19,1,0],[6,20,1,0,"_dependencyMap"],[6,34,1,0],[7,2,2,0],[7,6,2,0,"_util"],[7,11,2,0],[7,14,2,0,"require"],[7,21,2,0],[7,22,2,0,"_dependencyMap"],[7,36,2,0],[8,2,3,0],[8,6,3,6,"getNthKey"],[8,15,3,15],[8,18,3,18,"getNthKey"],[8,19,3,19,"value"],[8,24,3,24],[8,26,3,26,"n"],[8,27,3,27],[8,32,3,32],[9,4,4,4],[9,8,4,10,"keys"],[9,12,4,14],[9,15,4,17,"value"],[9,20,4,22],[9,21,4,23,"keys"],[9,25,4,27],[9,26,4,28],[9,27,4,29],[10,4,5,4],[10,11,5,11,"n"],[10,12,5,12],[10,15,5,15],[10,16,5,16],[10,18,5,18],[11,6,6,8,"keys"],[11,10,6,12],[11,11,6,13,"next"],[11,15,6,17],[11,16,6,18],[11,17,6,19],[12,6,7,8,"n"],[12,7,7,9],[12,9,7,11],[13,4,8,4],[14,4,9,4],[14,11,9,11,"keys"],[14,15,9,15],[14,16,9,16,"next"],[14,20,9,20],[14,21,9,21],[14,22,9,22],[14,23,9,23,"value"],[14,28,9,28],[15,2,10,0],[15,3,10,1],[16,2,11,0],[16,11,11,9,"validatePath"],[16,23,11,21,"validatePath"],[16,24,11,22,"path"],[16,28,11,26],[16,30,11,28],[17,4,12,4],[17,8,12,8],[17,12,12,8,"includes"],[17,26,12,16],[17,28,12,17,"path"],[17,32,12,21],[17,34,12,23],[17,45,12,34],[17,46,12,35],[17,48,12,37],[18,6,13,8],[18,12,13,14],[18,16,13,18,"Error"],[18,21,13,23],[18,22,13,24],[18,62,13,64],[18,63,13,65],[19,4,14,4],[20,4,15,4],[20,8,15,8],[20,12,15,8,"includes"],[20,26,15,16],[20,28,15,17,"path"],[20,32,15,21],[20,34,15,23],[20,45,15,34],[20,46,15,35],[20,48,15,37],[21,6,16,8],[21,12,16,14],[21,16,16,18,"Error"],[21,21,16,23],[21,22,16,24],[21,62,16,64],[21,63,16,65],[22,4,17,4],[23,4,18,4],[23,8,18,8],[23,12,18,8,"includes"],[23,26,18,16],[23,28,18,17,"path"],[23,32,18,21],[23,34,18,23],[23,47,18,36],[23,48,18,37],[23,50,18,39],[24,6,19,8],[24,12,19,14],[24,16,19,18,"Error"],[24,21,19,23],[24,22,19,24],[24,64,19,66],[24,65,19,67],[25,4,20,4],[26,2,21,0],[27,2,22,7],[27,6,22,13,"getDeep"],[27,13,22,20],[27,16,22,23,"getDeep"],[27,17,22,24,"object"],[27,23,22,30],[27,25,22,32,"path"],[27,29,22,36],[27,34,22,41],[28,4,23,4,"validatePath"],[28,16,23,16],[28,17,23,17,"path"],[28,21,23,21],[28,22,23,22],[29,4,24,4],[29,9,24,9],[29,13,24,13,"i"],[29,14,24,14],[29,17,24,17],[29,18,24,18],[29,20,24,20,"i"],[29,21,24,21],[29,24,24,24,"path"],[29,28,24,28],[29,29,24,29,"length"],[29,35,24,35],[29,37,24,37,"i"],[29,38,24,38],[29,40,24,40],[29,42,24,42],[30,6,25,8],[30,10,25,14,"key"],[30,13,25,17],[30,16,25,20,"path"],[30,20,25,24],[30,21,25,25,"i"],[30,22,25,26],[30,23,25,27],[31,6,26,8],[31,10,26,12],[31,14,26,12,"isSet"],[31,23,26,17],[31,25,26,18,"object"],[31,31,26,24],[31,32,26,25],[31,34,26,27],[32,8,27,12,"object"],[32,14,27,18],[32,17,27,21,"getNthKey"],[32,26,27,30],[32,27,27,31,"object"],[32,33,27,37],[32,35,27,39],[32,36,27,40,"key"],[32,39,27,43],[32,40,27,44],[33,6,28,8],[33,7,28,9],[33,13,29,13],[33,17,29,17],[33,21,29,17,"isMap"],[33,30,29,22],[33,32,29,23,"object"],[33,38,29,29],[33,39,29,30],[33,41,29,32],[34,8,30,12],[34,12,30,18,"row"],[34,15,30,21],[34,18,30,24],[34,19,30,25,"key"],[34,22,30,28],[35,8,31,12],[35,12,31,18,"type"],[35,16,31,22],[35,19,31,25],[35,20,31,26,"path"],[35,24,31,30],[35,25,31,31],[35,27,31,33,"i"],[35,28,31,34],[35,29,31,35],[35,34,31,40],[35,35,31,41],[35,38,31,44],[35,43,31,49],[35,46,31,52],[35,53,31,59],[36,8,32,12],[36,12,32,18,"keyOfRow"],[36,20,32,26],[36,23,32,29,"getNthKey"],[36,32,32,38],[36,33,32,39,"object"],[36,39,32,45],[36,41,32,47,"row"],[36,44,32,50],[36,45,32,51],[37,8,33,12],[37,16,33,20,"type"],[37,20,33,24],[38,10,34,16],[38,15,34,21],[38,20,34,26],[39,12,35,20,"object"],[39,18,35,26],[39,21,35,29,"keyOfRow"],[39,29,35,37],[40,12,36,20],[41,10,37,16],[41,15,37,21],[41,22,37,28],[42,12,38,20,"object"],[42,18,38,26],[42,21,38,29,"object"],[42,27,38,35],[42,28,38,36,"get"],[42,31,38,39],[42,32,38,40,"keyOfRow"],[42,40,38,48],[42,41,38,49],[43,12,39,20],[44,8,40,12],[45,6,41,8],[45,7,41,9],[45,13,42,13],[46,8,43,12,"object"],[46,14,43,18],[46,17,43,21,"object"],[46,23,43,27],[46,24,43,28,"key"],[46,27,43,31],[46,28,43,32],[47,6,44,8],[48,4,45,4],[49,4,46,4],[49,11,46,11,"object"],[49,17,46,17],[50,2,47,0],[50,3,47,1],[51,2,47,2,"exports"],[51,9,47,2],[51,10,47,2,"getDeep"],[51,17,47,2],[51,20,47,2,"getDeep"],[51,27,47,2],[52,2,48,7],[52,6,48,13,"setDeep"],[52,13,48,20],[52,16,48,23,"setDeep"],[52,17,48,24,"object"],[52,23,48,30],[52,25,48,32,"path"],[52,29,48,36],[52,31,48,38,"mapper"],[52,37,48,44],[52,42,48,49],[53,4,49,4,"validatePath"],[53,16,49,16],[53,17,49,17,"path"],[53,21,49,21],[53,22,49,22],[54,4,50,4],[54,8,50,8,"path"],[54,12,50,12],[54,13,50,13,"length"],[54,19,50,19],[54,24,50,24],[54,25,50,25],[54,27,50,27],[55,6,51,8],[55,13,51,15,"mapper"],[55,19,51,21],[55,20,51,22,"object"],[55,26,51,28],[55,27,51,29],[56,4,52,4],[57,4,53,4],[57,8,53,8,"parent"],[57,14,53,14],[57,17,53,17,"object"],[57,23,53,23],[58,4,54,4],[58,9,54,9],[58,13,54,13,"i"],[58,14,54,14],[58,17,54,17],[58,18,54,18],[58,20,54,20,"i"],[58,21,54,21],[58,24,54,24,"path"],[58,28,54,28],[58,29,54,29,"length"],[58,35,54,35],[58,38,54,38],[58,39,54,39],[58,41,54,41,"i"],[58,42,54,42],[58,44,54,44],[58,46,54,46],[59,6,55,8],[59,10,55,14,"key"],[59,13,55,17],[59,16,55,20,"path"],[59,20,55,24],[59,21,55,25,"i"],[59,22,55,26],[59,23,55,27],[60,6,56,8],[60,10,56,12],[60,14,56,12,"isArray"],[60,25,56,19],[60,27,56,20,"parent"],[60,33,56,26],[60,34,56,27],[60,36,56,29],[61,8,57,12],[61,12,57,18,"index"],[61,17,57,23],[61,20,57,26],[61,21,57,27,"key"],[61,24,57,30],[62,8,58,12,"parent"],[62,14,58,18],[62,17,58,21,"parent"],[62,23,58,27],[62,24,58,28,"index"],[62,29,58,33],[62,30,58,34],[63,6,59,8],[63,7,59,9],[63,13,60,13],[63,17,60,17],[63,21,60,17,"isPlainObject"],[63,38,60,30],[63,40,60,31,"parent"],[63,46,60,37],[63,47,60,38],[63,49,60,40],[64,8,61,12,"parent"],[64,14,61,18],[64,17,61,21,"parent"],[64,23,61,27],[64,24,61,28,"key"],[64,27,61,31],[64,28,61,32],[65,6,62,8],[65,7,62,9],[65,13,63,13],[65,17,63,17],[65,21,63,17,"isSet"],[65,30,63,22],[65,32,63,23,"parent"],[65,38,63,29],[65,39,63,30],[65,41,63,32],[66,8,64,12],[66,12,64,18,"row"],[66,15,64,21],[66,18,64,24],[66,19,64,25,"key"],[66,22,64,28],[67,8,65,12,"parent"],[67,14,65,18],[67,17,65,21,"getNthKey"],[67,26,65,30],[67,27,65,31,"parent"],[67,33,65,37],[67,35,65,39,"row"],[67,38,65,42],[67,39,65,43],[68,6,66,8],[68,7,66,9],[68,13,67,13],[68,17,67,17],[68,21,67,17,"isMap"],[68,30,67,22],[68,32,67,23,"parent"],[68,38,67,29],[68,39,67,30],[68,41,67,32],[69,8,68,12],[69,12,68,18,"isEnd"],[69,17,68,23],[69,20,68,26,"i"],[69,21,68,27],[69,26,68,32,"path"],[69,30,68,36],[69,31,68,37,"length"],[69,37,68,43],[69,40,68,46],[69,41,68,47],[70,8,69,12],[70,12,69,16,"isEnd"],[70,17,69,21],[70,19,69,23],[71,10,70,16],[72,8,71,12],[73,8,72,12],[73,12,72,18,"row"],[73,16,72,21],[73,19,72,24],[73,20,72,25,"key"],[73,23,72,28],[74,8,73,12],[74,12,73,18,"type"],[74,16,73,22],[74,19,73,25],[74,20,73,26,"path"],[74,24,73,30],[74,25,73,31],[74,27,73,33,"i"],[74,28,73,34],[74,29,73,35],[74,34,73,40],[74,35,73,41],[74,38,73,44],[74,43,73,49],[74,46,73,52],[74,53,73,59],[75,8,74,12],[75,12,74,18,"keyOfRow"],[75,20,74,26],[75,23,74,29,"getNthKey"],[75,32,74,38],[75,33,74,39,"parent"],[75,39,74,45],[75,41,74,47,"row"],[75,45,74,50],[75,46,74,51],[76,8,75,12],[76,16,75,20,"type"],[76,20,75,24],[77,10,76,16],[77,15,76,21],[77,20,76,26],[78,12,77,20,"parent"],[78,18,77,26],[78,21,77,29,"keyOfRow"],[78,29,77,37],[79,12,78,20],[80,10,79,16],[80,15,79,21],[80,22,79,28],[81,12,80,20,"parent"],[81,18,80,26],[81,21,80,29,"parent"],[81,27,80,35],[81,28,80,36,"get"],[81,31,80,39],[81,32,80,40,"keyOfRow"],[81,40,80,48],[81,41,80,49],[82,12,81,20],[83,8,82,12],[84,6,83,8],[85,4,84,4],[86,4,85,4],[86,8,85,10,"lastKey"],[86,15,85,17],[86,18,85,20,"path"],[86,22,85,24],[86,23,85,25,"path"],[86,27,85,29],[86,28,85,30,"length"],[86,34,85,36],[86,37,85,39],[86,38,85,40],[86,39,85,41],[87,4,86,4],[87,8,86,8],[87,12,86,8,"isArray"],[87,23,86,15],[87,25,86,16,"parent"],[87,31,86,22],[87,32,86,23],[87,34,86,25],[88,6,87,8,"parent"],[88,12,87,14],[88,13,87,15],[88,14,87,16,"lastKey"],[88,21,87,23],[88,22,87,24],[88,25,87,27,"mapper"],[88,31,87,33],[88,32,87,34,"parent"],[88,38,87,40],[88,39,87,41],[88,40,87,42,"lastKey"],[88,47,87,49],[88,48,87,50],[88,49,87,51],[89,4,88,4],[89,5,88,5],[89,11,89,9],[89,15,89,13],[89,19,89,13,"isPlainObject"],[89,36,89,26],[89,38,89,27,"parent"],[89,44,89,33],[89,45,89,34],[89,47,89,36],[90,6,90,8,"parent"],[90,12,90,14],[90,13,90,15,"lastKey"],[90,20,90,22],[90,21,90,23],[90,24,90,26,"mapper"],[90,30,90,32],[90,31,90,33,"parent"],[90,37,90,39],[90,38,90,40,"lastKey"],[90,45,90,47],[90,46,90,48],[90,47,90,49],[91,4,91,4],[92,4,92,4],[92,8,92,8],[92,12,92,8,"isSet"],[92,21,92,13],[92,23,92,14,"parent"],[92,29,92,20],[92,30,92,21],[92,32,92,23],[93,6,93,8],[93,10,93,14,"oldValue"],[93,18,93,22],[93,21,93,25,"getNthKey"],[93,30,93,34],[93,31,93,35,"parent"],[93,37,93,41],[93,39,93,43],[93,40,93,44,"lastKey"],[93,47,93,51],[93,48,93,52],[94,6,94,8],[94,10,94,14,"newValue"],[94,18,94,22],[94,21,94,25,"mapper"],[94,27,94,31],[94,28,94,32,"oldValue"],[94,36,94,40],[94,37,94,41],[95,6,95,8],[95,10,95,12,"oldValue"],[95,18,95,20],[95,23,95,25,"newValue"],[95,31,95,33],[95,33,95,35],[96,8,96,12,"parent"],[96,14,96,18],[96,15,96,19,"delete"],[96,21,96,25],[96,22,96,26,"oldValue"],[96,30,96,34],[96,31,96,35],[97,8,97,12,"parent"],[97,14,97,18],[97,15,97,19,"add"],[97,18,97,22],[97,19,97,23,"newValue"],[97,27,97,31],[97,28,97,32],[98,6,98,8],[99,4,99,4],[100,4,100,4],[100,8,100,8],[100,12,100,8,"isMap"],[100,21,100,13],[100,23,100,14,"parent"],[100,29,100,20],[100,30,100,21],[100,32,100,23],[101,6,101,8],[101,10,101,14,"row"],[101,15,101,17],[101,18,101,20],[101,19,101,21,"path"],[101,23,101,25],[101,24,101,26,"path"],[101,28,101,30],[101,29,101,31,"length"],[101,35,101,37],[101,38,101,40],[101,39,101,41],[101,40,101,42],[102,6,102,8],[102,10,102,14,"keyToRow"],[102,18,102,22],[102,21,102,25,"getNthKey"],[102,30,102,34],[102,31,102,35,"parent"],[102,37,102,41],[102,39,102,43,"row"],[102,44,102,46],[102,45,102,47],[103,6,103,8],[103,10,103,14,"type"],[103,15,103,18],[103,18,103,21],[103,19,103,22,"lastKey"],[103,26,103,29],[103,31,103,34],[103,32,103,35],[103,35,103,38],[103,40,103,43],[103,43,103,46],[103,50,103,53],[104,6,104,8],[104,14,104,16,"type"],[104,19,104,20],[105,8,105,12],[105,13,105,17],[105,18,105,22],[106,10,105,24],[107,12,106,16],[107,16,106,22,"newKey"],[107,22,106,28],[107,25,106,31,"mapper"],[107,31,106,37],[107,32,106,38,"keyToRow"],[107,40,106,46],[107,41,106,47],[108,12,107,16,"parent"],[108,18,107,22],[108,19,107,23,"set"],[108,22,107,26],[108,23,107,27,"newKey"],[108,29,107,33],[108,31,107,35,"parent"],[108,37,107,41],[108,38,107,42,"get"],[108,41,107,45],[108,42,107,46,"keyToRow"],[108,50,107,54],[108,51,107,55],[108,52,107,56],[109,12,108,16],[109,16,108,20,"newKey"],[109,22,108,26],[109,27,108,31,"keyToRow"],[109,35,108,39],[109,37,108,41],[110,14,109,20,"parent"],[110,20,109,26],[110,21,109,27,"delete"],[110,27,109,33],[110,28,109,34,"keyToRow"],[110,36,109,42],[110,37,109,43],[111,12,110,16],[112,12,111,16],[113,10,112,12],[114,8,113,12],[114,13,113,17],[114,20,113,24],[115,10,113,26],[116,12,114,16,"parent"],[116,18,114,22],[116,19,114,23,"set"],[116,22,114,26],[116,23,114,27,"keyToRow"],[116,31,114,35],[116,33,114,37,"mapper"],[116,39,114,43],[116,40,114,44,"parent"],[116,46,114,50],[116,47,114,51,"get"],[116,50,114,54],[116,51,114,55,"keyToRow"],[116,59,114,63],[116,60,114,64],[116,61,114,65],[116,62,114,66],[117,12,115,16],[118,10,116,12],[119,6,117,8],[120,4,118,4],[121,4,119,4],[121,11,119,11,"object"],[121,17,119,17],[122,2,120,0],[122,3,120,1],[123,2,120,2,"exports"],[123,9,120,2],[123,10,120,2,"setDeep"],[123,17,120,2],[123,20,120,2,"setDeep"],[123,27,120,2],[124,0,120,2],[124,3]],"functionMap":{"names":["<global>","getNthKey","validatePath","getDeep","setDeep"],"mappings":"AAA;kBCE;CDO;AEC;CFU;uBGC;CHyB;uBIC;CJwE"}},"type":"js/module"}]}