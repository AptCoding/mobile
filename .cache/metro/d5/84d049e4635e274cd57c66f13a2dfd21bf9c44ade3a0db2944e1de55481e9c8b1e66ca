{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":137,"column":48,"index":6282}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":137,"column":48,"index":6282}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Sb18HVO7Z9parflifpOTJGbVls0="}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"Js5E+GA+GV/Gasg+D08v1eWZfoo="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_ACTION_IDENTIFIER = void 0;\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.removeNotificationSubscription = removeNotificationSubscription;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _NotificationsEmitterModule = _interopRequireDefault(require(_dependencyMap[3], \"./NotificationsEmitterModule\"));\n  var _mapNotificationResponse = require(_dependencyMap[4], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  var emitter = new _expoModulesCore.LegacyEventEmitter(_NotificationsEmitterModule.default);\n  var didReceiveNotificationEventName = 'onDidReceiveNotification';\n  var didDropNotificationsEventName = 'onNotificationsDeleted';\n  var didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  var didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  var DEFAULT_ACTION_IDENTIFIER = exports.DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      var mappedNotification = (0, _mapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      var mappedResponse = (0, _mapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   * Removes a notification subscription returned by an `addNotificationListener` call.\n   * @param subscription A subscription returned by `addNotificationListener` method.\n   * @header listen\n   */\n  function removeNotificationSubscription(subscription) {\n    if (typeof subscription?.remove === 'function') {\n      subscription.remove();\n    } else {\n      throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n    }\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponseAsync() {\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @return A promise that resolves if the native call was successful.\n   */\n  function _getLastNotificationResponseAsync() {\n    _getLastNotificationResponseAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_NotificationsEmitterModule.default.getLastNotificationResponseAsync) {\n        throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n      }\n      var response = yield _NotificationsEmitterModule.default.getLastNotificationResponseAsync();\n      var mappedResponse = response ? (0, _mapNotificationResponse.mapNotificationResponse)(response) : response;\n      return mappedResponse;\n    });\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function clearLastNotificationResponseAsync() {\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * @hidden\n   */\n  function _clearLastNotificationResponseAsync() {\n    _clearLastNotificationResponseAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_NotificationsEmitterModule.default.clearLastNotificationResponseAsync) {\n        throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n      }\n      yield _NotificationsEmitterModule.default.clearLastNotificationResponseAsync();\n      // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n      emitter.emit(didClearNotificationResponseEventName, []);\n    });\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":162,"map":[[15,2,1,0],[15,6,1,0,"_expoModulesCore"],[15,22,1,0],[15,25,1,0,"require"],[15,32,1,0],[15,33,1,0,"_dependencyMap"],[15,47,1,0],[16,2,2,0],[16,6,2,0,"_NotificationsEmitterModule"],[16,33,2,0],[16,36,2,0,"_interopRequireDefault"],[16,58,2,0],[16,59,2,0,"require"],[16,66,2,0],[16,67,2,0,"_dependencyMap"],[16,81,2,0],[17,2,3,0],[17,6,3,0,"_mapNotificationResponse"],[17,30,3,0],[17,33,3,0,"require"],[17,40,3,0],[17,41,3,0,"_dependencyMap"],[17,55,3,0],[18,2,4,0],[19,2,5,0],[19,6,5,6,"emitter"],[19,13,5,13],[19,16,5,16],[19,20,5,20,"LegacyEventEmitter"],[19,55,5,38],[19,56,5,39,"NotificationsEmitterModule"],[19,91,5,65],[19,92,5,66],[20,2,6,0],[20,6,6,6,"didReceiveNotificationEventName"],[20,37,6,37],[20,40,6,40],[20,66,6,66],[21,2,7,0],[21,6,7,6,"didDropNotificationsEventName"],[21,35,7,35],[21,38,7,38],[21,62,7,62],[22,2,8,0],[22,6,8,6,"didReceiveNotificationResponseEventName"],[22,45,8,45],[22,48,8,48],[22,82,8,82],[23,2,9,0],[23,6,9,6,"didClearNotificationResponseEventName"],[23,43,9,43],[23,46,9,46],[23,78,9,78],[24,2,10,0],[25,2,11,7],[25,6,11,13,"DEFAULT_ACTION_IDENTIFIER"],[25,31,11,38],[25,34,11,38,"exports"],[25,41,11,38],[25,42,11,38,"DEFAULT_ACTION_IDENTIFIER"],[25,67,11,38],[25,70,11,41],[25,114,11,85],[26,2,12,0],[27,0,13,0],[28,0,14,0],[29,0,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,0,24,0],[39,0,25,0],[40,0,26,0],[41,0,27,0],[42,0,28,0],[43,0,29,0],[44,0,30,0],[45,0,31,0],[46,0,32,0],[47,0,33,0],[48,0,34,0],[49,0,35,0],[50,2,36,7],[50,11,36,16,"addNotificationReceivedListener"],[50,42,36,47,"addNotificationReceivedListener"],[50,43,36,48,"listener"],[50,51,36,56],[50,53,36,58],[51,4,37,4],[51,11,37,11,"emitter"],[51,18,37,18],[51,19,37,19,"addListener"],[51,30,37,30],[51,31,37,31,"didReceiveNotificationEventName"],[51,62,37,62],[51,64,37,65,"notification"],[51,76,37,77],[51,80,37,82],[52,6,38,8],[52,10,38,14,"mappedNotification"],[52,28,38,32],[52,31,38,35],[52,35,38,35,"mapNotification"],[52,75,38,50],[52,77,38,51,"notification"],[52,89,38,63],[52,90,38,64],[53,6,39,8,"listener"],[53,14,39,16],[53,15,39,17,"mappedNotification"],[53,33,39,35],[53,34,39,36],[54,4,40,4],[54,5,40,5],[54,6,40,6],[55,2,41,0],[56,2,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,0,48,0],[63,0,49,0],[64,2,50,7],[64,11,50,16,"addNotificationsDroppedListener"],[64,42,50,47,"addNotificationsDroppedListener"],[64,43,50,48,"listener"],[64,51,50,56],[64,53,50,58],[65,4,51,4],[65,11,51,11,"emitter"],[65,18,51,18],[65,19,51,19,"addListener"],[65,30,51,30],[65,31,51,31,"didDropNotificationsEventName"],[65,60,51,60],[65,62,51,62,"listener"],[65,70,51,70],[65,71,51,71],[66,2,52,0],[67,2,53,0],[68,0,54,0],[69,0,55,0],[70,0,56,0],[71,0,57,0],[72,0,58,0],[73,0,59,0],[74,0,60,0],[75,0,61,0],[76,0,62,0],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,0,66,0],[81,0,67,0],[82,0,68,0],[83,0,69,0],[84,0,70,0],[85,0,71,0],[86,0,72,0],[87,0,73,0],[88,0,74,0],[89,0,75,0],[90,0,76,0],[91,0,77,0],[92,0,78,0],[93,2,79,7],[93,11,79,16,"addNotificationResponseReceivedListener"],[93,50,79,55,"addNotificationResponseReceivedListener"],[93,51,79,56,"listener"],[93,59,79,64],[93,61,79,66],[94,4,80,4],[94,11,80,11,"emitter"],[94,18,80,18],[94,19,80,19,"addListener"],[94,30,80,30],[94,31,80,31,"didReceiveNotificationResponseEventName"],[94,70,80,70],[94,72,80,73,"response"],[94,80,80,81],[94,84,80,86],[95,6,81,8],[95,10,81,14,"mappedResponse"],[95,24,81,28],[95,27,81,31],[95,31,81,31,"mapNotificationResponse"],[95,79,81,54],[95,81,81,55,"response"],[95,89,81,63],[95,90,81,64],[96,6,82,8,"listener"],[96,14,82,16],[96,15,82,17,"mappedResponse"],[96,29,82,31],[96,30,82,32],[97,4,83,4],[97,5,83,5],[97,6,83,6],[98,2,84,0],[99,2,85,0],[100,0,86,0],[101,0,87,0],[102,0,88,0],[103,0,89,0],[104,2,90,7],[104,11,90,16,"removeNotificationSubscription"],[104,41,90,46,"removeNotificationSubscription"],[104,42,90,47,"subscription"],[104,54,90,59],[104,56,90,61],[105,4,91,4],[105,8,91,8],[105,15,91,15,"subscription"],[105,27,91,27],[105,29,91,29,"remove"],[105,35,91,35],[105,40,91,40],[105,50,91,50],[105,52,91,52],[106,6,92,8,"subscription"],[106,18,92,20],[106,19,92,21,"remove"],[106,25,92,27],[106,26,92,28],[106,27,92,29],[107,4,93,4],[107,5,93,5],[107,11,94,9],[108,6,95,8],[108,12,95,14],[108,16,95,18,"Error"],[108,21,95,23],[108,22,95,24],[108,95,95,97,"subscription"],[108,107,95,109],[108,109,95,111],[108,110,95,112],[109,4,96,4],[110,2,97,0],[111,2,98,0],[112,0,99,0],[113,0,100,0],[114,0,101,0],[115,0,102,0],[116,0,103,0],[117,0,104,0],[118,2,98,0],[118,11,105,22,"getLastNotificationResponseAsync"],[118,43,105,54,"getLastNotificationResponseAsync"],[118,44,105,54],[119,4,105,54],[119,11,105,54,"_getLastNotificationResponseAsync"],[119,44,105,54],[119,45,105,54,"apply"],[119,50,105,54],[119,57,105,54,"arguments"],[119,66,105,54],[120,2,105,54],[121,2,113,0],[122,0,114,0],[123,0,115,0],[124,0,116,0],[125,0,117,0],[126,0,118,0],[127,0,119,0],[128,0,120,0],[129,0,121,0],[130,0,122,0],[131,2,113,0],[131,11,113,0,"_getLastNotificationResponseAsync"],[131,45,113,0],[132,4,113,0,"_getLastNotificationResponseAsync"],[132,37,113,0],[132,44,113,0,"_asyncToGenerator2"],[132,62,113,0],[132,63,113,0,"default"],[132,70,113,0],[132,72,105,7],[132,85,105,57],[133,6,106,4],[133,10,106,8],[133,11,106,9,"NotificationsEmitterModule"],[133,46,106,35],[133,47,106,36,"getLastNotificationResponseAsync"],[133,79,106,68],[133,81,106,70],[134,8,107,8],[134,14,107,14],[134,18,107,18,"UnavailabilityError"],[134,54,107,37],[134,55,107,38],[134,74,107,57],[134,76,107,59],[134,110,107,93],[134,111,107,94],[135,6,108,4],[136,6,109,4],[136,10,109,10,"response"],[136,18,109,18],[136,27,109,27,"NotificationsEmitterModule"],[136,62,109,53],[136,63,109,54,"getLastNotificationResponseAsync"],[136,95,109,86],[136,96,109,87],[136,97,109,88],[137,6,110,4],[137,10,110,10,"mappedResponse"],[137,24,110,24],[137,27,110,27,"response"],[137,35,110,35],[137,38,110,38],[137,42,110,38,"mapNotificationResponse"],[137,90,110,61],[137,92,110,62,"response"],[137,100,110,70],[137,101,110,71],[137,104,110,74,"response"],[137,112,110,82],[138,6,111,4],[138,13,111,11,"mappedResponse"],[138,27,111,25],[139,4,112,0],[139,5,112,1],[140,4,112,1],[140,11,112,1,"_getLastNotificationResponseAsync"],[140,44,112,1],[140,45,112,1,"apply"],[140,50,112,1],[140,57,112,1,"arguments"],[140,66,112,1],[141,2,112,1],[142,2,112,1],[142,11,123,22,"clearLastNotificationResponseAsync"],[142,45,123,56,"clearLastNotificationResponseAsync"],[142,46,123,56],[143,4,123,56],[143,11,123,56,"_clearLastNotificationResponseAsync"],[143,46,123,56],[143,47,123,56,"apply"],[143,52,123,56],[143,59,123,56,"arguments"],[143,68,123,56],[144,2,123,56],[145,2,131,0],[146,0,132,0],[147,0,133,0],[148,2,131,0],[148,11,131,0,"_clearLastNotificationResponseAsync"],[148,47,131,0],[149,4,131,0,"_clearLastNotificationResponseAsync"],[149,39,131,0],[149,46,131,0,"_asyncToGenerator2"],[149,64,131,0],[149,65,131,0,"default"],[149,72,131,0],[149,74,123,7],[149,87,123,59],[150,6,124,4],[150,10,124,8],[150,11,124,9,"NotificationsEmitterModule"],[150,46,124,35],[150,47,124,36,"clearLastNotificationResponseAsync"],[150,81,124,70],[150,83,124,72],[151,8,125,8],[151,14,125,14],[151,18,125,18,"UnavailabilityError"],[151,54,125,37],[151,55,125,38],[151,74,125,57],[151,76,125,59],[151,110,125,93],[151,111,125,94],[152,6,126,4],[153,6,127,4],[153,12,127,10,"NotificationsEmitterModule"],[153,47,127,36],[153,48,127,37,"clearLastNotificationResponseAsync"],[153,82,127,71],[153,83,127,72],[153,84,127,73],[154,6,128,4],[155,6,129,4,"emitter"],[155,13,129,11],[155,14,129,12,"emit"],[155,18,129,16],[155,19,129,17,"didClearNotificationResponseEventName"],[155,56,129,54],[155,58,129,56],[155,60,129,58],[155,61,129,59],[156,4,130,0],[156,5,130,1],[157,4,130,1],[157,11,130,1,"_clearLastNotificationResponseAsync"],[157,46,130,1],[157,47,130,1,"apply"],[157,52,130,1],[157,59,130,1,"arguments"],[157,68,130,1],[158,2,130,1],[159,2,134,7],[159,11,134,16,"addNotificationResponseClearedListener"],[159,49,134,54,"addNotificationResponseClearedListener"],[159,50,134,55,"listener"],[159,58,134,63],[159,60,134,65],[160,4,135,4],[160,11,135,11,"emitter"],[160,18,135,18],[160,19,135,19,"addListener"],[160,30,135,30],[160,31,135,31,"didClearNotificationResponseEventName"],[160,68,135,68],[160,70,135,70,"listener"],[160,78,135,78],[160,79,135,79],[161,2,136,0],[162,0,136,1],[162,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","getLastNotificationResponseAsync","clearLastNotificationResponseAsync","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKM;CLO;OMQ;CNO;OOW;CPO;OQI;CRE"}},"type":"js/module"}]}