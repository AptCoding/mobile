{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":642,"column":0,"index":28162}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":642,"column":0,"index":28162}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":642,"column":0,"index":28162}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":75,"index":75}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"use-sync-external-store/shim/index.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":76},"end":{"line":2,"column":77,"index":153}}],"key":"KUpeHrw/rXp77O4eLlPYNx8PemM="}},{"name":"../_internal/index.mjs","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":154},"end":{"line":3,"column":412,"index":566}}],"key":"GRmlQe/wMs4X/jG5GR09bHzFg6s="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.SWRConfig = void 0;\n  Object.defineProperty(exports, \"mutate\", {\n    enumerable: true,\n    get: function () {\n      return _index2.mutate;\n    }\n  });\n  Object.defineProperty(exports, \"preload\", {\n    enumerable: true,\n    get: function () {\n      return _index2.preload;\n    }\n  });\n  exports.unstable_serialize = void 0;\n  Object.defineProperty(exports, \"useSWRConfig\", {\n    enumerable: true,\n    get: function () {\n      return _index2.useSWRConfig;\n    }\n  });\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = _interopRequireWildcard(require(_dependencyMap[3], \"react\"));\n  var _index = require(_dependencyMap[4], \"use-sync-external-store/shim/index.js\");\n  var _index2 = require(_dependencyMap[5], \"../_internal/index.mjs\");\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  // Shared state between server components and client components\n  var noop = () => {};\n  // Using noop() as the undefined value as undefined can be replaced\n  // by something else. Prettier ignore and extra parentheses are necessary here\n  // to ensure that tsc doesn't remove the __NOINLINE__ comment.\n  // prettier-ignore\n  var UNDEFINED = /*#__NOINLINE__*/noop();\n  var OBJECT = Object;\n  var isUndefined = v => v === UNDEFINED;\n  var isFunction = v => typeof v == 'function';\n\n  // use WeakMap to store the object->key mapping\n  // so the objects can be garbage collected.\n  // WeakMap uses a hashtable under the hood, so the lookup\n  // complexity is almost O(1).\n  var table = new WeakMap();\n  var isObjectType = (value, type) => OBJECT.prototype.toString.call(value) === `[object ${type}]`;\n  // counter of the key\n  var counter = 0;\n  // A stable hash implementation that supports:\n  // - Fast and ensures unique hash properties\n  // - Handles unserializable values\n  // - Handles object key ordering\n  // - Generates short results\n  //\n  // This is not a serialization function, and the result is not guaranteed to be\n  // parsable.\n  var stableHash = arg => {\n    var type = typeof arg;\n    var isDate = isObjectType(arg, 'Date');\n    var isRegex = isObjectType(arg, 'RegExp');\n    var isPlainObject = isObjectType(arg, 'Object');\n    var result;\n    var index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n      // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n      // If it's already hashed, directly return the result.\n      result = table.get(arg);\n      if (result) return result;\n      // Store the hash first for circular reference detection before entering the\n      // recursive `stableHash` calls.\n      // For other objects like set and map, we use this id directly as the hash.\n      result = ++counter + '~';\n      table.set(arg, result);\n      if (Array.isArray(arg)) {\n        // Array.\n        result = '@';\n        for (index = 0; index < arg.length; index++) {\n          result += stableHash(arg[index]) + ',';\n        }\n        table.set(arg, result);\n      }\n      if (isPlainObject) {\n        // Object, sort keys.\n        result = '#';\n        var keys = OBJECT.keys(arg).sort();\n        while (!isUndefined(index = keys.pop())) {\n          if (!isUndefined(arg[index])) {\n            result += index + ':' + stableHash(arg[index]) + ',';\n          }\n        }\n        table.set(arg, result);\n      }\n    } else {\n      result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n  };\n  var serialize = key => {\n    if (isFunction(key)) {\n      try {\n        key = key();\n      } catch (err) {\n        // dependencies not ready\n        key = '';\n      }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    var args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [key, args];\n  };\n  var unstable_serialize = key => serialize(key)[0];\n\n  /// <reference types=\"react/experimental\" />\n  exports.unstable_serialize = unstable_serialize;\n  var use = _react.default.use || (\n  // This extra generic is to avoid TypeScript mixing up the generic and JSX sytax\n  // and emitting an error.\n  // We assume that this is only for the `use(thenable)` case, not `use(context)`.\n  // https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\n  thenable => {\n    switch (thenable.status) {\n      case 'pending':\n        throw thenable;\n      case 'fulfilled':\n        return thenable.value;\n      case 'rejected':\n        throw thenable.reason;\n      default:\n        thenable.status = 'pending';\n        thenable.then(v => {\n          thenable.status = 'fulfilled';\n          thenable.value = v;\n        }, e => {\n          thenable.status = 'rejected';\n          thenable.reason = e;\n        });\n        throw thenable;\n    }\n  });\n  var WITH_DEDUPE = {\n    dedupe: true\n  };\n  var useSWRHandler = (_key, fetcher, config) => {\n    var cache = config.cache,\n      compare = config.compare,\n      suspense = config.suspense,\n      fallbackData = config.fallbackData,\n      revalidateOnMount = config.revalidateOnMount,\n      revalidateIfStale = config.revalidateIfStale,\n      refreshInterval = config.refreshInterval,\n      refreshWhenHidden = config.refreshWhenHidden,\n      refreshWhenOffline = config.refreshWhenOffline,\n      keepPreviousData = config.keepPreviousData;\n    var _SWRGlobalState$get = _index2.SWRGlobalState.get(cache),\n      _SWRGlobalState$get2 = (0, _slicedToArray2.default)(_SWRGlobalState$get, 4),\n      EVENT_REVALIDATORS = _SWRGlobalState$get2[0],\n      MUTATION = _SWRGlobalState$get2[1],\n      FETCH = _SWRGlobalState$get2[2],\n      PRELOAD = _SWRGlobalState$get2[3];\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    var _serialize$ = (0, _index2.serialize)(_key),\n      _serialize$2 = (0, _slicedToArray2.default)(_serialize$, 2),\n      key = _serialize$2[0],\n      fnArg = _serialize$2[1];\n    // If it's the initial render of this hook.\n    var initialMountedRef = (0, _react.useRef)(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    var unmountedRef = (0, _react.useRef)(false);\n    // Refs to keep the key and config.\n    var keyRef = (0, _react.useRef)(key);\n    var fetcherRef = (0, _react.useRef)(fetcher);\n    var configRef = (0, _react.useRef)(config);\n    var getConfig = () => configRef.current;\n    var isActive = () => getConfig().isVisible() && getConfig().isOnline();\n    var _createCacheHelper = (0, _index2.createCacheHelper)(cache, key),\n      _createCacheHelper2 = (0, _slicedToArray2.default)(_createCacheHelper, 4),\n      getCache = _createCacheHelper2[0],\n      setCache = _createCacheHelper2[1],\n      subscribeCache = _createCacheHelper2[2],\n      getInitialCache = _createCacheHelper2[3];\n    var stateDependencies = (0, _react.useRef)({}).current;\n    // Resolve the fallback data from either the inline option, or the global provider.\n    // If it's a promise, we simply let React suspend and resolve it for us.\n    var fallback = (0, _index2.isUndefined)(fallbackData) ? (0, _index2.isUndefined)(config.fallback) ? _index2.UNDEFINED : config.fallback[key] : fallbackData;\n    var isEqual = (prev, current) => {\n      for (var _ in stateDependencies) {\n        var t = _;\n        if (t === 'data') {\n          if (!compare(prev[t], current[t])) {\n            if (!(0, _index2.isUndefined)(prev[t])) {\n              return false;\n            }\n            if (!compare(returnedData, current[t])) {\n              return false;\n            }\n          }\n        } else {\n          if (current[t] !== prev[t]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    var getSnapshot = (0, _react.useMemo)(() => {\n      var shouldStartRequest = (() => {\n        if (!key) return false;\n        if (!fetcher) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (!(0, _index2.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        if (suspense) return false;\n        return revalidateIfStale !== false;\n      })();\n      // Get the cache and merge it with expected states.\n      var getSelectedCache = state => {\n        // We only select the needed fields from the state.\n        var snapshot = (0, _index2.mergeObjects)(state);\n        delete snapshot._k;\n        if (!shouldStartRequest) {\n          return snapshot;\n        }\n        return {\n          isValidating: true,\n          isLoading: true,\n          ...snapshot\n        };\n      };\n      var cachedData = getCache();\n      var initialData = getInitialCache();\n      var clientSnapshot = getSelectedCache(cachedData);\n      var serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n      // To make sure that we are returning the same object reference to avoid\n      // unnecessary re-renders, we keep the previous snapshot and use deep\n      // comparison to check if we need to return a new one.\n      var memorizedSnapshot = clientSnapshot;\n      return [() => {\n        var newSnapshot = getSelectedCache(getCache());\n        var compareResult = isEqual(newSnapshot, memorizedSnapshot);\n        if (compareResult) {\n          // Mentally, we should always return the `memorizedSnapshot` here\n          // as there's no change between the new and old snapshots.\n          // However, since the `isEqual` function only compares selected fields,\n          // the values of the unselected fields might be changed. That's\n          // simply because we didn't track them.\n          // To support the case in https://github.com/vercel/swr/pull/2576,\n          // we need to update these fields in the `memorizedSnapshot` too\n          // with direct mutations to ensure the snapshot is always up-to-date\n          // even for the unselected fields, but only trigger re-renders when\n          // the selected fields are changed.\n          memorizedSnapshot.data = newSnapshot.data;\n          memorizedSnapshot.isLoading = newSnapshot.isLoading;\n          memorizedSnapshot.isValidating = newSnapshot.isValidating;\n          memorizedSnapshot.error = newSnapshot.error;\n          return memorizedSnapshot;\n        } else {\n          memorizedSnapshot = newSnapshot;\n          return newSnapshot;\n        }\n      }, () => serverSnapshot];\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cache, key]);\n    // Get the current state that SWR should return.\n    var cached = (0, _index.useSyncExternalStore)((0, _react.useCallback)(callback => subscribeCache(key, (current, prev) => {\n      if (!isEqual(prev, current)) callback();\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cache, key]), getSnapshot[0], getSnapshot[1]);\n    var isInitialMount = !initialMountedRef.current;\n    var hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    var cachedData = cached.data;\n    var data = (0, _index2.isUndefined)(cachedData) ? fallback && (0, _index2.isPromiseLike)(fallback) ? use(fallback) : fallback : cachedData;\n    var error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    var laggyDataRef = (0, _react.useRef)(data);\n    var returnedData = keepPreviousData ? (0, _index2.isUndefined)(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    var shouldDoInitialRevalidation = (() => {\n      // if a key already has revalidators and also has error, we should not trigger revalidation\n      if (hasRevalidator && !(0, _index2.isUndefined)(error)) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (isInitialMount && !(0, _index2.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      // Under suspense mode, it will always fetch on render if there is no\n      // stale data so no need to revalidate immediately mount it again.\n      // If data exists, only revalidate if `revalidateIfStale` is true.\n      if (suspense) return (0, _index2.isUndefined)(data) ? false : revalidateIfStale;\n      // If there is no stale data, we need to revalidate when mount;\n      // If `revalidateIfStale` is set to true, we will always revalidate.\n      return (0, _index2.isUndefined)(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    var defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    var isValidating = (0, _index2.isUndefined)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    var isLoading = (0, _index2.isUndefined)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    var revalidate = (0, _react.useCallback)(/*#__PURE__*/function () {\n      var _ref = (0, _asyncToGenerator2.default)(function* (revalidateOpts) {\n        var currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n          return false;\n        }\n        var newData;\n        var startAt;\n        var loading = true;\n        var opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        var shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n         For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n        */\n        var callbackSafeguard = () => {\n          if (_index2.IS_REACT_LEGACY) {\n            return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n          }\n          return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        var finalState = {\n          isValidating: false,\n          isLoading: false\n        };\n        var finishRequestAndUpdateState = () => {\n          setCache(finalState);\n        };\n        var cleanupState = () => {\n          // Check if it's still the same request before deleting it.\n          var requestInfo = FETCH[key];\n          if (requestInfo && requestInfo[1] === startAt) {\n            delete FETCH[key];\n          }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        var initialState = {\n          isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if ((0, _index2.isUndefined)(getCache().data)) {\n          initialState.isLoading = true;\n        }\n        try {\n          if (shouldStartNewRequest) {\n            setCache(initialState);\n            // If no cache is being rendered currently (it shows a blank page),\n            // we trigger the loading slow event.\n            if (config.loadingTimeout && (0, _index2.isUndefined)(getCache().data)) {\n              setTimeout(() => {\n                if (loading && callbackSafeguard()) {\n                  getConfig().onLoadingSlow(key, config);\n                }\n              }, config.loadingTimeout);\n            }\n            // Start the request and save the timestamp.\n            // Key must be truthy if entering here.\n            FETCH[key] = [currentFetcher(fnArg), (0, _index2.getTimestamp)()];\n          }\n          // Wait until the ongoing request is done. Deduplication is also\n          // considered here.\n          ;\n          var _FETCH$key = (0, _slicedToArray2.default)(FETCH[key], 2);\n          newData = _FETCH$key[0];\n          startAt = _FETCH$key[1];\n          newData = yield newData;\n          if (shouldStartNewRequest) {\n            // If the request isn't interrupted, clean it up after the\n            // deduplication interval.\n            setTimeout(cleanupState, config.dedupingInterval);\n          }\n          // If there're other ongoing request(s), started after the current one,\n          // we need to ignore the current one to avoid possible race conditions:\n          //   req1------------------>res1        (current one)\n          //        req2---------------->res2\n          // the request that fired later will always be kept.\n          // The timestamp maybe be `undefined` or a number\n          if (!FETCH[key] || FETCH[key][1] !== startAt) {\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return false;\n          }\n          // Clear error.\n          finalState.error = _index2.UNDEFINED;\n          // If there're other mutations(s), that overlapped with the current revalidation:\n          // case 1:\n          //   req------------------>res\n          //       mutate------>end\n          // case 2:\n          //         req------------>res\n          //   mutate------>end\n          // case 3:\n          //   req------------------>res\n          //       mutate-------...---------->\n          // we have to ignore the revalidation result (res) because it's no longer fresh.\n          // meanwhile, a new revalidation should be triggered when the mutation ends.\n          var mutationInfo = MUTATION[key];\n          if (!(0, _index2.isUndefined)(mutationInfo) && (\n          // case 1\n          startAt <= mutationInfo[0] ||\n          // case 2\n          startAt <= mutationInfo[1] ||\n          // case 3\n          mutationInfo[1] === 0)) {\n            finishRequestAndUpdateState();\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return false;\n          }\n          // Deep compare with the latest state to avoid extra re-renders.\n          // For local state, compare and assign.\n          var cacheData = getCache().data;\n          // Since the compare fn could be custom fn\n          // cacheData might be different from newData even when compare fn returns True\n          finalState.data = compare(cacheData, newData) ? cacheData : newData;\n          // Trigger the successful callback if it's the original request.\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onSuccess(newData, key, config);\n            }\n          }\n        } catch (err) {\n          cleanupState();\n          var currentConfig = getConfig();\n          var shouldRetryOnError = currentConfig.shouldRetryOnError;\n          // Not paused, we continue handling the error. Otherwise, discard it.\n          if (!currentConfig.isPaused()) {\n            // Get a new error, don't use deep comparison for errors.\n            finalState.error = err;\n            // Error event and retry logic. Only for the actual request, not\n            // deduped ones.\n            if (shouldStartNewRequest && callbackSafeguard()) {\n              currentConfig.onError(err, key, currentConfig);\n              if (shouldRetryOnError === true || (0, _index2.isFunction)(shouldRetryOnError) && shouldRetryOnError(err)) {\n                if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                  // If it's inactive, stop. It will auto-revalidate when\n                  // refocusing or reconnecting.\n                  // When retrying, deduplication is always enabled.\n                  currentConfig.onErrorRetry(err, key, currentConfig, _opts => {\n                    var revalidators = EVENT_REVALIDATORS[key];\n                    if (revalidators && revalidators[0]) {\n                      revalidators[0](_index2.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                    }\n                  }, {\n                    retryCount: (opts.retryCount || 0) + 1,\n                    dedupe: true\n                  });\n                }\n              }\n            }\n          }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key, cache]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    var boundMutate = (0, _react.useCallback)(\n    // Use callback to make sure `keyRef.current` returns latest result every time\n    function () {\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return (0, _index2.internalMutate)(cache, keyRef.current, ...args);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    (0, _index2.useIsomorphicLayoutEffect)(() => {\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      // Handle laggy data updates. If there's cached data of the current key,\n      // it'll be the correct reference.\n      if (!(0, _index2.isUndefined)(cachedData)) {\n        laggyDataRef.current = cachedData;\n      }\n    });\n    // After mounted or key changed.\n    (0, _index2.useIsomorphicLayoutEffect)(() => {\n      if (!key) return;\n      var softRevalidate = revalidate.bind(_index2.UNDEFINED, WITH_DEDUPE);\n      // Expose revalidators to global event listeners. So we can trigger\n      // revalidation from the outside.\n      var nextFocusRevalidatedAt = 0;\n      var onRevalidate = function (type) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (type == _index2.revalidateEvents.FOCUS_EVENT) {\n          var now = Date.now();\n          if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n            nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n            softRevalidate();\n          }\n        } else if (type == _index2.revalidateEvents.RECONNECT_EVENT) {\n          if (getConfig().revalidateOnReconnect && isActive()) {\n            softRevalidate();\n          }\n        } else if (type == _index2.revalidateEvents.MUTATE_EVENT) {\n          return revalidate();\n        } else if (type == _index2.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n          return revalidate(opts);\n        }\n        return;\n      };\n      var unsubEvents = (0, _index2.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n      // Mark the component as mounted and update corresponding refs.\n      unmountedRef.current = false;\n      keyRef.current = key;\n      initialMountedRef.current = true;\n      // Keep the original key in the cache.\n      setCache({\n        _k: fnArg\n      });\n      // Trigger a revalidation\n      if (shouldDoInitialRevalidation) {\n        if ((0, _index2.isUndefined)(data) || _index2.IS_SERVER) {\n          // Revalidate immediately.\n          softRevalidate();\n        } else {\n          // Delay the revalidate if we have data to return so we won't block\n          // rendering.\n          (0, _index2.rAF)(softRevalidate);\n        }\n      }\n      return () => {\n        // Mark it as unmounted.\n        unmountedRef.current = true;\n        unsubEvents();\n      };\n    }, [key]);\n    // Polling\n    (0, _index2.useIsomorphicLayoutEffect)(() => {\n      var timer;\n      function next() {\n        // Use the passed interval\n        // ...or invoke the function with the updated data to get the interval\n        var interval = (0, _index2.isFunction)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n        // We only start the next interval if `refreshInterval` is not 0, and:\n        // - `force` is true, which is the start of polling\n        // - or `timer` is not 0, which means the effect wasn't canceled\n        if (interval && timer !== -1) {\n          timer = setTimeout(execute, interval);\n        }\n      }\n      function execute() {\n        // Check if it's OK to execute:\n        // Only revalidate when the page is visible, online, and not errored.\n        if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n          revalidate(WITH_DEDUPE).then(next);\n        } else {\n          // Schedule the next interval to check again.\n          next();\n        }\n      }\n      next();\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n          timer = -1;\n        }\n      };\n    }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n    // Display debug info in React DevTools.\n    (0, _react.useDebugValue)(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && (0, _index2.isUndefined)(data) && key) {\n      // SWR should throw when trying to use Suspense on the server with React 18,\n      // without providing any fallback data. This causes hydration errors. See:\n      // https://github.com/vercel/swr/issues/1832\n      if (!_index2.IS_REACT_LEGACY && _index2.IS_SERVER) {\n        throw new Error('Fallback data is required when using Suspense in SSR.');\n      }\n      // Always update fetcher and config refs even with the Suspense mode.\n      fetcherRef.current = fetcher;\n      configRef.current = config;\n      unmountedRef.current = false;\n      var req = PRELOAD[key];\n      if (!(0, _index2.isUndefined)(req)) {\n        var promise = boundMutate(req);\n        use(promise);\n      }\n      if ((0, _index2.isUndefined)(error)) {\n        var _promise = revalidate(WITH_DEDUPE);\n        if (!(0, _index2.isUndefined)(returnedData)) {\n          _promise.status = 'fulfilled';\n          _promise.value = true;\n        }\n        use(_promise);\n      } else {\n        throw error;\n      }\n    }\n    return {\n      mutate: boundMutate,\n      get data() {\n        stateDependencies.data = true;\n        return returnedData;\n      },\n      get error() {\n        stateDependencies.error = true;\n        return error;\n      },\n      get isValidating() {\n        stateDependencies.isValidating = true;\n        return isValidating;\n      },\n      get isLoading() {\n        stateDependencies.isLoading = true;\n        return isLoading;\n      }\n    };\n  };\n  var SWRConfig = exports.SWRConfig = _index2.OBJECT.defineProperty(_index2.SWRConfig, 'defaultValue', {\n    value: _index2.defaultConfig\n  });\n  /**\n   * A hook to fetch data.\n   *\n   * @link https://swr.vercel.app\n   * @example\n   * ```jsx\n   * import useSWR from 'swr'\n   * function Profile() {\n   *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n   *   if (error) return <div>failed to load</div>\n   *   if (isLoading) return <div>loading...</div>\n   *   return <div>hello {data.name}!</div>\n   * }\n   * ```\n   */\n  var useSWR = exports.default = (0, _index2.withArgs)(useSWRHandler);\n\n  // useSWR\n});","lineCount":683,"map":[[28,2,1,0],[28,6,1,0,"_react"],[28,12,1,0],[28,15,1,0,"_interopRequireWildcard"],[28,38,1,0],[28,39,1,0,"require"],[28,46,1,0],[28,47,1,0,"_dependencyMap"],[28,61,1,0],[29,2,2,0],[29,6,2,0,"_index"],[29,12,2,0],[29,15,2,0,"require"],[29,22,2,0],[29,23,2,0,"_dependencyMap"],[29,37,2,0],[30,2,3,0],[30,6,3,0,"_index2"],[30,13,3,0],[30,16,3,0,"require"],[30,23,3,0],[30,24,3,0,"_dependencyMap"],[30,38,3,0],[31,2,3,412],[31,11,3,412,"_getRequireWildcardCache"],[31,36,3,412,"e"],[31,37,3,412],[31,66,3,412,"WeakMap"],[31,73,3,412],[31,92,3,412,"r"],[31,93,3,412],[31,100,3,412,"WeakMap"],[31,107,3,412],[31,111,3,412,"t"],[31,112,3,412],[31,119,3,412,"WeakMap"],[31,126,3,412],[31,138,3,412,"_getRequireWildcardCache"],[31,162,3,412],[31,174,3,412,"_getRequireWildcardCache"],[31,175,3,412,"e"],[31,176,3,412],[31,187,3,412,"e"],[31,188,3,412],[31,191,3,412,"t"],[31,192,3,412],[31,195,3,412,"r"],[31,196,3,412],[31,201,3,412,"e"],[31,202,3,412],[32,2,3,412],[32,11,3,412,"_interopRequireWildcard"],[32,35,3,412,"e"],[32,36,3,412],[32,38,3,412,"r"],[32,39,3,412],[32,48,3,412,"r"],[32,49,3,412],[32,53,3,412,"e"],[32,54,3,412],[32,58,3,412,"e"],[32,59,3,412],[32,60,3,412,"__esModule"],[32,70,3,412],[32,79,3,412,"e"],[32,80,3,412],[32,95,3,412,"e"],[32,96,3,412],[32,119,3,412,"e"],[32,120,3,412],[32,145,3,412,"e"],[32,146,3,412],[32,157,3,412,"default"],[32,164,3,412],[32,166,3,412,"e"],[32,167,3,412],[32,175,3,412,"t"],[32,176,3,412],[32,179,3,412,"_getRequireWildcardCache"],[32,203,3,412],[32,204,3,412,"r"],[32,205,3,412],[32,212,3,412,"t"],[32,213,3,412],[32,217,3,412,"t"],[32,218,3,412],[32,219,3,412,"has"],[32,222,3,412],[32,223,3,412,"e"],[32,224,3,412],[32,234,3,412,"t"],[32,235,3,412],[32,236,3,412,"get"],[32,239,3,412],[32,240,3,412,"e"],[32,241,3,412],[32,248,3,412,"n"],[32,249,3,412],[32,254,3,412,"__proto__"],[32,263,3,412],[32,273,3,412,"a"],[32,274,3,412],[32,277,3,412,"Object"],[32,283,3,412],[32,284,3,412,"defineProperty"],[32,298,3,412],[32,302,3,412,"Object"],[32,308,3,412],[32,309,3,412,"getOwnPropertyDescriptor"],[32,333,3,412],[32,344,3,412,"u"],[32,345,3,412],[32,349,3,412,"e"],[32,350,3,412],[32,370,3,412,"u"],[32,371,3,412],[32,378,3,412,"hasOwnProperty"],[32,392,3,412],[32,393,3,412,"call"],[32,397,3,412],[32,398,3,412,"e"],[32,399,3,412],[32,401,3,412,"u"],[32,402,3,412],[32,411,3,412,"i"],[32,412,3,412],[32,415,3,412,"a"],[32,416,3,412],[32,419,3,412,"Object"],[32,425,3,412],[32,426,3,412,"getOwnPropertyDescriptor"],[32,450,3,412],[32,451,3,412,"e"],[32,452,3,412],[32,454,3,412,"u"],[32,455,3,412],[32,465,3,412,"i"],[32,466,3,412],[32,471,3,412,"i"],[32,472,3,412],[32,473,3,412,"get"],[32,476,3,412],[32,480,3,412,"i"],[32,481,3,412],[32,482,3,412,"set"],[32,485,3,412],[32,489,3,412,"Object"],[32,495,3,412],[32,496,3,412,"defineProperty"],[32,510,3,412],[32,511,3,412,"n"],[32,512,3,412],[32,514,3,412,"u"],[32,515,3,412],[32,517,3,412,"i"],[32,518,3,412],[32,522,3,412,"n"],[32,523,3,412],[32,524,3,412,"u"],[32,525,3,412],[32,529,3,412,"e"],[32,530,3,412],[32,531,3,412,"u"],[32,532,3,412],[32,544,3,412,"n"],[32,545,3,412],[32,546,3,412,"default"],[32,553,3,412],[32,556,3,412,"e"],[32,557,3,412],[32,559,3,412,"t"],[32,560,3,412],[32,564,3,412,"t"],[32,565,3,412],[32,566,3,412,"set"],[32,569,3,412],[32,570,3,412,"e"],[32,571,3,412],[32,573,3,412,"n"],[32,574,3,412],[32,577,3,412,"n"],[32,578,3,412],[33,2,6,0],[34,2,7,0],[34,6,7,6,"noop"],[34,10,7,10],[34,13,7,13,"noop"],[34,14,7,13],[34,19,7,17],[34,20,7,18],[34,21,7,19],[35,2,8,0],[36,2,9,0],[37,2,10,0],[38,2,11,0],[39,2,12,0],[39,6,12,6,"UNDEFINED"],[39,15,12,15],[39,18,12,18],[39,35,12,36,"noop"],[39,39,12,40],[39,40,12,41],[39,41,12,42],[40,2,13,0],[40,6,13,6,"OBJECT"],[40,12,13,12],[40,15,13,15,"Object"],[40,21,13,21],[41,2,14,0],[41,6,14,6,"isUndefined"],[41,17,14,17],[41,20,14,21,"v"],[41,21,14,22],[41,25,14,25,"v"],[41,26,14,26],[41,31,14,31,"UNDEFINED"],[41,40,14,40],[42,2,15,0],[42,6,15,6,"isFunction"],[42,16,15,16],[42,19,15,20,"v"],[42,20,15,21],[42,24,15,24],[42,31,15,31,"v"],[42,32,15,32],[42,36,15,36],[42,46,15,46],[44,2,17,0],[45,2,18,0],[46,2,19,0],[47,2,20,0],[48,2,21,0],[48,6,21,6,"table"],[48,11,21,11],[48,14,21,14],[48,18,21,18,"WeakMap"],[48,25,21,25],[48,26,21,26],[48,27,21,27],[49,2,22,0],[49,6,22,6,"isObjectType"],[49,18,22,18],[49,21,22,21,"isObjectType"],[49,22,22,22,"value"],[49,27,22,27],[49,29,22,29,"type"],[49,33,22,33],[49,38,22,36,"OBJECT"],[49,44,22,42],[49,45,22,43,"prototype"],[49,54,22,52],[49,55,22,53,"toString"],[49,63,22,61],[49,64,22,62,"call"],[49,68,22,66],[49,69,22,67,"value"],[49,74,22,72],[49,75,22,73],[49,80,22,78],[49,91,22,89,"type"],[49,95,22,93],[49,98,22,96],[50,2,23,0],[51,2,24,0],[51,6,24,4,"counter"],[51,13,24,11],[51,16,24,14],[51,17,24,15],[52,2,25,0],[53,2,26,0],[54,2,27,0],[55,2,28,0],[56,2,29,0],[57,2,30,0],[58,2,31,0],[59,2,32,0],[60,2,33,0],[60,6,33,6,"stableHash"],[60,16,33,16],[60,19,33,20,"arg"],[60,22,33,23],[60,26,33,26],[61,4,34,4],[61,8,34,10,"type"],[61,12,34,14],[61,15,34,17],[61,22,34,24,"arg"],[61,25,34,27],[62,4,35,4],[62,8,35,10,"isDate"],[62,14,35,16],[62,17,35,19,"isObjectType"],[62,29,35,31],[62,30,35,32,"arg"],[62,33,35,35],[62,35,35,37],[62,41,35,43],[62,42,35,44],[63,4,36,4],[63,8,36,10,"isRegex"],[63,15,36,17],[63,18,36,20,"isObjectType"],[63,30,36,32],[63,31,36,33,"arg"],[63,34,36,36],[63,36,36,38],[63,44,36,46],[63,45,36,47],[64,4,37,4],[64,8,37,10,"isPlainObject"],[64,21,37,23],[64,24,37,26,"isObjectType"],[64,36,37,38],[64,37,37,39,"arg"],[64,40,37,42],[64,42,37,44],[64,50,37,52],[64,51,37,53],[65,4,38,4],[65,8,38,8,"result"],[65,14,38,14],[66,4,39,4],[66,8,39,8,"index"],[66,13,39,13],[67,4,40,4],[67,8,40,8,"OBJECT"],[67,14,40,14],[67,15,40,15,"arg"],[67,18,40,18],[67,19,40,19],[67,24,40,24,"arg"],[67,27,40,27],[67,31,40,31],[67,32,40,32,"isDate"],[67,38,40,38],[67,42,40,42],[67,43,40,43,"isRegex"],[67,50,40,50],[67,52,40,52],[68,6,41,8],[69,6,42,8],[70,6,43,8,"result"],[70,12,43,14],[70,15,43,17,"table"],[70,20,43,22],[70,21,43,23,"get"],[70,24,43,26],[70,25,43,27,"arg"],[70,28,43,30],[70,29,43,31],[71,6,44,8],[71,10,44,12,"result"],[71,16,44,18],[71,18,44,20],[71,25,44,27,"result"],[71,31,44,33],[72,6,45,8],[73,6,46,8],[74,6,47,8],[75,6,48,8,"result"],[75,12,48,14],[75,15,48,17],[75,17,48,19,"counter"],[75,24,48,26],[75,27,48,29],[75,30,48,32],[76,6,49,8,"table"],[76,11,49,13],[76,12,49,14,"set"],[76,15,49,17],[76,16,49,18,"arg"],[76,19,49,21],[76,21,49,23,"result"],[76,27,49,29],[76,28,49,30],[77,6,50,8],[77,10,50,12,"Array"],[77,15,50,17],[77,16,50,18,"isArray"],[77,23,50,25],[77,24,50,26,"arg"],[77,27,50,29],[77,28,50,30],[77,30,50,32],[78,8,51,12],[79,8,52,12,"result"],[79,14,52,18],[79,17,52,21],[79,20,52,24],[80,8,53,12],[80,13,53,16,"index"],[80,18,53,21],[80,21,53,24],[80,22,53,25],[80,24,53,27,"index"],[80,29,53,32],[80,32,53,35,"arg"],[80,35,53,38],[80,36,53,39,"length"],[80,42,53,45],[80,44,53,47,"index"],[80,49,53,52],[80,51,53,54],[80,53,53,55],[81,10,54,16,"result"],[81,16,54,22],[81,20,54,26,"stableHash"],[81,30,54,36],[81,31,54,37,"arg"],[81,34,54,40],[81,35,54,41,"index"],[81,40,54,46],[81,41,54,47],[81,42,54,48],[81,45,54,51],[81,48,54,54],[82,8,55,12],[83,8,56,12,"table"],[83,13,56,17],[83,14,56,18,"set"],[83,17,56,21],[83,18,56,22,"arg"],[83,21,56,25],[83,23,56,27,"result"],[83,29,56,33],[83,30,56,34],[84,6,57,8],[85,6,58,8],[85,10,58,12,"isPlainObject"],[85,23,58,25],[85,25,58,27],[86,8,59,12],[87,8,60,12,"result"],[87,14,60,18],[87,17,60,21],[87,20,60,24],[88,8,61,12],[88,12,61,18,"keys"],[88,16,61,22],[88,19,61,25,"OBJECT"],[88,25,61,31],[88,26,61,32,"keys"],[88,30,61,36],[88,31,61,37,"arg"],[88,34,61,40],[88,35,61,41],[88,36,61,42,"sort"],[88,40,61,46],[88,41,61,47],[88,42,61,48],[89,8,62,12],[89,15,62,18],[89,16,62,19,"isUndefined"],[89,27,62,30],[89,28,62,31,"index"],[89,33,62,36],[89,36,62,39,"keys"],[89,40,62,43],[89,41,62,44,"pop"],[89,44,62,47],[89,45,62,48],[89,46,62,49],[89,47,62,50],[89,49,62,51],[90,10,63,16],[90,14,63,20],[90,15,63,21,"isUndefined"],[90,26,63,32],[90,27,63,33,"arg"],[90,30,63,36],[90,31,63,37,"index"],[90,36,63,42],[90,37,63,43],[90,38,63,44],[90,40,63,46],[91,12,64,20,"result"],[91,18,64,26],[91,22,64,30,"index"],[91,27,64,35],[91,30,64,38],[91,33,64,41],[91,36,64,44,"stableHash"],[91,46,64,54],[91,47,64,55,"arg"],[91,50,64,58],[91,51,64,59,"index"],[91,56,64,64],[91,57,64,65],[91,58,64,66],[91,61,64,69],[91,64,64,72],[92,10,65,16],[93,8,66,12],[94,8,67,12,"table"],[94,13,67,17],[94,14,67,18,"set"],[94,17,67,21],[94,18,67,22,"arg"],[94,21,67,25],[94,23,67,27,"result"],[94,29,67,33],[94,30,67,34],[95,6,68,8],[96,4,69,4],[96,5,69,5],[96,11,69,11],[97,6,70,8,"result"],[97,12,70,14],[97,15,70,17,"isDate"],[97,21,70,23],[97,24,70,26,"arg"],[97,27,70,29],[97,28,70,30,"toJSON"],[97,34,70,36],[97,35,70,37],[97,36,70,38],[97,39,70,41,"type"],[97,43,70,45],[97,47,70,49],[97,55,70,57],[97,58,70,60,"arg"],[97,61,70,63],[97,62,70,64,"toString"],[97,70,70,72],[97,71,70,73],[97,72,70,74],[97,75,70,77,"type"],[97,79,70,81],[97,83,70,85],[97,91,70,93],[97,94,70,96,"JSON"],[97,98,70,100],[97,99,70,101,"stringify"],[97,108,70,110],[97,109,70,111,"arg"],[97,112,70,114],[97,113,70,115],[97,116,70,118],[97,118,70,120],[97,121,70,123,"arg"],[97,124,70,126],[98,4,71,4],[99,4,72,4],[99,11,72,11,"result"],[99,17,72,17],[100,2,73,0],[100,3,73,1],[101,2,75,0],[101,6,75,6,"serialize"],[101,15,75,15],[101,18,75,19,"key"],[101,21,75,22],[101,25,75,25],[102,4,76,4],[102,8,76,8,"isFunction"],[102,18,76,18],[102,19,76,19,"key"],[102,22,76,22],[102,23,76,23],[102,25,76,25],[103,6,77,8],[103,10,77,12],[104,8,78,12,"key"],[104,11,78,15],[104,14,78,18,"key"],[104,17,78,21],[104,18,78,22],[104,19,78,23],[105,6,79,8],[105,7,79,9],[105,8,79,10],[105,15,79,17,"err"],[105,18,79,20],[105,20,79,22],[106,8,80,12],[107,8,81,12,"key"],[107,11,81,15],[107,14,81,18],[107,16,81,20],[108,6,82,8],[109,4,83,4],[110,4,84,4],[111,4,85,4],[112,4,86,4],[112,8,86,10,"args"],[112,12,86,14],[112,15,86,17,"key"],[112,18,86,20],[113,4,87,4],[114,4,88,4,"key"],[114,7,88,7],[114,10,88,10],[114,17,88,17,"key"],[114,20,88,20],[114,24,88,24],[114,32,88,32],[114,35,88,35,"key"],[114,38,88,38],[114,41,88,41],[114,42,88,42,"Array"],[114,47,88,47],[114,48,88,48,"isArray"],[114,55,88,55],[114,56,88,56,"key"],[114,59,88,59],[114,60,88,60],[114,63,88,63,"key"],[114,66,88,66],[114,67,88,67,"length"],[114,73,88,73],[114,76,88,76,"key"],[114,79,88,79],[114,83,88,83,"stableHash"],[114,93,88,93],[114,94,88,94,"key"],[114,97,88,97],[114,98,88,98],[114,101,88,101],[114,103,88,103],[115,4,89,4],[115,11,89,11],[115,12,90,8,"key"],[115,15,90,11],[115,17,91,8,"args"],[115,21,91,12],[115,22,92,5],[116,2,93,0],[116,3,93,1],[117,2,95,0],[117,6,95,6,"unstable_serialize"],[117,24,95,24],[117,27,95,28,"key"],[117,30,95,31],[117,34,95,34,"serialize"],[117,43,95,43],[117,44,95,44,"key"],[117,47,95,47],[117,48,95,48],[117,49,95,49],[117,50,95,50],[117,51,95,51],[119,2,97,0],[120,2,97,0,"exports"],[120,9,97,0],[120,10,97,0,"unstable_serialize"],[120,28,97,0],[120,31,97,0,"unstable_serialize"],[120,49,97,0],[121,2,98,0],[121,6,98,6,"use"],[121,9,98,9],[121,12,98,12,"React"],[121,26,98,17],[121,27,98,18,"use"],[121,30,98,21],[122,2,98,25],[123,2,99,0],[124,2,100,0],[125,2,101,0],[126,2,102,2,"thenable"],[126,10,102,10],[126,14,102,13],[127,4,103,4],[127,12,103,11,"thenable"],[127,20,103,19],[127,21,103,20,"status"],[127,27,103,26],[128,6,104,8],[128,11,104,13],[128,20,104,22],[129,8,105,12],[129,14,105,18,"thenable"],[129,22,105,26],[130,6,106,8],[130,11,106,13],[130,22,106,24],[131,8,107,12],[131,15,107,19,"thenable"],[131,23,107,27],[131,24,107,28,"value"],[131,29,107,33],[132,6,108,8],[132,11,108,13],[132,21,108,23],[133,8,109,12],[133,14,109,18,"thenable"],[133,22,109,26],[133,23,109,27,"reason"],[133,29,109,33],[134,6,110,8],[135,8,111,12,"thenable"],[135,16,111,20],[135,17,111,21,"status"],[135,23,111,27],[135,26,111,30],[135,35,111,39],[136,8,112,12,"thenable"],[136,16,112,20],[136,17,112,21,"then"],[136,21,112,25],[136,22,112,27,"v"],[136,23,112,28],[136,27,112,31],[137,10,113,16,"thenable"],[137,18,113,24],[137,19,113,25,"status"],[137,25,113,31],[137,28,113,34],[137,39,113,45],[138,10,114,16,"thenable"],[138,18,114,24],[138,19,114,25,"value"],[138,24,114,30],[138,27,114,33,"v"],[138,28,114,34],[139,8,115,12],[139,9,115,13],[139,11,115,16,"e"],[139,12,115,17],[139,16,115,20],[140,10,116,16,"thenable"],[140,18,116,24],[140,19,116,25,"status"],[140,25,116,31],[140,28,116,34],[140,38,116,44],[141,10,117,16,"thenable"],[141,18,117,24],[141,19,117,25,"reason"],[141,25,117,31],[141,28,117,34,"e"],[141,29,117,35],[142,8,118,12],[142,9,118,13],[142,10,118,14],[143,8,119,12],[143,14,119,18,"thenable"],[143,22,119,26],[144,4,120,4],[145,2,121,0],[145,3,121,1],[145,4,121,2],[146,2,122,0],[146,6,122,6,"WITH_DEDUPE"],[146,17,122,17],[146,20,122,20],[147,4,123,4,"dedupe"],[147,10,123,10],[147,12,123,12],[148,2,124,0],[148,3,124,1],[149,2,125,0],[149,6,125,6,"useSWRHandler"],[149,19,125,19],[149,22,125,22,"useSWRHandler"],[149,23,125,23,"_key"],[149,27,125,27],[149,29,125,29,"fetcher"],[149,36,125,36],[149,38,125,38,"config"],[149,44,125,44],[149,49,125,47],[150,4,126,4],[150,8,126,12,"cache"],[150,13,126,17],[150,16,126,167,"config"],[150,22,126,173],[150,23,126,12,"cache"],[150,28,126,17],[151,6,126,19,"compare"],[151,13,126,26],[151,16,126,167,"config"],[151,22,126,173],[151,23,126,19,"compare"],[151,30,126,26],[152,6,126,28,"suspense"],[152,14,126,36],[152,17,126,167,"config"],[152,23,126,173],[152,24,126,28,"suspense"],[152,32,126,36],[153,6,126,38,"fallbackData"],[153,18,126,50],[153,21,126,167,"config"],[153,27,126,173],[153,28,126,38,"fallbackData"],[153,40,126,50],[154,6,126,52,"revalidateOnMount"],[154,23,126,69],[154,26,126,167,"config"],[154,32,126,173],[154,33,126,52,"revalidateOnMount"],[154,50,126,69],[155,6,126,71,"revalidateIfStale"],[155,23,126,88],[155,26,126,167,"config"],[155,32,126,173],[155,33,126,71,"revalidateIfStale"],[155,50,126,88],[156,6,126,90,"refreshInterval"],[156,21,126,105],[156,24,126,167,"config"],[156,30,126,173],[156,31,126,90,"refreshInterval"],[156,46,126,105],[157,6,126,107,"refreshWhenHidden"],[157,23,126,124],[157,26,126,167,"config"],[157,32,126,173],[157,33,126,107,"refreshWhenHidden"],[157,50,126,124],[158,6,126,126,"refreshWhenOffline"],[158,24,126,144],[158,27,126,167,"config"],[158,33,126,173],[158,34,126,126,"refreshWhenOffline"],[158,52,126,144],[159,6,126,146,"keepPreviousData"],[159,22,126,162],[159,25,126,167,"config"],[159,31,126,173],[159,32,126,146,"keepPreviousData"],[159,48,126,162],[160,4,127,4],[160,8,127,4,"_SWRGlobalState$get"],[160,27,127,4],[160,30,127,59,"SWRGlobalState"],[160,52,127,73],[160,53,127,74,"get"],[160,56,127,77],[160,57,127,78,"cache"],[160,62,127,83],[160,63,127,84],[161,6,127,84,"_SWRGlobalState$get2"],[161,26,127,84],[161,33,127,84,"_slicedToArray2"],[161,48,127,84],[161,49,127,84,"default"],[161,56,127,84],[161,58,127,84,"_SWRGlobalState$get"],[161,77,127,84],[162,6,127,11,"EVENT_REVALIDATORS"],[162,24,127,29],[162,27,127,29,"_SWRGlobalState$get2"],[162,47,127,29],[163,6,127,31,"MUTATION"],[163,14,127,39],[163,17,127,39,"_SWRGlobalState$get2"],[163,37,127,39],[164,6,127,41,"FETCH"],[164,11,127,46],[164,14,127,46,"_SWRGlobalState$get2"],[164,34,127,46],[165,6,127,48,"PRELOAD"],[165,13,127,55],[165,16,127,55,"_SWRGlobalState$get2"],[165,36,127,55],[166,4,128,4],[167,4,129,4],[168,4,130,4],[169,4,131,4],[170,4,132,4],[170,8,132,4,"_serialize$"],[170,19,132,4],[170,22,132,25],[170,26,132,25,"serialize$1"],[170,43,132,36],[170,45,132,37,"_key"],[170,49,132,41],[170,50,132,42],[171,6,132,42,"_serialize$2"],[171,18,132,42],[171,25,132,42,"_slicedToArray2"],[171,40,132,42],[171,41,132,42,"default"],[171,48,132,42],[171,50,132,42,"_serialize$"],[171,61,132,42],[172,6,132,11,"key"],[172,9,132,14],[172,12,132,14,"_serialize$2"],[172,24,132,14],[173,6,132,16,"fnArg"],[173,11,132,21],[173,14,132,21,"_serialize$2"],[173,26,132,21],[174,4,133,4],[175,4,134,4],[175,8,134,10,"initialMountedRef"],[175,25,134,27],[175,28,134,30],[175,32,134,30,"useRef"],[175,45,134,36],[175,47,134,37],[175,52,134,42],[175,53,134,43],[176,4,135,4],[177,4,136,4],[178,4,137,4],[178,8,137,10,"unmountedRef"],[178,20,137,22],[178,23,137,25],[178,27,137,25,"useRef"],[178,40,137,31],[178,42,137,32],[178,47,137,37],[178,48,137,38],[179,4,138,4],[180,4,139,4],[180,8,139,10,"keyRef"],[180,14,139,16],[180,17,139,19],[180,21,139,19,"useRef"],[180,34,139,25],[180,36,139,26,"key"],[180,39,139,29],[180,40,139,30],[181,4,140,4],[181,8,140,10,"fetcherRef"],[181,18,140,20],[181,21,140,23],[181,25,140,23,"useRef"],[181,38,140,29],[181,40,140,30,"fetcher"],[181,47,140,37],[181,48,140,38],[182,4,141,4],[182,8,141,10,"configRef"],[182,17,141,19],[182,20,141,22],[182,24,141,22,"useRef"],[182,37,141,28],[182,39,141,29,"config"],[182,45,141,35],[182,46,141,36],[183,4,142,4],[183,8,142,10,"getConfig"],[183,17,142,19],[183,20,142,22,"getConfig"],[183,21,142,22],[183,26,142,26,"configRef"],[183,35,142,35],[183,36,142,36,"current"],[183,43,142,43],[184,4,143,4],[184,8,143,10,"isActive"],[184,16,143,18],[184,19,143,21,"isActive"],[184,20,143,21],[184,25,143,25,"getConfig"],[184,34,143,34],[184,35,143,35],[184,36,143,36],[184,37,143,37,"isVisible"],[184,46,143,46],[184,47,143,47],[184,48,143,48],[184,52,143,52,"getConfig"],[184,61,143,61],[184,62,143,62],[184,63,143,63],[184,64,143,64,"isOnline"],[184,72,143,72],[184,73,143,73],[184,74,143,74],[185,4,144,4],[185,8,144,4,"_createCacheHelper"],[185,26,144,4],[185,29,144,66],[185,33,144,66,"createCacheHelper"],[185,58,144,83],[185,60,144,84,"cache"],[185,65,144,89],[185,67,144,91,"key"],[185,70,144,94],[185,71,144,95],[186,6,144,95,"_createCacheHelper2"],[186,25,144,95],[186,32,144,95,"_slicedToArray2"],[186,47,144,95],[186,48,144,95,"default"],[186,55,144,95],[186,57,144,95,"_createCacheHelper"],[186,75,144,95],[187,6,144,11,"getCache"],[187,14,144,19],[187,17,144,19,"_createCacheHelper2"],[187,36,144,19],[188,6,144,21,"setCache"],[188,14,144,29],[188,17,144,29,"_createCacheHelper2"],[188,36,144,29],[189,6,144,31,"subscribeCache"],[189,20,144,45],[189,23,144,45,"_createCacheHelper2"],[189,42,144,45],[190,6,144,47,"getInitialCache"],[190,21,144,62],[190,24,144,62,"_createCacheHelper2"],[190,43,144,62],[191,4,145,4],[191,8,145,10,"stateDependencies"],[191,25,145,27],[191,28,145,30],[191,32,145,30,"useRef"],[191,45,145,36],[191,47,145,37],[191,48,145,38],[191,49,145,39],[191,50,145,40],[191,51,145,41,"current"],[191,58,145,48],[192,4,146,4],[193,4,147,4],[194,4,148,4],[194,8,148,10,"fallback"],[194,16,148,18],[194,19,148,21],[194,23,148,21,"isUndefined$1"],[194,42,148,34],[194,44,148,35,"fallbackData"],[194,56,148,47],[194,57,148,48],[194,60,148,51],[194,64,148,51,"isUndefined$1"],[194,83,148,64],[194,85,148,65,"config"],[194,91,148,71],[194,92,148,72,"fallback"],[194,100,148,80],[194,101,148,81],[194,104,148,84,"UNDEFINED$1"],[194,121,148,95],[194,124,148,98,"config"],[194,130,148,104],[194,131,148,105,"fallback"],[194,139,148,113],[194,140,148,114,"key"],[194,143,148,117],[194,144,148,118],[194,147,148,121,"fallbackData"],[194,159,148,133],[195,4,149,4],[195,8,149,10,"isEqual"],[195,15,149,17],[195,18,149,20,"isEqual"],[195,19,149,21,"prev"],[195,23,149,25],[195,25,149,27,"current"],[195,32,149,34],[195,37,149,37],[196,6,150,8],[196,11,150,12],[196,15,150,18,"_"],[196,16,150,19],[196,20,150,23,"stateDependencies"],[196,37,150,40],[196,39,150,41],[197,8,151,12],[197,12,151,18,"t"],[197,13,151,19],[197,16,151,22,"_"],[197,17,151,23],[198,8,152,12],[198,12,152,16,"t"],[198,13,152,17],[198,18,152,22],[198,24,152,28],[198,26,152,30],[199,10,153,16],[199,14,153,20],[199,15,153,21,"compare"],[199,22,153,28],[199,23,153,29,"prev"],[199,27,153,33],[199,28,153,34,"t"],[199,29,153,35],[199,30,153,36],[199,32,153,38,"current"],[199,39,153,45],[199,40,153,46,"t"],[199,41,153,47],[199,42,153,48],[199,43,153,49],[199,45,153,51],[200,12,154,20],[200,16,154,24],[200,17,154,25],[200,21,154,25,"isUndefined$1"],[200,40,154,38],[200,42,154,39,"prev"],[200,46,154,43],[200,47,154,44,"t"],[200,48,154,45],[200,49,154,46],[200,50,154,47],[200,52,154,49],[201,14,155,24],[201,21,155,31],[201,26,155,36],[202,12,156,20],[203,12,157,20],[203,16,157,24],[203,17,157,25,"compare"],[203,24,157,32],[203,25,157,33,"returnedData"],[203,37,157,45],[203,39,157,47,"current"],[203,46,157,54],[203,47,157,55,"t"],[203,48,157,56],[203,49,157,57],[203,50,157,58],[203,52,157,60],[204,14,158,24],[204,21,158,31],[204,26,158,36],[205,12,159,20],[206,10,160,16],[207,8,161,12],[207,9,161,13],[207,15,161,19],[208,10,162,16],[208,14,162,20,"current"],[208,21,162,27],[208,22,162,28,"t"],[208,23,162,29],[208,24,162,30],[208,29,162,35,"prev"],[208,33,162,39],[208,34,162,40,"t"],[208,35,162,41],[208,36,162,42],[208,38,162,44],[209,12,163,20],[209,19,163,27],[209,24,163,32],[210,10,164,16],[211,8,165,12],[212,6,166,8],[213,6,167,8],[213,13,167,15],[213,17,167,19],[214,4,168,4],[214,5,168,5],[215,4,169,4],[215,8,169,10,"getSnapshot"],[215,19,169,21],[215,22,169,24],[215,26,169,24,"useMemo"],[215,40,169,31],[215,42,169,32],[215,48,169,36],[216,6,170,8],[216,10,170,14,"shouldStartRequest"],[216,28,170,32],[216,31,170,35],[216,32,170,36],[216,38,170,40],[217,8,171,12],[217,12,171,16],[217,13,171,17,"key"],[217,16,171,20],[217,18,171,22],[217,25,171,29],[217,30,171,34],[218,8,172,12],[218,12,172,16],[218,13,172,17,"fetcher"],[218,20,172,24],[218,22,172,26],[218,29,172,33],[218,34,172,38],[219,8,173,12],[220,8,174,12],[220,12,174,16],[220,13,174,17],[220,17,174,17,"isUndefined$1"],[220,36,174,30],[220,38,174,31,"revalidateOnMount"],[220,55,174,48],[220,56,174,49],[220,58,174,51],[220,65,174,58,"revalidateOnMount"],[220,82,174,75],[221,8,175,12],[222,8,176,12],[222,12,176,16,"getConfig"],[222,21,176,25],[222,22,176,26],[222,23,176,27],[222,24,176,28,"isPaused"],[222,32,176,36],[222,33,176,37],[222,34,176,38],[222,36,176,40],[222,43,176,47],[222,48,176,52],[223,8,177,12],[223,12,177,16,"suspense"],[223,20,177,24],[223,22,177,26],[223,29,177,33],[223,34,177,38],[224,8,178,12],[224,15,178,19,"revalidateIfStale"],[224,32,178,36],[224,37,178,41],[224,42,178,46],[225,6,179,8],[225,7,179,9],[225,9,179,11],[225,10,179,12],[226,6,180,8],[227,6,181,8],[227,10,181,14,"getSelectedCache"],[227,26,181,30],[227,29,181,34,"state"],[227,34,181,39],[227,38,181,42],[228,8,182,12],[229,8,183,12],[229,12,183,18,"snapshot"],[229,20,183,26],[229,23,183,29],[229,27,183,29,"mergeObjects"],[229,47,183,41],[229,49,183,42,"state"],[229,54,183,47],[229,55,183,48],[230,8,184,12],[230,15,184,19,"snapshot"],[230,23,184,27],[230,24,184,28,"_k"],[230,26,184,30],[231,8,185,12],[231,12,185,16],[231,13,185,17,"shouldStartRequest"],[231,31,185,35],[231,33,185,37],[232,10,186,16],[232,17,186,23,"snapshot"],[232,25,186,31],[233,8,187,12],[234,8,188,12],[234,15,188,19],[235,10,189,16,"isValidating"],[235,22,189,28],[235,24,189,30],[235,28,189,34],[236,10,190,16,"isLoading"],[236,19,190,25],[236,21,190,27],[236,25,190,31],[237,10,191,16],[237,13,191,19,"snapshot"],[238,8,192,12],[238,9,192,13],[239,6,193,8],[239,7,193,9],[240,6,194,8],[240,10,194,14,"cachedData"],[240,20,194,24],[240,23,194,27,"getCache"],[240,31,194,35],[240,32,194,36],[240,33,194,37],[241,6,195,8],[241,10,195,14,"initialData"],[241,21,195,25],[241,24,195,28,"getInitialCache"],[241,39,195,43],[241,40,195,44],[241,41,195,45],[242,6,196,8],[242,10,196,14,"clientSnapshot"],[242,24,196,28],[242,27,196,31,"getSelectedCache"],[242,43,196,47],[242,44,196,48,"cachedData"],[242,54,196,58],[242,55,196,59],[243,6,197,8],[243,10,197,14,"serverSnapshot"],[243,24,197,28],[243,27,197,31,"cachedData"],[243,37,197,41],[243,42,197,46,"initialData"],[243,53,197,57],[243,56,197,60,"clientSnapshot"],[243,70,197,74],[243,73,197,77,"getSelectedCache"],[243,89,197,93],[243,90,197,94,"initialData"],[243,101,197,105],[243,102,197,106],[244,6,198,8],[245,6,199,8],[246,6,200,8],[247,6,201,8],[247,10,201,12,"memorizedSnapshot"],[247,27,201,29],[247,30,201,32,"clientSnapshot"],[247,44,201,46],[248,6,202,8],[248,13,202,15],[248,14,203,12],[248,20,203,16],[249,8,204,16],[249,12,204,22,"newSnapshot"],[249,23,204,33],[249,26,204,36,"getSelectedCache"],[249,42,204,52],[249,43,204,53,"getCache"],[249,51,204,61],[249,52,204,62],[249,53,204,63],[249,54,204,64],[250,8,205,16],[250,12,205,22,"compareResult"],[250,25,205,35],[250,28,205,38,"isEqual"],[250,35,205,45],[250,36,205,46,"newSnapshot"],[250,47,205,57],[250,49,205,59,"memorizedSnapshot"],[250,66,205,76],[250,67,205,77],[251,8,206,16],[251,12,206,20,"compareResult"],[251,25,206,33],[251,27,206,35],[252,10,207,20],[253,10,208,20],[254,10,209,20],[255,10,210,20],[256,10,211,20],[257,10,212,20],[258,10,213,20],[259,10,214,20],[260,10,215,20],[261,10,216,20],[262,10,217,20,"memorizedSnapshot"],[262,27,217,37],[262,28,217,38,"data"],[262,32,217,42],[262,35,217,45,"newSnapshot"],[262,46,217,56],[262,47,217,57,"data"],[262,51,217,61],[263,10,218,20,"memorizedSnapshot"],[263,27,218,37],[263,28,218,38,"isLoading"],[263,37,218,47],[263,40,218,50,"newSnapshot"],[263,51,218,61],[263,52,218,62,"isLoading"],[263,61,218,71],[264,10,219,20,"memorizedSnapshot"],[264,27,219,37],[264,28,219,38,"isValidating"],[264,40,219,50],[264,43,219,53,"newSnapshot"],[264,54,219,64],[264,55,219,65,"isValidating"],[264,67,219,77],[265,10,220,20,"memorizedSnapshot"],[265,27,220,37],[265,28,220,38,"error"],[265,33,220,43],[265,36,220,46,"newSnapshot"],[265,47,220,57],[265,48,220,58,"error"],[265,53,220,63],[266,10,221,20],[266,17,221,27,"memorizedSnapshot"],[266,34,221,44],[267,8,222,16],[267,9,222,17],[267,15,222,23],[268,10,223,20,"memorizedSnapshot"],[268,27,223,37],[268,30,223,40,"newSnapshot"],[268,41,223,51],[269,10,224,20],[269,17,224,27,"newSnapshot"],[269,28,224,38],[270,8,225,16],[271,6,226,12],[271,7,226,13],[271,9,227,12],[271,15,227,16,"serverSnapshot"],[271,29,227,30],[271,30,228,9],[272,6,229,4],[273,4,230,4],[273,5,230,5],[273,7,230,7],[273,8,231,8,"cache"],[273,13,231,13],[273,15,232,8,"key"],[273,18,232,11],[273,19,233,5],[273,20,233,6],[274,4,234,4],[275,4,235,4],[275,8,235,10,"cached"],[275,14,235,16],[275,17,235,19],[275,21,235,19,"useSyncExternalStore"],[275,48,235,39],[275,50,235,40],[275,54,235,40,"useCallback"],[275,72,235,51],[275,74,235,53,"callback"],[275,82,235,61],[275,86,235,64,"subscribeCache"],[275,100,235,78],[275,101,235,79,"key"],[275,104,235,82],[275,106,235,84],[275,107,235,85,"current"],[275,114,235,92],[275,116,235,94,"prev"],[275,120,235,98],[275,125,235,101],[276,6,236,12],[276,10,236,16],[276,11,236,17,"isEqual"],[276,18,236,24],[276,19,236,25,"prev"],[276,23,236,29],[276,25,236,31,"current"],[276,32,236,38],[276,33,236,39],[276,35,236,41,"callback"],[276,43,236,49],[276,44,236,50],[276,45,236,51],[277,4,237,8],[277,5,237,9],[277,6,237,10],[278,4,237,12],[279,4,238,4],[279,5,239,8,"cache"],[279,10,239,13],[279,12,240,8,"key"],[279,15,240,11],[279,16,241,5],[279,17,241,6],[279,19,241,8,"getSnapshot"],[279,30,241,19],[279,31,241,20],[279,32,241,21],[279,33,241,22],[279,35,241,24,"getSnapshot"],[279,46,241,35],[279,47,241,36],[279,48,241,37],[279,49,241,38],[279,50,241,39],[280,4,242,4],[280,8,242,10,"isInitialMount"],[280,22,242,24],[280,25,242,27],[280,26,242,28,"initialMountedRef"],[280,43,242,45],[280,44,242,46,"current"],[280,51,242,53],[281,4,243,4],[281,8,243,10,"hasRevalidator"],[281,22,243,24],[281,25,243,27,"EVENT_REVALIDATORS"],[281,43,243,45],[281,44,243,46,"key"],[281,47,243,49],[281,48,243,50],[281,52,243,54,"EVENT_REVALIDATORS"],[281,70,243,72],[281,71,243,73,"key"],[281,74,243,76],[281,75,243,77],[281,76,243,78,"length"],[281,82,243,84],[281,85,243,87],[281,86,243,88],[282,4,244,4],[282,8,244,10,"cachedData"],[282,18,244,20],[282,21,244,23,"cached"],[282,27,244,29],[282,28,244,30,"data"],[282,32,244,34],[283,4,245,4],[283,8,245,10,"data"],[283,12,245,14],[283,15,245,17],[283,19,245,17,"isUndefined$1"],[283,38,245,30],[283,40,245,31,"cachedData"],[283,50,245,41],[283,51,245,42],[283,54,245,45,"fallback"],[283,62,245,53],[283,66,245,57],[283,70,245,57,"isPromiseLike"],[283,91,245,70],[283,93,245,71,"fallback"],[283,101,245,79],[283,102,245,80],[283,105,245,83,"use"],[283,108,245,86],[283,109,245,87,"fallback"],[283,117,245,95],[283,118,245,96],[283,121,245,99,"fallback"],[283,129,245,107],[283,132,245,110,"cachedData"],[283,142,245,120],[284,4,246,4],[284,8,246,10,"error"],[284,13,246,15],[284,16,246,18,"cached"],[284,22,246,24],[284,23,246,25,"error"],[284,28,246,30],[285,4,247,4],[286,4,248,4],[286,8,248,10,"laggyDataRef"],[286,20,248,22],[286,23,248,25],[286,27,248,25,"useRef"],[286,40,248,31],[286,42,248,32,"data"],[286,46,248,36],[286,47,248,37],[287,4,249,4],[287,8,249,10,"returnedData"],[287,20,249,22],[287,23,249,25,"keepPreviousData"],[287,39,249,41],[287,42,249,44],[287,46,249,44,"isUndefined$1"],[287,65,249,57],[287,67,249,58,"cachedData"],[287,77,249,68],[287,78,249,69],[287,81,249,72,"laggyDataRef"],[287,93,249,84],[287,94,249,85,"current"],[287,101,249,92],[287,104,249,95,"cachedData"],[287,114,249,105],[287,117,249,108,"data"],[287,121,249,112],[288,4,250,4],[289,4,251,4],[290,4,252,4],[291,4,253,4],[291,8,253,10,"shouldDoInitialRevalidation"],[291,35,253,37],[291,38,253,40],[291,39,253,41],[291,45,253,45],[292,6,254,8],[293,6,255,8],[293,10,255,12,"hasRevalidator"],[293,24,255,26],[293,28,255,30],[293,29,255,31],[293,33,255,31,"isUndefined$1"],[293,52,255,44],[293,54,255,45,"error"],[293,59,255,50],[293,60,255,51],[293,62,255,53],[293,69,255,60],[293,74,255,65],[294,6,256,8],[295,6,257,8],[295,10,257,12,"isInitialMount"],[295,24,257,26],[295,28,257,30],[295,29,257,31],[295,33,257,31,"isUndefined$1"],[295,52,257,44],[295,54,257,45,"revalidateOnMount"],[295,71,257,62],[295,72,257,63],[295,74,257,65],[295,81,257,72,"revalidateOnMount"],[295,98,257,89],[296,6,258,8],[297,6,259,8],[297,10,259,12,"getConfig"],[297,19,259,21],[297,20,259,22],[297,21,259,23],[297,22,259,24,"isPaused"],[297,30,259,32],[297,31,259,33],[297,32,259,34],[297,34,259,36],[297,41,259,43],[297,46,259,48],[298,6,260,8],[299,6,261,8],[300,6,262,8],[301,6,263,8],[301,10,263,12,"suspense"],[301,18,263,20],[301,20,263,22],[301,27,263,29],[301,31,263,29,"isUndefined$1"],[301,50,263,42],[301,52,263,43,"data"],[301,56,263,47],[301,57,263,48],[301,60,263,51],[301,65,263,56],[301,68,263,59,"revalidateIfStale"],[301,85,263,76],[302,6,264,8],[303,6,265,8],[304,6,266,8],[304,13,266,15],[304,17,266,15,"isUndefined$1"],[304,36,266,28],[304,38,266,29,"data"],[304,42,266,33],[304,43,266,34],[304,47,266,38,"revalidateIfStale"],[304,64,266,55],[305,4,267,4],[305,5,267,5],[305,7,267,7],[305,8,267,8],[306,4,268,4],[307,4,269,4],[308,4,270,4],[308,8,270,10,"defaultValidatingState"],[308,30,270,32],[308,33,270,35],[308,34,270,36],[308,36,270,38,"key"],[308,39,270,41],[308,43,270,45,"fetcher"],[308,50,270,52],[308,54,270,56,"isInitialMount"],[308,68,270,70],[308,72,270,74,"shouldDoInitialRevalidation"],[308,99,270,101],[308,100,270,102],[309,4,271,4],[309,8,271,10,"isValidating"],[309,20,271,22],[309,23,271,25],[309,27,271,25,"isUndefined$1"],[309,46,271,38],[309,48,271,39,"cached"],[309,54,271,45],[309,55,271,46,"isValidating"],[309,67,271,58],[309,68,271,59],[309,71,271,62,"defaultValidatingState"],[309,93,271,84],[309,96,271,87,"cached"],[309,102,271,93],[309,103,271,94,"isValidating"],[309,115,271,106],[310,4,272,4],[310,8,272,10,"isLoading"],[310,17,272,19],[310,20,272,22],[310,24,272,22,"isUndefined$1"],[310,43,272,35],[310,45,272,36,"cached"],[310,51,272,42],[310,52,272,43,"isLoading"],[310,61,272,52],[310,62,272,53],[310,65,272,56,"defaultValidatingState"],[310,87,272,78],[310,90,272,81,"cached"],[310,96,272,87],[310,97,272,88,"isLoading"],[310,106,272,97],[311,4,273,4],[312,4,274,4],[313,4,275,4],[313,8,275,10,"revalidate"],[313,18,275,20],[313,21,275,23],[313,25,275,23,"useCallback"],[313,43,275,34],[314,6,275,34],[314,10,275,34,"_ref"],[314,14,275,34],[314,21,275,34,"_asyncToGenerator2"],[314,39,275,34],[314,40,275,34,"default"],[314,47,275,34],[314,49,275,35],[314,60,275,42,"revalidateOpts"],[314,74,275,56],[314,76,275,59],[315,8,276,8],[315,12,276,14,"currentFetcher"],[315,26,276,28],[315,29,276,31,"fetcherRef"],[315,39,276,41],[315,40,276,42,"current"],[315,47,276,49],[316,8,277,8],[316,12,277,12],[316,13,277,13,"key"],[316,16,277,16],[316,20,277,20],[316,21,277,21,"currentFetcher"],[316,35,277,35],[316,39,277,39,"unmountedRef"],[316,51,277,51],[316,52,277,52,"current"],[316,59,277,59],[316,63,277,63,"getConfig"],[316,72,277,72],[316,73,277,73],[316,74,277,74],[316,75,277,75,"isPaused"],[316,83,277,83],[316,84,277,84],[316,85,277,85],[316,87,277,87],[317,10,278,12],[317,17,278,19],[317,22,278,24],[318,8,279,8],[319,8,280,8],[319,12,280,12,"newData"],[319,19,280,19],[320,8,281,8],[320,12,281,12,"startAt"],[320,19,281,19],[321,8,282,8],[321,12,282,12,"loading"],[321,19,282,19],[321,22,282,22],[321,26,282,26],[322,8,283,8],[322,12,283,14,"opts"],[322,16,283,18],[322,19,283,21,"revalidateOpts"],[322,33,283,35],[322,37,283,39],[322,38,283,40],[322,39,283,41],[323,8,284,8],[324,8,285,8],[325,8,286,8],[325,12,286,14,"shouldStartNewRequest"],[325,33,286,35],[325,36,286,38],[325,37,286,39,"FETCH"],[325,42,286,44],[325,43,286,45,"key"],[325,46,286,48],[325,47,286,49],[325,51,286,53],[325,52,286,54,"opts"],[325,56,286,58],[325,57,286,59,"dedupe"],[325,63,286,65],[326,8,287,8],[327,0,288,0],[328,0,289,0],[329,0,290,0],[330,0,291,0],[331,0,292,0],[332,0,293,0],[333,0,294,0],[334,0,295,0],[335,0,296,0],[336,8,297,9],[336,12,297,15,"callbackSafeguard"],[336,29,297,32],[336,32,297,35,"callbackSafeguard"],[336,33,297,35],[336,38,297,39],[337,10,298,12],[337,14,298,16,"IS_REACT_LEGACY"],[337,37,298,31],[337,39,298,33],[338,12,299,16],[338,19,299,23],[338,20,299,24,"unmountedRef"],[338,32,299,36],[338,33,299,37,"current"],[338,40,299,44],[338,44,299,48,"key"],[338,47,299,51],[338,52,299,56,"keyRef"],[338,58,299,62],[338,59,299,63,"current"],[338,66,299,70],[338,70,299,74,"initialMountedRef"],[338,87,299,91],[338,88,299,92,"current"],[338,95,299,99],[339,10,300,12],[340,10,301,12],[340,17,301,19,"key"],[340,20,301,22],[340,25,301,27,"keyRef"],[340,31,301,33],[340,32,301,34,"current"],[340,39,301,41],[341,8,302,8],[341,9,302,9],[342,8,303,8],[343,8,304,8],[343,12,304,14,"finalState"],[343,22,304,24],[343,25,304,27],[344,10,305,12,"isValidating"],[344,22,305,24],[344,24,305,26],[344,29,305,31],[345,10,306,12,"isLoading"],[345,19,306,21],[345,21,306,23],[346,8,307,8],[346,9,307,9],[347,8,308,8],[347,12,308,14,"finishRequestAndUpdateState"],[347,39,308,41],[347,42,308,44,"finishRequestAndUpdateState"],[347,43,308,44],[347,48,308,48],[348,10,309,12,"setCache"],[348,18,309,20],[348,19,309,21,"finalState"],[348,29,309,31],[348,30,309,32],[349,8,310,8],[349,9,310,9],[350,8,311,8],[350,12,311,14,"cleanupState"],[350,24,311,26],[350,27,311,29,"cleanupState"],[350,28,311,29],[350,33,311,33],[351,10,312,12],[352,10,313,12],[352,14,313,18,"requestInfo"],[352,25,313,29],[352,28,313,32,"FETCH"],[352,33,313,37],[352,34,313,38,"key"],[352,37,313,41],[352,38,313,42],[353,10,314,12],[353,14,314,16,"requestInfo"],[353,25,314,27],[353,29,314,31,"requestInfo"],[353,40,314,42],[353,41,314,43],[353,42,314,44],[353,43,314,45],[353,48,314,50,"startAt"],[353,55,314,57],[353,57,314,59],[354,12,315,16],[354,19,315,23,"FETCH"],[354,24,315,28],[354,25,315,29,"key"],[354,28,315,32],[354,29,315,33],[355,10,316,12],[356,8,317,8],[356,9,317,9],[357,8,318,8],[358,8,319,8],[358,12,319,14,"initialState"],[358,24,319,26],[358,27,319,29],[359,10,320,12,"isValidating"],[359,22,320,24],[359,24,320,26],[360,8,321,8],[360,9,321,9],[361,8,322,8],[362,8,323,8],[363,8,324,8],[363,12,324,12],[363,16,324,12,"isUndefined$1"],[363,35,324,25],[363,37,324,26,"getCache"],[363,45,324,34],[363,46,324,35],[363,47,324,36],[363,48,324,37,"data"],[363,52,324,41],[363,53,324,42],[363,55,324,44],[364,10,325,12,"initialState"],[364,22,325,24],[364,23,325,25,"isLoading"],[364,32,325,34],[364,35,325,37],[364,39,325,41],[365,8,326,8],[366,8,327,8],[366,12,327,12],[367,10,328,12],[367,14,328,16,"shouldStartNewRequest"],[367,35,328,37],[367,37,328,39],[368,12,329,16,"setCache"],[368,20,329,24],[368,21,329,25,"initialState"],[368,33,329,37],[368,34,329,38],[369,12,330,16],[370,12,331,16],[371,12,332,16],[371,16,332,20,"config"],[371,22,332,26],[371,23,332,27,"loadingTimeout"],[371,37,332,41],[371,41,332,45],[371,45,332,45,"isUndefined$1"],[371,64,332,58],[371,66,332,59,"getCache"],[371,74,332,67],[371,75,332,68],[371,76,332,69],[371,77,332,70,"data"],[371,81,332,74],[371,82,332,75],[371,84,332,77],[372,14,333,20,"setTimeout"],[372,24,333,30],[372,25,333,31],[372,31,333,35],[373,16,334,24],[373,20,334,28,"loading"],[373,27,334,35],[373,31,334,39,"callbackSafeguard"],[373,48,334,56],[373,49,334,57],[373,50,334,58],[373,52,334,60],[374,18,335,28,"getConfig"],[374,27,335,37],[374,28,335,38],[374,29,335,39],[374,30,335,40,"onLoadingSlow"],[374,43,335,53],[374,44,335,54,"key"],[374,47,335,57],[374,49,335,59,"config"],[374,55,335,65],[374,56,335,66],[375,16,336,24],[376,14,337,20],[376,15,337,21],[376,17,337,23,"config"],[376,23,337,29],[376,24,337,30,"loadingTimeout"],[376,38,337,44],[376,39,337,45],[377,12,338,16],[378,12,339,16],[379,12,340,16],[380,12,341,16,"FETCH"],[380,17,341,21],[380,18,341,22,"key"],[380,21,341,25],[380,22,341,26],[380,25,341,29],[380,26,342,20,"currentFetcher"],[380,40,342,34],[380,41,342,35,"fnArg"],[380,46,342,40],[380,47,342,41],[380,49,343,20],[380,53,343,20,"getTimestamp"],[380,73,343,32],[380,75,343,33],[380,76,343,34],[380,77,344,17],[381,10,345,12],[382,10,346,12],[383,10,347,12],[384,10,348,12],[385,10,348,13],[385,14,348,13,"_FETCH$key"],[385,24,348,13],[385,31,348,13,"_slicedToArray2"],[385,46,348,13],[385,47,348,13,"default"],[385,54,348,13],[385,56,349,33,"FETCH"],[385,61,349,38],[385,62,349,39,"key"],[385,65,349,42],[385,66,349,43],[386,10,349,13,"newData"],[386,17,349,20],[386,20,349,20,"_FETCH$key"],[386,30,349,20],[387,10,349,22,"startAt"],[387,17,349,29],[387,20,349,29,"_FETCH$key"],[387,30,349,29],[388,10,350,12,"newData"],[388,17,350,19],[388,26,350,28,"newData"],[388,33,350,35],[389,10,351,12],[389,14,351,16,"shouldStartNewRequest"],[389,35,351,37],[389,37,351,39],[390,12,352,16],[391,12,353,16],[392,12,354,16,"setTimeout"],[392,22,354,26],[392,23,354,27,"cleanupState"],[392,35,354,39],[392,37,354,41,"config"],[392,43,354,47],[392,44,354,48,"dedupingInterval"],[392,60,354,64],[392,61,354,65],[393,10,355,12],[394,10,356,12],[395,10,357,12],[396,10,358,12],[397,10,359,12],[398,10,360,12],[399,10,361,12],[400,10,362,12],[400,14,362,16],[400,15,362,17,"FETCH"],[400,20,362,22],[400,21,362,23,"key"],[400,24,362,26],[400,25,362,27],[400,29,362,31,"FETCH"],[400,34,362,36],[400,35,362,37,"key"],[400,38,362,40],[400,39,362,41],[400,40,362,42],[400,41,362,43],[400,42,362,44],[400,47,362,49,"startAt"],[400,54,362,56],[400,56,362,58],[401,12,363,16],[401,16,363,20,"shouldStartNewRequest"],[401,37,363,41],[401,39,363,43],[402,14,364,20],[402,18,364,24,"callbackSafeguard"],[402,35,364,41],[402,36,364,42],[402,37,364,43],[402,39,364,45],[403,16,365,24,"getConfig"],[403,25,365,33],[403,26,365,34],[403,27,365,35],[403,28,365,36,"onDiscarded"],[403,39,365,47],[403,40,365,48,"key"],[403,43,365,51],[403,44,365,52],[404,14,366,20],[405,12,367,16],[406,12,368,16],[406,19,368,23],[406,24,368,28],[407,10,369,12],[408,10,370,12],[409,10,371,12,"finalState"],[409,20,371,22],[409,21,371,23,"error"],[409,26,371,28],[409,29,371,31,"UNDEFINED$1"],[409,46,371,42],[410,10,372,12],[411,10,373,12],[412,10,374,12],[413,10,375,12],[414,10,376,12],[415,10,377,12],[416,10,378,12],[417,10,379,12],[418,10,380,12],[419,10,381,12],[420,10,382,12],[421,10,383,12],[422,10,384,12],[422,14,384,18,"mutationInfo"],[422,26,384,30],[422,29,384,33,"MUTATION"],[422,37,384,41],[422,38,384,42,"key"],[422,41,384,45],[422,42,384,46],[423,10,385,12],[423,14,385,16],[423,15,385,17],[423,19,385,17,"isUndefined$1"],[423,38,385,30],[423,40,385,31,"mutationInfo"],[423,52,385,43],[423,53,385,44],[424,10,385,48],[425,10,386,13,"startAt"],[425,17,386,20],[425,21,386,24,"mutationInfo"],[425,33,386,36],[425,34,386,37],[425,35,386,38],[425,36,386,39],[426,10,386,43],[427,10,387,12,"startAt"],[427,17,387,19],[427,21,387,23,"mutationInfo"],[427,33,387,35],[427,34,387,36],[427,35,387,37],[427,36,387,38],[428,10,387,42],[429,10,388,12,"mutationInfo"],[429,22,388,24],[429,23,388,25],[429,24,388,26],[429,25,388,27],[429,30,388,32],[429,31,388,33],[429,32,388,34],[429,34,388,36],[430,12,389,16,"finishRequestAndUpdateState"],[430,39,389,43],[430,40,389,44],[430,41,389,45],[431,12,390,16],[431,16,390,20,"shouldStartNewRequest"],[431,37,390,41],[431,39,390,43],[432,14,391,20],[432,18,391,24,"callbackSafeguard"],[432,35,391,41],[432,36,391,42],[432,37,391,43],[432,39,391,45],[433,16,392,24,"getConfig"],[433,25,392,33],[433,26,392,34],[433,27,392,35],[433,28,392,36,"onDiscarded"],[433,39,392,47],[433,40,392,48,"key"],[433,43,392,51],[433,44,392,52],[434,14,393,20],[435,12,394,16],[436,12,395,16],[436,19,395,23],[436,24,395,28],[437,10,396,12],[438,10,397,12],[439,10,398,12],[440,10,399,12],[440,14,399,18,"cacheData"],[440,23,399,27],[440,26,399,30,"getCache"],[440,34,399,38],[440,35,399,39],[440,36,399,40],[440,37,399,41,"data"],[440,41,399,45],[441,10,400,12],[442,10,401,12],[443,10,402,12,"finalState"],[443,20,402,22],[443,21,402,23,"data"],[443,25,402,27],[443,28,402,30,"compare"],[443,35,402,37],[443,36,402,38,"cacheData"],[443,45,402,47],[443,47,402,49,"newData"],[443,54,402,56],[443,55,402,57],[443,58,402,60,"cacheData"],[443,67,402,69],[443,70,402,72,"newData"],[443,77,402,79],[444,10,403,12],[445,10,404,12],[445,14,404,16,"shouldStartNewRequest"],[445,35,404,37],[445,37,404,39],[446,12,405,16],[446,16,405,20,"callbackSafeguard"],[446,33,405,37],[446,34,405,38],[446,35,405,39],[446,37,405,41],[447,14,406,20,"getConfig"],[447,23,406,29],[447,24,406,30],[447,25,406,31],[447,26,406,32,"onSuccess"],[447,35,406,41],[447,36,406,42,"newData"],[447,43,406,49],[447,45,406,51,"key"],[447,48,406,54],[447,50,406,56,"config"],[447,56,406,62],[447,57,406,63],[448,12,407,16],[449,10,408,12],[450,8,409,8],[450,9,409,9],[450,10,409,10],[450,17,409,17,"err"],[450,20,409,20],[450,22,409,22],[451,10,410,12,"cleanupState"],[451,22,410,24],[451,23,410,25],[451,24,410,26],[452,10,411,12],[452,14,411,18,"currentConfig"],[452,27,411,31],[452,30,411,34,"getConfig"],[452,39,411,43],[452,40,411,44],[452,41,411,45],[453,10,412,12],[453,14,412,20,"shouldRetryOnError"],[453,32,412,38],[453,35,412,43,"currentConfig"],[453,48,412,56],[453,49,412,20,"shouldRetryOnError"],[453,67,412,38],[454,10,413,12],[455,10,414,12],[455,14,414,16],[455,15,414,17,"currentConfig"],[455,28,414,30],[455,29,414,31,"isPaused"],[455,37,414,39],[455,38,414,40],[455,39,414,41],[455,41,414,43],[456,12,415,16],[457,12,416,16,"finalState"],[457,22,416,26],[457,23,416,27,"error"],[457,28,416,32],[457,31,416,35,"err"],[457,34,416,38],[458,12,417,16],[459,12,418,16],[460,12,419,16],[460,16,419,20,"shouldStartNewRequest"],[460,37,419,41],[460,41,419,45,"callbackSafeguard"],[460,58,419,62],[460,59,419,63],[460,60,419,64],[460,62,419,66],[461,14,420,20,"currentConfig"],[461,27,420,33],[461,28,420,34,"onError"],[461,35,420,41],[461,36,420,42,"err"],[461,39,420,45],[461,41,420,47,"key"],[461,44,420,50],[461,46,420,52,"currentConfig"],[461,59,420,65],[461,60,420,66],[462,14,421,20],[462,18,421,24,"shouldRetryOnError"],[462,36,421,42],[462,41,421,47],[462,45,421,51],[462,49,421,55],[462,53,421,55,"isFunction$1"],[462,71,421,67],[462,73,421,68,"shouldRetryOnError"],[462,91,421,86],[462,92,421,87],[462,96,421,91,"shouldRetryOnError"],[462,114,421,109],[462,115,421,110,"err"],[462,118,421,113],[462,119,421,114],[462,121,421,116],[463,16,422,24],[463,20,422,28],[463,21,422,29,"getConfig"],[463,30,422,38],[463,31,422,39],[463,32,422,40],[463,33,422,41,"revalidateOnFocus"],[463,50,422,58],[463,54,422,62],[463,55,422,63,"getConfig"],[463,64,422,72],[463,65,422,73],[463,66,422,74],[463,67,422,75,"revalidateOnReconnect"],[463,88,422,96],[463,92,422,100,"isActive"],[463,100,422,108],[463,101,422,109],[463,102,422,110],[463,104,422,112],[464,18,423,28],[465,18,424,28],[466,18,425,28],[467,18,426,28,"currentConfig"],[467,31,426,41],[467,32,426,42,"onErrorRetry"],[467,44,426,54],[467,45,426,55,"err"],[467,48,426,58],[467,50,426,60,"key"],[467,53,426,63],[467,55,426,65,"currentConfig"],[467,68,426,78],[467,70,426,81,"_opts"],[467,75,426,86],[467,79,426,89],[468,20,427,32],[468,24,427,38,"revalidators"],[468,36,427,50],[468,39,427,53,"EVENT_REVALIDATORS"],[468,57,427,71],[468,58,427,72,"key"],[468,61,427,75],[468,62,427,76],[469,20,428,32],[469,24,428,36,"revalidators"],[469,36,428,48],[469,40,428,52,"revalidators"],[469,52,428,64],[469,53,428,65],[469,54,428,66],[469,55,428,67],[469,57,428,69],[470,22,429,36,"revalidators"],[470,34,429,48],[470,35,429,49],[470,36,429,50],[470,37,429,51],[470,38,429,52,"revalidateEvents"],[470,62,429,68],[470,63,429,69,"ERROR_REVALIDATE_EVENT"],[470,85,429,91],[470,87,429,93,"_opts"],[470,92,429,98],[470,93,429,99],[471,20,430,32],[472,18,431,28],[472,19,431,29],[472,21,431,31],[473,20,432,32,"retryCount"],[473,30,432,42],[473,32,432,44],[473,33,432,45,"opts"],[473,37,432,49],[473,38,432,50,"retryCount"],[473,48,432,60],[473,52,432,64],[473,53,432,65],[473,57,432,69],[473,58,432,70],[474,20,433,32,"dedupe"],[474,26,433,38],[474,28,433,40],[475,18,434,28],[475,19,434,29],[475,20,434,30],[476,16,435,24],[477,14,436,20],[478,12,437,16],[479,10,438,12],[480,8,439,8],[481,8,440,8],[482,8,441,8,"loading"],[482,15,441,15],[482,18,441,18],[482,23,441,23],[483,8,442,8],[484,8,443,8,"finishRequestAndUpdateState"],[484,35,443,35],[484,36,443,36],[484,37,443,37],[485,8,444,8],[485,15,444,15],[485,19,444,19],[486,6,445,4],[486,7,445,5],[487,6,445,5],[487,23,445,5,"_x"],[487,25,445,5],[488,8,445,5],[488,15,445,5,"_ref"],[488,19,445,5],[488,20,445,5,"apply"],[488,25,445,5],[488,32,445,5,"arguments"],[488,41,445,5],[489,6,445,5],[490,4,445,5],[491,4,445,7],[492,4,446,4],[493,4,447,4],[494,4,448,4],[495,4,449,4],[496,4,450,4],[497,4,451,4],[498,4,452,4],[499,4,453,4],[500,4,454,4],[501,4,455,4],[502,4,456,4],[502,5,457,8,"key"],[502,8,457,11],[502,10,458,8,"cache"],[502,15,458,13],[502,16,459,5],[502,17,459,6],[503,4,460,4],[504,4,461,4],[505,4,462,4],[505,8,462,10,"boundMutate"],[505,19,462,21],[505,22,462,24],[505,26,462,24,"useCallback"],[505,44,462,35],[506,4,462,36],[507,4,463,4],[507,16,463,15],[508,6,463,15],[508,15,463,15,"_len"],[508,19,463,15],[508,22,463,15,"arguments"],[508,31,463,15],[508,32,463,15,"length"],[508,38,463,15],[508,40,463,8,"args"],[508,44,463,12],[508,51,463,12,"Array"],[508,56,463,12],[508,57,463,12,"_len"],[508,61,463,12],[508,64,463,12,"_key2"],[508,69,463,12],[508,75,463,12,"_key2"],[508,80,463,12],[508,83,463,12,"_len"],[508,87,463,12],[508,89,463,12,"_key2"],[508,94,463,12],[509,8,463,8,"args"],[509,12,463,12],[509,13,463,12,"_key2"],[509,18,463,12],[509,22,463,12,"arguments"],[509,31,463,12],[509,32,463,12,"_key2"],[509,37,463,12],[510,6,463,12],[511,6,464,8],[511,13,464,15],[511,17,464,15,"internalMutate"],[511,39,464,29],[511,41,464,30,"cache"],[511,46,464,35],[511,48,464,37,"keyRef"],[511,54,464,43],[511,55,464,44,"current"],[511,62,464,51],[511,64,464,53],[511,67,464,56,"args"],[511,71,464,60],[511,72,464,61],[512,4,465,4],[512,5,465,5],[513,4,465,7],[514,4,466,4],[514,6,466,6],[514,7,466,7],[515,4,467,4],[516,4,468,4],[516,8,468,4,"useIsomorphicLayoutEffect"],[516,41,468,29],[516,43,468,30],[516,49,468,34],[517,6,469,8,"fetcherRef"],[517,16,469,18],[517,17,469,19,"current"],[517,24,469,26],[517,27,469,29,"fetcher"],[517,34,469,36],[518,6,470,8,"configRef"],[518,15,470,17],[518,16,470,18,"current"],[518,23,470,25],[518,26,470,28,"config"],[518,32,470,34],[519,6,471,8],[520,6,472,8],[521,6,473,8],[521,10,473,12],[521,11,473,13],[521,15,473,13,"isUndefined$1"],[521,34,473,26],[521,36,473,27,"cachedData"],[521,46,473,37],[521,47,473,38],[521,49,473,40],[522,8,474,12,"laggyDataRef"],[522,20,474,24],[522,21,474,25,"current"],[522,28,474,32],[522,31,474,35,"cachedData"],[522,41,474,45],[523,6,475,8],[524,4,476,4],[524,5,476,5],[524,6,476,6],[525,4,477,4],[526,4,478,4],[526,8,478,4,"useIsomorphicLayoutEffect"],[526,41,478,29],[526,43,478,30],[526,49,478,34],[527,6,479,8],[527,10,479,12],[527,11,479,13,"key"],[527,14,479,16],[527,16,479,18],[528,6,480,8],[528,10,480,14,"softRevalidate"],[528,24,480,28],[528,27,480,31,"revalidate"],[528,37,480,41],[528,38,480,42,"bind"],[528,42,480,46],[528,43,480,47,"UNDEFINED$1"],[528,60,480,58],[528,62,480,60,"WITH_DEDUPE"],[528,73,480,71],[528,74,480,72],[529,6,481,8],[530,6,482,8],[531,6,483,8],[531,10,483,12,"nextFocusRevalidatedAt"],[531,32,483,34],[531,35,483,37],[531,36,483,38],[532,6,484,8],[532,10,484,14,"onRevalidate"],[532,22,484,26],[532,25,484,29],[532,34,484,29,"onRevalidate"],[532,35,484,30,"type"],[532,39,484,34],[532,41,484,48],[533,8,484,48],[533,12,484,36,"opts"],[533,16,484,40],[533,19,484,40,"arguments"],[533,28,484,40],[533,29,484,40,"length"],[533,35,484,40],[533,43,484,40,"arguments"],[533,52,484,40],[533,60,484,40,"undefined"],[533,69,484,40],[533,72,484,40,"arguments"],[533,81,484,40],[533,87,484,43],[533,88,484,44],[533,89,484,45],[534,8,485,12],[534,12,485,16,"type"],[534,16,485,20],[534,20,485,24,"revalidateEvents"],[534,44,485,40],[534,45,485,41,"FOCUS_EVENT"],[534,56,485,52],[534,58,485,54],[535,10,486,16],[535,14,486,22,"now"],[535,17,486,25],[535,20,486,28,"Date"],[535,24,486,32],[535,25,486,33,"now"],[535,28,486,36],[535,29,486,37],[535,30,486,38],[536,10,487,16],[536,14,487,20,"getConfig"],[536,23,487,29],[536,24,487,30],[536,25,487,31],[536,26,487,32,"revalidateOnFocus"],[536,43,487,49],[536,47,487,53,"now"],[536,50,487,56],[536,53,487,59,"nextFocusRevalidatedAt"],[536,75,487,81],[536,79,487,85,"isActive"],[536,87,487,93],[536,88,487,94],[536,89,487,95],[536,91,487,97],[537,12,488,20,"nextFocusRevalidatedAt"],[537,34,488,42],[537,37,488,45,"now"],[537,40,488,48],[537,43,488,51,"getConfig"],[537,52,488,60],[537,53,488,61],[537,54,488,62],[537,55,488,63,"focusThrottleInterval"],[537,76,488,84],[538,12,489,20,"softRevalidate"],[538,26,489,34],[538,27,489,35],[538,28,489,36],[539,10,490,16],[540,8,491,12],[540,9,491,13],[540,15,491,19],[540,19,491,23,"type"],[540,23,491,27],[540,27,491,31,"revalidateEvents"],[540,51,491,47],[540,52,491,48,"RECONNECT_EVENT"],[540,67,491,63],[540,69,491,65],[541,10,492,16],[541,14,492,20,"getConfig"],[541,23,492,29],[541,24,492,30],[541,25,492,31],[541,26,492,32,"revalidateOnReconnect"],[541,47,492,53],[541,51,492,57,"isActive"],[541,59,492,65],[541,60,492,66],[541,61,492,67],[541,63,492,69],[542,12,493,20,"softRevalidate"],[542,26,493,34],[542,27,493,35],[542,28,493,36],[543,10,494,16],[544,8,495,12],[544,9,495,13],[544,15,495,19],[544,19,495,23,"type"],[544,23,495,27],[544,27,495,31,"revalidateEvents"],[544,51,495,47],[544,52,495,48,"MUTATE_EVENT"],[544,64,495,60],[544,66,495,62],[545,10,496,16],[545,17,496,23,"revalidate"],[545,27,496,33],[545,28,496,34],[545,29,496,35],[546,8,497,12],[546,9,497,13],[546,15,497,19],[546,19,497,23,"type"],[546,23,497,27],[546,27,497,31,"revalidateEvents"],[546,51,497,47],[546,52,497,48,"ERROR_REVALIDATE_EVENT"],[546,74,497,70],[546,76,497,72],[547,10,498,16],[547,17,498,23,"revalidate"],[547,27,498,33],[547,28,498,34,"opts"],[547,32,498,38],[547,33,498,39],[548,8,499,12],[549,8,500,12],[550,6,501,8],[550,7,501,9],[551,6,502,8],[551,10,502,14,"unsubEvents"],[551,21,502,25],[551,24,502,28],[551,28,502,28,"subscribeCallback"],[551,53,502,45],[551,55,502,46,"key"],[551,58,502,49],[551,60,502,51,"EVENT_REVALIDATORS"],[551,78,502,69],[551,80,502,71,"onRevalidate"],[551,92,502,83],[551,93,502,84],[552,6,503,8],[553,6,504,8,"unmountedRef"],[553,18,504,20],[553,19,504,21,"current"],[553,26,504,28],[553,29,504,31],[553,34,504,36],[554,6,505,8,"keyRef"],[554,12,505,14],[554,13,505,15,"current"],[554,20,505,22],[554,23,505,25,"key"],[554,26,505,28],[555,6,506,8,"initialMountedRef"],[555,23,506,25],[555,24,506,26,"current"],[555,31,506,33],[555,34,506,36],[555,38,506,40],[556,6,507,8],[557,6,508,8,"setCache"],[557,14,508,16],[557,15,508,17],[558,8,509,12,"_k"],[558,10,509,14],[558,12,509,16,"fnArg"],[559,6,510,8],[559,7,510,9],[559,8,510,10],[560,6,511,8],[561,6,512,8],[561,10,512,12,"shouldDoInitialRevalidation"],[561,37,512,39],[561,39,512,41],[562,8,513,12],[562,12,513,16],[562,16,513,16,"isUndefined$1"],[562,35,513,29],[562,37,513,30,"data"],[562,41,513,34],[562,42,513,35],[562,46,513,39,"IS_SERVER"],[562,63,513,48],[562,65,513,50],[563,10,514,16],[564,10,515,16,"softRevalidate"],[564,24,515,30],[564,25,515,31],[564,26,515,32],[565,8,516,12],[565,9,516,13],[565,15,516,19],[566,10,517,16],[567,10,518,16],[568,10,519,16],[568,14,519,16,"rAF"],[568,25,519,19],[568,27,519,20,"softRevalidate"],[568,41,519,34],[568,42,519,35],[569,8,520,12],[570,6,521,8],[571,6,522,8],[571,13,522,15],[571,19,522,19],[572,8,523,12],[573,8,524,12,"unmountedRef"],[573,20,524,24],[573,21,524,25,"current"],[573,28,524,32],[573,31,524,35],[573,35,524,39],[574,8,525,12,"unsubEvents"],[574,19,525,23],[574,20,525,24],[574,21,525,25],[575,6,526,8],[575,7,526,9],[576,4,527,4],[576,5,527,5],[576,7,527,7],[576,8,528,8,"key"],[576,11,528,11],[576,12,529,5],[576,13,529,6],[577,4,530,4],[578,4,531,4],[578,8,531,4,"useIsomorphicLayoutEffect"],[578,41,531,29],[578,43,531,30],[578,49,531,34],[579,6,532,8],[579,10,532,12,"timer"],[579,15,532,17],[580,6,533,8],[580,15,533,17,"next"],[580,19,533,21,"next"],[580,20,533,21],[580,22,533,24],[581,8,534,12],[582,8,535,12],[583,8,536,12],[583,12,536,18,"interval"],[583,20,536,26],[583,23,536,29],[583,27,536,29,"isFunction$1"],[583,45,536,41],[583,47,536,42,"refreshInterval"],[583,62,536,57],[583,63,536,58],[583,66,536,61,"refreshInterval"],[583,81,536,76],[583,82,536,77,"getCache"],[583,90,536,85],[583,91,536,86],[583,92,536,87],[583,93,536,88,"data"],[583,97,536,92],[583,98,536,93],[583,101,536,96,"refreshInterval"],[583,116,536,111],[584,8,537,12],[585,8,538,12],[586,8,539,12],[587,8,540,12],[587,12,540,16,"interval"],[587,20,540,24],[587,24,540,28,"timer"],[587,29,540,33],[587,34,540,38],[587,35,540,39],[587,36,540,40],[587,38,540,42],[588,10,541,16,"timer"],[588,15,541,21],[588,18,541,24,"setTimeout"],[588,28,541,34],[588,29,541,35,"execute"],[588,36,541,42],[588,38,541,44,"interval"],[588,46,541,52],[588,47,541,53],[589,8,542,12],[590,6,543,8],[591,6,544,8],[591,15,544,17,"execute"],[591,22,544,24,"execute"],[591,23,544,24],[591,25,544,27],[592,8,545,12],[593,8,546,12],[594,8,547,12],[594,12,547,16],[594,13,547,17,"getCache"],[594,21,547,25],[594,22,547,26],[594,23,547,27],[594,24,547,28,"error"],[594,29,547,33],[594,34,547,38,"refreshWhenHidden"],[594,51,547,55],[594,55,547,59,"getConfig"],[594,64,547,68],[594,65,547,69],[594,66,547,70],[594,67,547,71,"isVisible"],[594,76,547,80],[594,77,547,81],[594,78,547,82],[594,79,547,83],[594,84,547,88,"refreshWhenOffline"],[594,102,547,106],[594,106,547,110,"getConfig"],[594,115,547,119],[594,116,547,120],[594,117,547,121],[594,118,547,122,"isOnline"],[594,126,547,130],[594,127,547,131],[594,128,547,132],[594,129,547,133],[594,131,547,135],[595,10,548,16,"revalidate"],[595,20,548,26],[595,21,548,27,"WITH_DEDUPE"],[595,32,548,38],[595,33,548,39],[595,34,548,40,"then"],[595,38,548,44],[595,39,548,45,"next"],[595,43,548,49],[595,44,548,50],[596,8,549,12],[596,9,549,13],[596,15,549,19],[597,10,550,16],[598,10,551,16,"next"],[598,14,551,20],[598,15,551,21],[598,16,551,22],[599,8,552,12],[600,6,553,8],[601,6,554,8,"next"],[601,10,554,12],[601,11,554,13],[601,12,554,14],[602,6,555,8],[602,13,555,15],[602,19,555,19],[603,8,556,12],[603,12,556,16,"timer"],[603,17,556,21],[603,19,556,23],[604,10,557,16,"clearTimeout"],[604,22,557,28],[604,23,557,29,"timer"],[604,28,557,34],[604,29,557,35],[605,10,558,16,"timer"],[605,15,558,21],[605,18,558,24],[605,19,558,25],[605,20,558,26],[606,8,559,12],[607,6,560,8],[607,7,560,9],[608,4,561,4],[608,5,561,5],[608,7,561,7],[608,8,562,8,"refreshInterval"],[608,23,562,23],[608,25,563,8,"refreshWhenHidden"],[608,42,563,25],[608,44,564,8,"refreshWhenOffline"],[608,62,564,26],[608,64,565,8,"key"],[608,67,565,11],[608,68,566,5],[608,69,566,6],[609,4,567,4],[610,4,568,4],[610,8,568,4,"useDebugValue"],[610,28,568,17],[610,30,568,18,"returnedData"],[610,42,568,30],[610,43,568,31],[611,4,569,4],[612,4,570,4],[613,4,571,4],[614,4,572,4],[615,4,573,4],[615,8,573,8,"suspense"],[615,16,573,16],[615,20,573,20],[615,24,573,20,"isUndefined$1"],[615,43,573,33],[615,45,573,34,"data"],[615,49,573,38],[615,50,573,39],[615,54,573,43,"key"],[615,57,573,46],[615,59,573,48],[616,6,574,8],[617,6,575,8],[618,6,576,8],[619,6,577,8],[619,10,577,12],[619,11,577,13,"IS_REACT_LEGACY"],[619,34,577,28],[619,38,577,32,"IS_SERVER"],[619,55,577,41],[619,57,577,43],[620,8,578,12],[620,14,578,18],[620,18,578,22,"Error"],[620,23,578,27],[620,24,578,28],[620,79,578,83],[620,80,578,84],[621,6,579,8],[622,6,580,8],[623,6,581,8,"fetcherRef"],[623,16,581,18],[623,17,581,19,"current"],[623,24,581,26],[623,27,581,29,"fetcher"],[623,34,581,36],[624,6,582,8,"configRef"],[624,15,582,17],[624,16,582,18,"current"],[624,23,582,25],[624,26,582,28,"config"],[624,32,582,34],[625,6,583,8,"unmountedRef"],[625,18,583,20],[625,19,583,21,"current"],[625,26,583,28],[625,29,583,31],[625,34,583,36],[626,6,584,8],[626,10,584,14,"req"],[626,13,584,17],[626,16,584,20,"PRELOAD"],[626,23,584,27],[626,24,584,28,"key"],[626,27,584,31],[626,28,584,32],[627,6,585,8],[627,10,585,12],[627,11,585,13],[627,15,585,13,"isUndefined$1"],[627,34,585,26],[627,36,585,27,"req"],[627,39,585,30],[627,40,585,31],[627,42,585,33],[628,8,586,12],[628,12,586,18,"promise"],[628,19,586,25],[628,22,586,28,"boundMutate"],[628,33,586,39],[628,34,586,40,"req"],[628,37,586,43],[628,38,586,44],[629,8,587,12,"use"],[629,11,587,15],[629,12,587,16,"promise"],[629,19,587,23],[629,20,587,24],[630,6,588,8],[631,6,589,8],[631,10,589,12],[631,14,589,12,"isUndefined$1"],[631,33,589,25],[631,35,589,26,"error"],[631,40,589,31],[631,41,589,32],[631,43,589,34],[632,8,590,12],[632,12,590,18,"promise"],[632,20,590,25],[632,23,590,28,"revalidate"],[632,33,590,38],[632,34,590,39,"WITH_DEDUPE"],[632,45,590,50],[632,46,590,51],[633,8,591,12],[633,12,591,16],[633,13,591,17],[633,17,591,17,"isUndefined$1"],[633,36,591,30],[633,38,591,31,"returnedData"],[633,50,591,43],[633,51,591,44],[633,53,591,46],[634,10,592,16,"promise"],[634,18,592,23],[634,19,592,24,"status"],[634,25,592,30],[634,28,592,33],[634,39,592,44],[635,10,593,16,"promise"],[635,18,593,23],[635,19,593,24,"value"],[635,24,593,29],[635,27,593,32],[635,31,593,36],[636,8,594,12],[637,8,595,12,"use"],[637,11,595,15],[637,12,595,16,"promise"],[637,20,595,23],[637,21,595,24],[638,6,596,8],[638,7,596,9],[638,13,596,15],[639,8,597,12],[639,14,597,18,"error"],[639,19,597,23],[640,6,598,8],[641,4,599,4],[642,4,600,4],[642,11,600,11],[643,6,601,8,"mutate"],[643,12,601,14],[643,14,601,16,"boundMutate"],[643,25,601,27],[644,6,602,8],[644,10,602,12,"data"],[644,14,602,16,"data"],[644,15,602,16],[644,17,602,20],[645,8,603,12,"stateDependencies"],[645,25,603,29],[645,26,603,30,"data"],[645,30,603,34],[645,33,603,37],[645,37,603,41],[646,8,604,12],[646,15,604,19,"returnedData"],[646,27,604,31],[647,6,605,8],[647,7,605,9],[648,6,606,8],[648,10,606,12,"error"],[648,15,606,17,"error"],[648,16,606,17],[648,18,606,21],[649,8,607,12,"stateDependencies"],[649,25,607,29],[649,26,607,30,"error"],[649,31,607,35],[649,34,607,38],[649,38,607,42],[650,8,608,12],[650,15,608,19,"error"],[650,20,608,24],[651,6,609,8],[651,7,609,9],[652,6,610,8],[652,10,610,12,"isValidating"],[652,22,610,24,"isValidating"],[652,23,610,24],[652,25,610,28],[653,8,611,12,"stateDependencies"],[653,25,611,29],[653,26,611,30,"isValidating"],[653,38,611,42],[653,41,611,45],[653,45,611,49],[654,8,612,12],[654,15,612,19,"isValidating"],[654,27,612,31],[655,6,613,8],[655,7,613,9],[656,6,614,8],[656,10,614,12,"isLoading"],[656,19,614,21,"isLoading"],[656,20,614,21],[656,22,614,25],[657,8,615,12,"stateDependencies"],[657,25,615,29],[657,26,615,30,"isLoading"],[657,35,615,39],[657,38,615,42],[657,42,615,46],[658,8,616,12],[658,15,616,19,"isLoading"],[658,24,616,28],[659,6,617,8],[660,4,618,4],[660,5,618,5],[661,2,619,0],[661,3,619,1],[662,2,620,0],[662,6,620,6,"SWRConfig"],[662,15,620,15],[662,18,620,15,"exports"],[662,25,620,15],[662,26,620,15,"SWRConfig"],[662,35,620,15],[662,38,620,18,"OBJECT$1"],[662,52,620,26],[662,53,620,27,"defineProperty"],[662,67,620,41],[662,68,620,42,"SWRConfig$1"],[662,85,620,53],[662,87,620,55],[662,101,620,69],[662,103,620,71],[663,4,621,4,"value"],[663,9,621,9],[663,11,621,11,"defaultConfig"],[664,2,622,0],[664,3,622,1],[664,4,622,2],[665,2,623,0],[666,0,624,0],[667,0,625,0],[668,0,626,0],[669,0,627,0],[670,0,628,0],[671,0,629,0],[672,0,630,0],[673,0,631,0],[674,0,632,0],[675,0,633,0],[676,0,634,0],[677,0,635,0],[678,0,636,0],[679,0,637,0],[680,2,637,4],[680,6,637,10,"useSWR"],[680,12,637,16],[680,15,637,16,"exports"],[680,22,637,16],[680,23,637,16,"default"],[680,30,637,16],[680,33,637,19],[680,37,637,19,"withArgs"],[680,53,637,27],[680,55,637,28,"useSWRHandler"],[680,68,637,41],[680,69,637,42],[682,2,639,0],[683,0,639,0],[683,3]],"functionMap":{"names":["<global>","noop","isUndefined","isFunction","isObjectType","stableHash","serialize","unstable_serialize","<anonymous>","thenable.then$argument_0","thenable.then$argument_1","useSWRHandler","getConfig","isActive","isEqual","useMemo$argument_0","getSelectedCache","useSyncExternalStore$argument_0","subscribeCache$argument_1","revalidate","callbackSafeguard","finishRequestAndUpdateState","cleanupState","setTimeout$argument_0","currentConfig.onErrorRetry$argument_3","boundMutate","useIsomorphicLayoutEffect$argument_0","onRevalidate","next","execute","get__data","get__error","get__isValidating","get__isLoading"],"mappings":"AAA;aCM,MD;oBEO,oBF;mBGC,2BH;qBIO,2EJ;mBKW;CLwC;kBME;CNkB;2BOE,wBP;CQO;0BCU;aDG,EE;aFG;CRG;sBWI;sBCiB,qBD;qBEC,qDF;oBGM;KHmB;gCIC;oCPC;SOS;iCCE;SDY;YPU;aOuB;YPC,kBO;KJG;oDMK,gCC;SDE,CN;yCHgB;KGc;mCQQ;mCCsB;SDK;4CEM;SFE;6BGC;SHM;+BIgB;qBJI;gFKyF;6BLK;KRc;IckB;KdE;8BeG;KfQ;8BeE;6BCM;SDiB;elBqB;SkBI;KfC;8BeI;QEE;SFU;QGC;SHS;elBE;SkBK;KfC;QmByC;SnBG;QoBC;SpBG;QqBC;SrBG;QsBC;StBG;CXE"}},"type":"js/module"}]}