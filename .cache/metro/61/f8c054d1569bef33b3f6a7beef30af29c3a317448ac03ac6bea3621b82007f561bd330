{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":278,"column":0,"index":8549}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@Rolec-Services/rolec-bluetooth","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":82},"end":{"line":2,"column":60,"index":142}}],"key":"mvIEp3d27hWAE6sa6kCy8Oa63vo="}},{"name":"./protocol","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":190},"end":{"line":5,"column":35,"index":225}}],"key":"RThmPn5lY4zhRlKj05FgtBeESzs="}},{"name":"./schema","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":226},"end":{"line":6,"column":31,"index":257}}],"key":"hfEfm7RrvzCRADgGatDI2RvMB1w="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.fetchAndSanitizeReadParameters = fetchAndSanitizeReadParameters;\n  exports.findDataKeysFromResponse = findDataKeysFromResponse;\n  exports.sanitizeWriteData = sanitizeWriteData;\n  var _rolecBluetooth = require(_dependencyMap[1], \"@Rolec-Services/rolec-bluetooth\");\n  var _protocol = _interopRequireDefault(require(_dependencyMap[2], \"./protocol\"));\n  var _schema = _interopRequireDefault(require(_dependencyMap[3], \"./schema\"));\n  function findDataKeysFromResponse(event) {\n    // Find the event schema with the matching key (description)\n    var matchingEventSchema = _protocol.default.properties[event.key];\n    if (!matchingEventSchema) {\n      console.log(\"No matching event schema found.\");\n      return [];\n    }\n    if (matchingEventSchema.messageType !== \"response\" || !matchingEventSchema.data) {\n      console.log(\"Not a response type.\");\n      return [];\n    }\n\n    // Find the form schema with the matching readKey\n    var matchingFormSchema = _schema.default.find(form => form.readKey === matchingEventSchema.description && hasMatchingResponseParameter(event.data, form.parameters));\n    console.log(\"Matching Form Schema\");\n    console.log(matchingFormSchema);\n    if (!matchingFormSchema) {\n      console.log(\"No matching form schema found.\");\n      return [];\n    }\n\n    // Extract the data keys (e.g., \"SSID\", \"Password\") from the event schema\n    var dataKeys = Object.keys(matchingEventSchema.data);\n\n    // Push the corresponding data keys into an array based on the form schema\n    var expectedDataKeys = [];\n\n    // Loop through the inputs in the form schema and match with data keys\n    matchingFormSchema.inputs.forEach(input => {\n      if (dataKeys.includes(input.responseDataKey)) {\n        expectedDataKeys.push({\n          handle: `${matchingFormSchema.handle}__${input.responseDataKey}`,\n          value: event.data[input.responseDataKey] ?? \"\"\n        });\n      }\n    });\n    return expectedDataKeys;\n  }\n  function hasMatchingResponseParameter(responseData, parameters) {\n    // No paramters no need to chaeck\n    if (!parameters) return true;\n\n    // Iterate through the parameters and check if the response matches\n    return parameters.every(param => {\n      var responseValue = responseData[param.responseDataKey];\n      return responseValue !== undefined && String(responseValue) === param.value;\n    });\n  }\n  function sanitizeWriteData(schemaHandle, data) {\n    // Find the matching schema entry based on handle\n    var schemaConfig = _schema.default.find(config => config.handle === schemaHandle);\n    if (!schemaConfig) {\n      return {\n        valid: false,\n        errors: [`Schema with handle \"${schemaHandle}\" not found.`]\n      };\n    }\n    if (!schemaConfig.writeKey) {\n      return {\n        valid: false,\n        errors: [`Schema with handle \"${schemaHandle}\" does not have a write key.`]\n      };\n    }\n\n    // Find the corresponding protocol description (the response type)\n    var protocolKey = schemaConfig.readKey;\n    var protocolData = _protocol.default.properties[protocolKey + \" response\"];\n    if (!protocolData?.data) return {\n      valid: false,\n      errors: [`No protocol data found for \"${protocolKey} response\".`]\n    };\n\n    // Prepare a list of errors and validate the data\n    var errors = [];\n    var writeData = \"\";\n    if (schemaConfig.parameters && schemaConfig.parameters.length > 0) {\n      schemaConfig.parameters.forEach(param => {\n        var paramKey = param.responseDataKey;\n\n        // If the protocol data has a corresponding key\n        var protocolDataEntry = protocolData.data?.[paramKey];\n        if (protocolDataEntry) {\n          var expectedLength = protocolDataEntry.length;\n          if (protocolDataEntry.type.toUpperCase() === \"INTEGER\") {\n            var numValue = parseInt(param.value);\n            writeData += _rolecBluetooth.converter.numToLittleEndianHex(numValue, expectedLength);\n          } else {\n            var paddedValue = param.value.padEnd(expectedLength, \"\\0\");\n\n            // Check if the length matches (if providedValue is a string or array)\n            if (paddedValue && typeof paddedValue === \"string\" && paddedValue.length !== expectedLength) {\n              errors.push(`${param.responseDataKey} should have a length of \"${expectedLength}\", but got \"${param.value.length}\".`);\n            }\n            if (paddedValue) writeData += _rolecBluetooth.converter.asciiToHexString(paddedValue);\n          }\n        } else {\n          errors.push(`Missing protocol data for \"${paramKey}\" in \"${protocolKey} response\".`);\n        }\n      });\n    }\n    schemaConfig.inputs.forEach(input => {\n      var inputKey = input.responseDataKey;\n\n      // If the protocol data has a corresponding key\n      var protocolDataEntry = protocolData.data?.[inputKey];\n      if (protocolDataEntry) {\n        var expectedLength = protocolDataEntry.length;\n        var providedValue = data[inputKey] ?? \"\";\n        if (protocolDataEntry.type.toUpperCase() === \"INTEGER\") {\n          var numValue = parseInt(providedValue);\n          writeData += _rolecBluetooth.converter.numToLittleEndianHex(numValue, expectedLength);\n        } else {\n          var paddedValue = providedValue.padEnd(expectedLength, \"\\0\");\n\n          // Check if the length matches (if providedValue is a string or array)\n          if (paddedValue && typeof paddedValue === \"string\" && paddedValue.length !== expectedLength) {\n            errors.push(`${input.displayName} should have a length of \"${expectedLength}\", but got \"${providedValue.length}\".`);\n          }\n          if (paddedValue) writeData += _rolecBluetooth.converter.asciiToHexString(paddedValue);\n        }\n      } else {\n        errors.push(`Missing protocol data for \"${inputKey}\" in \"${protocolKey} response\".`);\n      }\n    });\n    return {\n      valid: errors.length === 0,\n      errors: errors,\n      data: writeData,\n      writeKey: schemaConfig.writeKey\n    };\n  }\n  function fetchAndSanitizeReadParameters(schemaHandle) {\n    // Find the matching schema entry based on handle\n    var schemaConfig = _schema.default.find(config => config.handle === schemaHandle);\n    if (!schemaConfig) {\n      return {\n        valid: false,\n        errors: [`Schema with handle \"${schemaHandle}\" does not exist.`]\n      };\n    }\n    console.log(schemaConfig);\n    // So we know whether there are some parameters worth worrying about\n    if (!schemaConfig.parameters || schemaConfig.parameters.length === 0) {\n      return {\n        valid: true,\n        errors: []\n      };\n    }\n\n    // Find the corresponding protocol description (the response type)\n    var protocolKey = schemaConfig.readKey;\n    var protocolData = _protocol.default.properties[protocolKey + \" response\"];\n    if (!protocolData?.data) return {\n      valid: false,\n      errors: [`No protocol data found for \"${protocolKey} response\".`]\n    };\n\n    // Prepare a list of errors and validate the data\n    var errors = [];\n    var writeData = \"\";\n    schemaConfig.parameters.forEach(param => {\n      var paramKey = param.responseDataKey;\n\n      // If the protocol data has a corresponding key\n      var protocolDataEntry = protocolData.data?.[paramKey];\n      if (protocolDataEntry) {\n        var expectedLength = protocolDataEntry.length;\n        if (protocolDataEntry.type.toUpperCase() === \"INTEGER\") {\n          var numValue = parseInt(param.value);\n          writeData += _rolecBluetooth.converter.numToLittleEndianHex(numValue, expectedLength);\n        } else {\n          var paddedValue = param.value.padEnd(expectedLength, \"\\0\");\n\n          // Check if the length matches (if providedValue is a string or array)\n          if (paddedValue && typeof paddedValue === \"string\" && paddedValue.length !== expectedLength) {\n            errors.push(`${param.responseDataKey} should have a length of \"${expectedLength}\", but got \"${param.value.length}\".`);\n          }\n          if (paddedValue) writeData += _rolecBluetooth.converter.asciiToHexString(paddedValue);\n        }\n      } else {\n        errors.push(`Missing protocol data for \"${paramKey}\" in \"${protocolKey} response\".`);\n      }\n    });\n    return {\n      valid: errors.length === 0,\n      errors: errors,\n      data: writeData\n    };\n  }\n  var _default = exports.default = {\n    findDataKeysFromResponse,\n    sanitizeWriteData\n  };\n});","lineCount":206,"map":[[10,2,2,0],[10,6,2,0,"_rolecBluetooth"],[10,21,2,0],[10,24,2,0,"require"],[10,31,2,0],[10,32,2,0,"_dependencyMap"],[10,46,2,0],[11,2,5,0],[11,6,5,0,"_protocol"],[11,15,5,0],[11,18,5,0,"_interopRequireDefault"],[11,40,5,0],[11,41,5,0,"require"],[11,48,5,0],[11,49,5,0,"_dependencyMap"],[11,63,5,0],[12,2,6,0],[12,6,6,0,"_schema"],[12,13,6,0],[12,16,6,0,"_interopRequireDefault"],[12,38,6,0],[12,39,6,0,"require"],[12,46,6,0],[12,47,6,0,"_dependencyMap"],[12,61,6,0],[13,2,26,7],[13,11,26,16,"findDataKeysFromResponse"],[13,35,26,40,"findDataKeysFromResponse"],[13,36,27,2,"event"],[13,41,27,34],[13,43,28,19],[14,4,29,2],[15,4,30,2],[15,8,30,8,"matchingEventSchema"],[15,27,30,27],[15,30,30,30,"eProtocol"],[15,47,30,39],[15,48,30,40,"properties"],[15,58,30,50],[15,59,30,51,"event"],[15,64,30,56],[15,65,30,57,"key"],[15,68,30,60],[15,69,30,61],[16,4,32,2],[16,8,32,6],[16,9,32,7,"matchingEventSchema"],[16,28,32,26],[16,30,32,28],[17,6,33,4,"console"],[17,13,33,11],[17,14,33,12,"log"],[17,17,33,15],[17,18,33,16],[17,51,33,49],[17,52,33,50],[18,6,34,4],[18,13,34,11],[18,15,34,13],[19,4,35,2],[20,4,37,2],[20,8,38,4,"matchingEventSchema"],[20,27,38,23],[20,28,38,24,"messageType"],[20,39,38,35],[20,44,38,40],[20,54,38,50],[20,58,39,4],[20,59,39,5,"matchingEventSchema"],[20,78,39,24],[20,79,39,25,"data"],[20,83,39,29],[20,85,40,4],[21,6,41,4,"console"],[21,13,41,11],[21,14,41,12,"log"],[21,17,41,15],[21,18,41,16],[21,40,41,38],[21,41,41,39],[22,6,42,4],[22,13,42,11],[22,15,42,13],[23,4,43,2],[25,4,45,2],[26,4,46,2],[26,8,46,8,"matchingFormSchema"],[26,26,46,26],[26,29,46,29,"eSchema"],[26,44,46,36],[26,45,46,37,"find"],[26,49,46,41],[26,50,47,5,"form"],[26,54,47,9],[26,58,48,6,"form"],[26,62,48,10],[26,63,48,11,"readKey"],[26,70,48,18],[26,75,48,23,"matchingEventSchema"],[26,94,48,42],[26,95,48,43,"description"],[26,106,48,54],[26,110,49,6,"hasMatchingResponseParameter"],[26,138,49,34],[26,139,49,35,"event"],[26,144,49,40],[26,145,49,41,"data"],[26,149,49,45],[26,151,49,47,"form"],[26,155,49,51],[26,156,49,52,"parameters"],[26,166,49,62],[26,167,50,2],[26,168,50,3],[27,4,52,2,"console"],[27,11,52,9],[27,12,52,10,"log"],[27,15,52,13],[27,16,52,14],[27,38,52,36],[27,39,52,37],[28,4,53,2,"console"],[28,11,53,9],[28,12,53,10,"log"],[28,15,53,13],[28,16,53,14,"matchingFormSchema"],[28,34,53,32],[28,35,53,33],[29,4,55,2],[29,8,55,6],[29,9,55,7,"matchingFormSchema"],[29,27,55,25],[29,29,55,27],[30,6,56,4,"console"],[30,13,56,11],[30,14,56,12,"log"],[30,17,56,15],[30,18,56,16],[30,50,56,48],[30,51,56,49],[31,6,57,4],[31,13,57,11],[31,15,57,13],[32,4,58,2],[34,4,60,2],[35,4,61,2],[35,8,61,8,"dataKeys"],[35,16,61,16],[35,19,61,19,"Object"],[35,25,61,25],[35,26,61,26,"keys"],[35,30,61,30],[35,31,61,31,"matchingEventSchema"],[35,50,61,50],[35,51,61,51,"data"],[35,55,61,55],[35,56,61,56],[37,4,63,2],[38,4,64,2],[38,8,64,8,"expectedDataKeys"],[38,24,64,41],[38,27,64,44],[38,29,64,46],[40,4,66,2],[41,4,67,2,"matchingFormSchema"],[41,22,67,20],[41,23,67,21,"inputs"],[41,29,67,27],[41,30,67,28,"forEach"],[41,37,67,35],[41,38,67,37,"input"],[41,43,67,42],[41,47,67,47],[42,6,68,4],[42,10,68,8,"dataKeys"],[42,18,68,16],[42,19,68,17,"includes"],[42,27,68,25],[42,28,68,26,"input"],[42,33,68,31],[42,34,68,32,"responseDataKey"],[42,49,68,47],[42,50,68,48],[42,52,68,50],[43,8,69,6,"expectedDataKeys"],[43,24,69,22],[43,25,69,23,"push"],[43,29,69,27],[43,30,69,28],[44,10,70,8,"handle"],[44,16,70,14],[44,18,70,16],[44,21,70,19,"matchingFormSchema"],[44,39,70,37],[44,40,70,38,"handle"],[44,46,70,44],[44,51,70,49,"input"],[44,56,70,54],[44,57,70,55,"responseDataKey"],[44,72,70,70],[44,74,70,72],[45,10,71,8,"value"],[45,15,71,13],[45,17,71,15,"event"],[45,22,71,20],[45,23,71,21,"data"],[45,27,71,25],[45,28,71,26,"input"],[45,33,71,31],[45,34,71,32,"responseDataKey"],[45,49,71,47],[45,50,71,48],[45,54,71,52],[46,8,72,6],[46,9,72,7],[46,10,72,8],[47,6,73,4],[48,4,74,2],[48,5,74,3],[48,6,74,4],[49,4,76,2],[49,11,76,9,"expectedDataKeys"],[49,27,76,25],[50,2,77,0],[51,2,79,0],[51,11,79,9,"hasMatchingResponseParameter"],[51,39,79,37,"hasMatchingResponseParameter"],[51,40,80,2,"responseData"],[51,52,80,38],[51,54,81,2,"parameters"],[51,64,81,40],[51,66,82,11],[52,4,83,2],[53,4,84,2],[53,8,84,6],[53,9,84,7,"parameters"],[53,19,84,17],[53,21,84,19],[53,28,84,26],[53,32,84,30],[55,4,86,2],[56,4,87,2],[56,11,87,9,"parameters"],[56,21,87,19],[56,22,87,20,"every"],[56,27,87,25],[56,28,87,27,"param"],[56,33,87,32],[56,37,87,37],[57,6,88,4],[57,10,88,10,"responseValue"],[57,23,88,23],[57,26,88,26,"responseData"],[57,38,88,38],[57,39,88,39,"param"],[57,44,88,44],[57,45,88,45,"responseDataKey"],[57,60,88,60],[57,61,88,61],[58,6,89,4],[58,13,89,11,"responseValue"],[58,26,89,24],[58,31,89,29,"undefined"],[58,40,89,38],[58,44,89,42,"String"],[58,50,89,48],[58,51,89,49,"responseValue"],[58,64,89,62],[58,65,89,63],[58,70,89,68,"param"],[58,75,89,73],[58,76,89,74,"value"],[58,81,89,79],[59,4,90,2],[59,5,90,3],[59,6,90,4],[60,2,91,0],[61,2,93,7],[61,11,93,16,"sanitizeWriteData"],[61,28,93,33,"sanitizeWriteData"],[61,29,94,2,"schemaHandle"],[61,41,94,22],[61,43,95,2,"data"],[61,47,95,30],[61,49,96,20],[62,4,97,2],[63,4,98,2],[63,8,98,8,"schemaConfig"],[63,20,98,20],[63,23,98,23,"eSchema"],[63,38,98,30],[63,39,98,31,"find"],[63,43,98,35],[63,44,98,37,"config"],[63,50,98,43],[63,54,98,48,"config"],[63,60,98,54],[63,61,98,55,"handle"],[63,67,98,61],[63,72,98,66,"schemaHandle"],[63,84,98,78],[63,85,98,79],[64,4,99,2],[64,8,99,6],[64,9,99,7,"schemaConfig"],[64,21,99,19],[64,23,99,21],[65,6,100,4],[65,13,100,11],[66,8,101,6,"valid"],[66,13,101,11],[66,15,101,13],[66,20,101,18],[67,8,102,6,"errors"],[67,14,102,12],[67,16,102,14],[67,17,102,15],[67,40,102,38,"schemaHandle"],[67,52,102,50],[67,66,102,64],[68,6,103,4],[68,7,103,5],[69,4,104,2],[70,4,106,2],[70,8,106,6],[70,9,106,7,"schemaConfig"],[70,21,106,19],[70,22,106,20,"writeKey"],[70,30,106,28],[70,32,106,30],[71,6,107,4],[71,13,107,11],[72,8,108,6,"valid"],[72,13,108,11],[72,15,108,13],[72,20,108,18],[73,8,109,6,"errors"],[73,14,109,12],[73,16,109,14],[73,17,110,8],[73,40,110,31,"schemaHandle"],[73,52,110,43],[73,82,110,73],[74,6,112,4],[74,7,112,5],[75,4,113,2],[77,4,115,2],[78,4,116,2],[78,8,116,8,"protocolKey"],[78,19,116,19],[78,22,116,22,"schemaConfig"],[78,34,116,34],[78,35,116,35,"readKey"],[78,42,116,42],[79,4,117,2],[79,8,117,8,"protocolData"],[79,20,117,20],[79,23,117,23,"eProtocol"],[79,40,117,32],[79,41,117,33,"properties"],[79,51,117,43],[79,52,117,44,"protocolKey"],[79,63,117,55],[79,66,117,58],[79,77,117,69],[79,78,117,70],[80,4,118,2],[80,8,118,6],[80,9,118,7,"protocolData"],[80,21,118,19],[80,23,118,21,"data"],[80,27,118,25],[80,29,119,4],[80,36,119,11],[81,6,120,6,"valid"],[81,11,120,11],[81,13,120,13],[81,18,120,18],[82,6,121,6,"errors"],[82,12,121,12],[82,14,121,14],[82,15,121,15],[82,46,121,46,"protocolKey"],[82,57,121,57],[82,70,121,70],[83,4,122,4],[83,5,122,5],[85,4,124,2],[86,4,125,2],[86,8,125,8,"errors"],[86,14,125,24],[86,17,125,27],[86,19,125,29],[87,4,126,2],[87,8,126,6,"writeData"],[87,17,126,15],[87,20,126,18],[87,22,126,20],[88,4,128,2],[88,8,128,6,"schemaConfig"],[88,20,128,18],[88,21,128,19,"parameters"],[88,31,128,29],[88,35,128,33,"schemaConfig"],[88,47,128,45],[88,48,128,46,"parameters"],[88,58,128,56],[88,59,128,57,"length"],[88,65,128,63],[88,68,128,66],[88,69,128,67],[88,71,128,69],[89,6,129,4,"schemaConfig"],[89,18,129,16],[89,19,129,17,"parameters"],[89,29,129,27],[89,30,129,28,"forEach"],[89,37,129,35],[89,38,129,37,"param"],[89,43,129,42],[89,47,129,47],[90,8,130,6],[90,12,130,12,"paramKey"],[90,20,130,20],[90,23,130,23,"param"],[90,28,130,28],[90,29,130,29,"responseDataKey"],[90,44,130,44],[92,8,132,6],[93,8,133,6],[93,12,133,12,"protocolDataEntry"],[93,29,133,29],[93,32,133,32,"protocolData"],[93,44,133,44],[93,45,133,45,"data"],[93,49,133,49],[93,52,133,52,"paramKey"],[93,60,133,60],[93,61,133,61],[94,8,134,6],[94,12,134,10,"protocolDataEntry"],[94,29,134,27],[94,31,134,29],[95,10,135,8],[95,14,135,14,"expectedLength"],[95,28,135,28],[95,31,135,31,"protocolDataEntry"],[95,48,135,48],[95,49,135,49,"length"],[95,55,135,55],[96,10,136,8],[96,14,136,12,"protocolDataEntry"],[96,31,136,29],[96,32,136,30,"type"],[96,36,136,34],[96,37,136,35,"toUpperCase"],[96,48,136,46],[96,49,136,47],[96,50,136,48],[96,55,136,53],[96,64,136,62],[96,66,136,64],[97,12,137,10],[97,16,137,16,"numValue"],[97,24,137,24],[97,27,137,27,"parseInt"],[97,35,137,35],[97,36,137,36,"param"],[97,41,137,41],[97,42,137,42,"value"],[97,47,137,47],[97,48,137,48],[98,12,138,10,"writeData"],[98,21,138,19],[98,25,138,23,"converter"],[98,50,138,32],[98,51,138,33,"numToLittleEndianHex"],[98,71,138,53],[98,72,138,54,"numValue"],[98,80,138,62],[98,82,138,64,"expectedLength"],[98,96,138,78],[98,97,138,79],[99,10,139,8],[99,11,139,9],[99,17,139,15],[100,12,140,10],[100,16,140,16,"paddedValue"],[100,27,140,27],[100,30,140,30,"param"],[100,35,140,35],[100,36,140,36,"value"],[100,41,140,41],[100,42,140,42,"padEnd"],[100,48,140,48],[100,49,140,49,"expectedLength"],[100,63,140,63],[100,65,140,65],[100,69,140,69],[100,70,140,70],[102,12,142,10],[103,12,143,10],[103,16,144,12,"paddedValue"],[103,27,144,23],[103,31,145,12],[103,38,145,19,"paddedValue"],[103,49,145,30],[103,54,145,35],[103,62,145,43],[103,66,146,12,"paddedValue"],[103,77,146,23],[103,78,146,24,"length"],[103,84,146,30],[103,89,146,35,"expectedLength"],[103,103,146,49],[103,105,147,12],[104,14,148,12,"errors"],[104,20,148,18],[104,21,148,19,"push"],[104,25,148,23],[104,26,149,14],[104,29,149,17,"param"],[104,34,149,22],[104,35,149,23,"responseDataKey"],[104,50,149,38],[104,79,149,67,"expectedLength"],[104,93,149,81],[104,108,149,96,"param"],[104,113,149,101],[104,114,149,102,"value"],[104,119,149,107],[104,120,149,108,"length"],[104,126,149,114],[104,130,150,12],[104,131,150,13],[105,12,151,10],[106,12,153,10],[106,16,153,14,"paddedValue"],[106,27,153,25],[106,29,153,27,"writeData"],[106,38,153,36],[106,42,153,40,"converter"],[106,67,153,49],[106,68,153,50,"asciiToHexString"],[106,84,153,66],[106,85,153,67,"paddedValue"],[106,96,153,78],[106,97,153,79],[107,10,154,8],[108,8,155,6],[108,9,155,7],[108,15,155,13],[109,10,156,8,"errors"],[109,16,156,14],[109,17,156,15,"push"],[109,21,156,19],[109,22,157,10],[109,52,157,40,"paramKey"],[109,60,157,48],[109,69,157,57,"protocolKey"],[109,80,157,68],[109,93,158,8],[109,94,158,9],[110,8,159,6],[111,6,160,4],[111,7,160,5],[111,8,160,6],[112,4,161,2],[113,4,163,2,"schemaConfig"],[113,16,163,14],[113,17,163,15,"inputs"],[113,23,163,21],[113,24,163,22,"forEach"],[113,31,163,29],[113,32,163,31,"input"],[113,37,163,36],[113,41,163,41],[114,6,164,4],[114,10,164,10,"inputKey"],[114,18,164,18],[114,21,164,21,"input"],[114,26,164,26],[114,27,164,27,"responseDataKey"],[114,42,164,42],[116,6,166,4],[117,6,167,4],[117,10,167,10,"protocolDataEntry"],[117,27,167,27],[117,30,167,30,"protocolData"],[117,42,167,42],[117,43,167,43,"data"],[117,47,167,47],[117,50,167,50,"inputKey"],[117,58,167,58],[117,59,167,59],[118,6,168,4],[118,10,168,8,"protocolDataEntry"],[118,27,168,25],[118,29,168,27],[119,8,169,6],[119,12,169,12,"expectedLength"],[119,26,169,26],[119,29,169,29,"protocolDataEntry"],[119,46,169,46],[119,47,169,47,"length"],[119,53,169,53],[120,8,170,6],[120,12,170,12,"providedValue"],[120,25,170,25],[120,28,170,28,"data"],[120,32,170,32],[120,33,170,33,"inputKey"],[120,41,170,41],[120,42,170,42],[120,46,170,46],[120,48,170,48],[121,8,172,6],[121,12,172,10,"protocolDataEntry"],[121,29,172,27],[121,30,172,28,"type"],[121,34,172,32],[121,35,172,33,"toUpperCase"],[121,46,172,44],[121,47,172,45],[121,48,172,46],[121,53,172,51],[121,62,172,60],[121,64,172,62],[122,10,173,8],[122,14,173,14,"numValue"],[122,22,173,22],[122,25,173,25,"parseInt"],[122,33,173,33],[122,34,173,34,"providedValue"],[122,47,173,47],[122,48,173,48],[123,10,174,8,"writeData"],[123,19,174,17],[123,23,174,21,"converter"],[123,48,174,30],[123,49,174,31,"numToLittleEndianHex"],[123,69,174,51],[123,70,174,52,"numValue"],[123,78,174,60],[123,80,174,62,"expectedLength"],[123,94,174,76],[123,95,174,77],[124,8,175,6],[124,9,175,7],[124,15,175,13],[125,10,176,8],[125,14,176,14,"paddedValue"],[125,25,176,25],[125,28,176,28,"providedValue"],[125,41,176,41],[125,42,176,42,"padEnd"],[125,48,176,48],[125,49,176,49,"expectedLength"],[125,63,176,63],[125,65,176,65],[125,69,176,69],[125,70,176,70],[127,10,178,8],[128,10,179,8],[128,14,180,10,"paddedValue"],[128,25,180,21],[128,29,181,10],[128,36,181,17,"paddedValue"],[128,47,181,28],[128,52,181,33],[128,60,181,41],[128,64,182,10,"paddedValue"],[128,75,182,21],[128,76,182,22,"length"],[128,82,182,28],[128,87,182,33,"expectedLength"],[128,101,182,47],[128,103,183,10],[129,12,184,10,"errors"],[129,18,184,16],[129,19,184,17,"push"],[129,23,184,21],[129,24,185,12],[129,27,185,15,"input"],[129,32,185,20],[129,33,185,21,"displayName"],[129,44,185,32],[129,73,185,61,"expectedLength"],[129,87,185,75],[129,102,185,90,"providedValue"],[129,115,185,103],[129,116,185,104,"length"],[129,122,185,110],[129,126,186,10],[129,127,186,11],[130,10,187,8],[131,10,189,8],[131,14,189,12,"paddedValue"],[131,25,189,23],[131,27,189,25,"writeData"],[131,36,189,34],[131,40,189,38,"converter"],[131,65,189,47],[131,66,189,48,"asciiToHexString"],[131,82,189,64],[131,83,189,65,"paddedValue"],[131,94,189,76],[131,95,189,77],[132,8,190,6],[133,6,191,4],[133,7,191,5],[133,13,191,11],[134,8,192,6,"errors"],[134,14,192,12],[134,15,192,13,"push"],[134,19,192,17],[134,20,193,8],[134,50,193,38,"inputKey"],[134,58,193,46],[134,67,193,55,"protocolKey"],[134,78,193,66],[134,91,194,6],[134,92,194,7],[135,6,195,4],[136,4,196,2],[136,5,196,3],[136,6,196,4],[137,4,198,2],[137,11,198,9],[138,6,199,4,"valid"],[138,11,199,9],[138,13,199,11,"errors"],[138,19,199,17],[138,20,199,18,"length"],[138,26,199,24],[138,31,199,29],[138,32,199,30],[139,6,200,4,"errors"],[139,12,200,10],[139,14,200,12,"errors"],[139,20,200,18],[140,6,201,4,"data"],[140,10,201,8],[140,12,201,10,"writeData"],[140,21,201,19],[141,6,202,4,"writeKey"],[141,14,202,12],[141,16,202,14,"schemaConfig"],[141,28,202,26],[141,29,202,27,"writeKey"],[142,4,203,2],[142,5,203,3],[143,2,204,0],[144,2,206,7],[144,11,206,16,"fetchAndSanitizeReadParameters"],[144,41,206,46,"fetchAndSanitizeReadParameters"],[144,42,207,2,"schemaHandle"],[144,54,207,22],[144,56,208,19],[145,4,209,2],[146,4,210,2],[146,8,210,8,"schemaConfig"],[146,20,210,20],[146,23,210,23,"eSchema"],[146,38,210,30],[146,39,210,31,"find"],[146,43,210,35],[146,44,210,37,"config"],[146,50,210,43],[146,54,210,48,"config"],[146,60,210,54],[146,61,210,55,"handle"],[146,67,210,61],[146,72,210,66,"schemaHandle"],[146,84,210,78],[146,85,210,79],[147,4,211,2],[147,8,211,6],[147,9,211,7,"schemaConfig"],[147,21,211,19],[147,23,211,21],[148,6,212,4],[148,13,212,11],[149,8,213,6,"valid"],[149,13,213,11],[149,15,213,13],[149,20,213,18],[150,8,214,6,"errors"],[150,14,214,12],[150,16,214,14],[150,17,214,15],[150,40,214,38,"schemaHandle"],[150,52,214,50],[150,71,214,69],[151,6,215,4],[151,7,215,5],[152,4,216,2],[153,4,218,2,"console"],[153,11,218,9],[153,12,218,10,"log"],[153,15,218,13],[153,16,218,14,"schemaConfig"],[153,28,218,26],[153,29,218,27],[154,4,219,2],[155,4,220,2],[155,8,220,6],[155,9,220,7,"schemaConfig"],[155,21,220,19],[155,22,220,20,"parameters"],[155,32,220,30],[155,36,220,34,"schemaConfig"],[155,48,220,46],[155,49,220,47,"parameters"],[155,59,220,57],[155,60,220,58,"length"],[155,66,220,64],[155,71,220,69],[155,72,220,70],[155,74,220,72],[156,6,221,4],[156,13,221,11],[157,8,221,13,"valid"],[157,13,221,18],[157,15,221,20],[157,19,221,24],[158,8,221,26,"errors"],[158,14,221,32],[158,16,221,34],[159,6,221,37],[159,7,221,38],[160,4,222,2],[162,4,224,2],[163,4,225,2],[163,8,225,8,"protocolKey"],[163,19,225,19],[163,22,225,22,"schemaConfig"],[163,34,225,34],[163,35,225,35,"readKey"],[163,42,225,42],[164,4,226,2],[164,8,226,8,"protocolData"],[164,20,226,20],[164,23,226,23,"eProtocol"],[164,40,226,32],[164,41,226,33,"properties"],[164,51,226,43],[164,52,226,44,"protocolKey"],[164,63,226,55],[164,66,226,58],[164,77,226,69],[164,78,226,70],[165,4,227,2],[165,8,227,6],[165,9,227,7,"protocolData"],[165,21,227,19],[165,23,227,21,"data"],[165,27,227,25],[165,29,228,4],[165,36,228,11],[166,6,229,6,"valid"],[166,11,229,11],[166,13,229,13],[166,18,229,18],[167,6,230,6,"errors"],[167,12,230,12],[167,14,230,14],[167,15,230,15],[167,46,230,46,"protocolKey"],[167,57,230,57],[167,70,230,70],[168,4,231,4],[168,5,231,5],[170,4,233,2],[171,4,234,2],[171,8,234,8,"errors"],[171,14,234,24],[171,17,234,27],[171,19,234,29],[172,4,235,2],[172,8,235,6,"writeData"],[172,17,235,15],[172,20,235,18],[172,22,235,20],[173,4,237,2,"schemaConfig"],[173,16,237,14],[173,17,237,15,"parameters"],[173,27,237,25],[173,28,237,26,"forEach"],[173,35,237,33],[173,36,237,35,"param"],[173,41,237,40],[173,45,237,45],[174,6,238,4],[174,10,238,10,"paramKey"],[174,18,238,18],[174,21,238,21,"param"],[174,26,238,26],[174,27,238,27,"responseDataKey"],[174,42,238,42],[176,6,240,4],[177,6,241,4],[177,10,241,10,"protocolDataEntry"],[177,27,241,27],[177,30,241,30,"protocolData"],[177,42,241,42],[177,43,241,43,"data"],[177,47,241,47],[177,50,241,50,"paramKey"],[177,58,241,58],[177,59,241,59],[178,6,242,4],[178,10,242,8,"protocolDataEntry"],[178,27,242,25],[178,29,242,27],[179,8,243,6],[179,12,243,12,"expectedLength"],[179,26,243,26],[179,29,243,29,"protocolDataEntry"],[179,46,243,46],[179,47,243,47,"length"],[179,53,243,53],[180,8,244,6],[180,12,244,10,"protocolDataEntry"],[180,29,244,27],[180,30,244,28,"type"],[180,34,244,32],[180,35,244,33,"toUpperCase"],[180,46,244,44],[180,47,244,45],[180,48,244,46],[180,53,244,51],[180,62,244,60],[180,64,244,62],[181,10,245,8],[181,14,245,14,"numValue"],[181,22,245,22],[181,25,245,25,"parseInt"],[181,33,245,33],[181,34,245,34,"param"],[181,39,245,39],[181,40,245,40,"value"],[181,45,245,45],[181,46,245,46],[182,10,246,8,"writeData"],[182,19,246,17],[182,23,246,21,"converter"],[182,48,246,30],[182,49,246,31,"numToLittleEndianHex"],[182,69,246,51],[182,70,246,52,"numValue"],[182,78,246,60],[182,80,246,62,"expectedLength"],[182,94,246,76],[182,95,246,77],[183,8,247,6],[183,9,247,7],[183,15,247,13],[184,10,248,8],[184,14,248,14,"paddedValue"],[184,25,248,25],[184,28,248,28,"param"],[184,33,248,33],[184,34,248,34,"value"],[184,39,248,39],[184,40,248,40,"padEnd"],[184,46,248,46],[184,47,248,47,"expectedLength"],[184,61,248,61],[184,63,248,63],[184,67,248,67],[184,68,248,68],[186,10,250,8],[187,10,251,8],[187,14,252,10,"paddedValue"],[187,25,252,21],[187,29,253,10],[187,36,253,17,"paddedValue"],[187,47,253,28],[187,52,253,33],[187,60,253,41],[187,64,254,10,"paddedValue"],[187,75,254,21],[187,76,254,22,"length"],[187,82,254,28],[187,87,254,33,"expectedLength"],[187,101,254,47],[187,103,255,10],[188,12,256,10,"errors"],[188,18,256,16],[188,19,256,17,"push"],[188,23,256,21],[188,24,257,12],[188,27,257,15,"param"],[188,32,257,20],[188,33,257,21,"responseDataKey"],[188,48,257,36],[188,77,257,65,"expectedLength"],[188,91,257,79],[188,106,257,94,"param"],[188,111,257,99],[188,112,257,100,"value"],[188,117,257,105],[188,118,257,106,"length"],[188,124,257,112],[188,128,258,10],[188,129,258,11],[189,10,259,8],[190,10,261,8],[190,14,261,12,"paddedValue"],[190,25,261,23],[190,27,261,25,"writeData"],[190,36,261,34],[190,40,261,38,"converter"],[190,65,261,47],[190,66,261,48,"asciiToHexString"],[190,82,261,64],[190,83,261,65,"paddedValue"],[190,94,261,76],[190,95,261,77],[191,8,262,6],[192,6,263,4],[192,7,263,5],[192,13,263,11],[193,8,264,6,"errors"],[193,14,264,12],[193,15,264,13,"push"],[193,19,264,17],[193,20,265,8],[193,50,265,38,"paramKey"],[193,58,265,46],[193,67,265,55,"protocolKey"],[193,78,265,66],[193,91,266,6],[193,92,266,7],[194,6,267,4],[195,4,268,2],[195,5,268,3],[195,6,268,4],[196,4,270,2],[196,11,270,9],[197,6,271,4,"valid"],[197,11,271,9],[197,13,271,11,"errors"],[197,19,271,17],[197,20,271,18,"length"],[197,26,271,24],[197,31,271,29],[197,32,271,30],[198,6,272,4,"errors"],[198,12,272,10],[198,14,272,12,"errors"],[198,20,272,18],[199,6,273,4,"data"],[199,10,273,8],[199,12,273,10,"writeData"],[200,4,274,2],[200,5,274,3],[201,2,275,0],[202,2,275,1],[202,6,275,1,"_default"],[202,14,275,1],[202,17,275,1,"exports"],[202,24,275,1],[202,25,275,1,"default"],[202,32,275,1],[202,35,277,15],[203,4,277,17,"findDataKeysFromResponse"],[203,28,277,41],[204,4,277,43,"sanitizeWriteData"],[205,2,277,61],[205,3,277,62],[206,0,277,62],[206,3]],"functionMap":{"names":["<global>","findDataKeysFromResponse","eSchema.find$argument_0","matchingFormSchema.inputs.forEach$argument_0","hasMatchingResponseParameter","parameters.every$argument_0","sanitizeWriteData","schemaConfig.parameters.forEach$argument_0","schemaConfig.inputs.forEach$argument_0","fetchAndSanitizeReadParameters"],"mappings":"AAA;OCyB;ICqB;+DDE;oCEkB;GFO;CDG;AIE;0BCQ;GDG;CJC;OME;oCJK,0CI;oCC+B;KD+B;8BEG;GFiC;CNQ;OSE;oCPI,0CO;kCF2B;GE+B;CTO"}},"type":"js/module"}]}